// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for AccountHolderType.
const (
	COUNTERPARTY AccountHolderType = "COUNTERPARTY"
	ENTITY       AccountHolderType = "ENTITY"
)

// Defines values for AccountIdentifierType.
const (
	ADYEN             AccountIdentifierType = "ADYEN"
	AUBPAYBILLERCODE  AccountIdentifierType = "AU_BPAY_BILLER_CODE"
	DKFIK             AccountIdentifierType = "DK_FIK"
	IBAN              AccountIdentifierType = "IBAN"
	NUMBER            AccountIdentifierType = "NUMBER"
	PAYPAL            AccountIdentifierType = "PAYPAL"
	SEBANKGIRO        AccountIdentifierType = "SE_BANKGIRO"
	SEPLUSGIRO        AccountIdentifierType = "SE_PLUSGIRO"
	SOLDO             AccountIdentifierType = "SOLDO"
	WALLETAIRWALLEX   AccountIdentifierType = "WALLET_AIRWALLEX"
	WALLETHYPERWALLET AccountIdentifierType = "WALLET_HYPERWALLET"
	WALLETPAYHAWK     AccountIdentifierType = "WALLET_PAYHAWK"
	WALLETSTRIPE      AccountIdentifierType = "WALLET_STRIPE"
	WALLETSWISSQUOTE  AccountIdentifierType = "WALLET_SWISSQUOTE"
)

// Defines values for AccountType.
const (
	ACCOUNT         AccountType = "ACCOUNT"
	EXTERNALACCOUNT AccountType = "EXTERNAL_ACCOUNT"
	INLINE          AccountType = "INLINE"
)

// Defines values for ApprovalStatus.
const (
	ApprovalStatusAPPROVED ApprovalStatus = "APPROVED"
	ApprovalStatusPENDING  ApprovalStatus = "PENDING"
	ApprovalStatusREJECTED ApprovalStatus = "REJECTED"
)

// Defines values for AttachedTransactionRefType.
const (
	TRANSACTION AttachedTransactionRefType = "TRANSACTION"
)

// Defines values for BatchStatus.
const (
	BatchStatusCOMPLETED         BatchStatus = "COMPLETED"
	BatchStatusCREATED           BatchStatus = "CREATED"
	BatchStatusPROCESSINGSTARTED BatchStatus = "PROCESSING_STARTED"
)

// Defines values for BatchTreatmentType.
const (
	BATCH              BatchTreatmentType = "BATCH"
	INDIVIDUALPAYMENTS BatchTreatmentType = "INDIVIDUAL_PAYMENTS"
)

// Defines values for ChargeBearer.
const (
	ChargeBearerCREDITOR ChargeBearer = "CREDITOR"
	ChargeBearerDEBTOR   ChargeBearer = "DEBTOR"
	ChargeBearerSHARED   ChargeBearer = "SHARED"
)

// Defines values for CounterpartyJSONPatchRemoveAliasOp.
const (
	CounterpartyJSONPatchRemoveAliasOpRemove CounterpartyJSONPatchRemoveAliasOp = "remove"
)

// Defines values for CounterpartyJSONPatchRemoveAliasPath.
const (
	CounterpartyJSONPatchRemoveAliasPathAlias CounterpartyJSONPatchRemoveAliasPath = "/alias"
)

// Defines values for CounterpartyJSONPatchRemoveEmailOp.
const (
	CounterpartyJSONPatchRemoveEmailOpRemove CounterpartyJSONPatchRemoveEmailOp = "remove"
)

// Defines values for CounterpartyJSONPatchRemoveEmailPath.
const (
	CounterpartyJSONPatchRemoveEmailPathEmail CounterpartyJSONPatchRemoveEmailPath = "/email"
)

// Defines values for CounterpartyJSONPatchRemoveEntityIdsOp.
const (
	CounterpartyJSONPatchRemoveEntityIdsOpRemove CounterpartyJSONPatchRemoveEntityIdsOp = "remove"
)

// Defines values for CounterpartyJSONPatchRemoveEntityIdsPath.
const (
	CounterpartyJSONPatchRemoveEntityIdsPathEntityIds CounterpartyJSONPatchRemoveEntityIdsPath = "/entityIds"
)

// Defines values for CounterpartyJSONPatchRemoveNationalIdentifierOp.
const (
	CounterpartyJSONPatchRemoveNationalIdentifierOpRemove CounterpartyJSONPatchRemoveNationalIdentifierOp = "remove"
)

// Defines values for CounterpartyJSONPatchRemoveNationalIdentifierPath.
const (
	CounterpartyJSONPatchRemoveNationalIdentifierPathNationalIdentifier CounterpartyJSONPatchRemoveNationalIdentifierPath = "/nationalIdentifier"
)

// Defines values for CounterpartyJSONPatchRemovePartyTypeOp.
const (
	CounterpartyJSONPatchRemovePartyTypeOpRemove CounterpartyJSONPatchRemovePartyTypeOp = "remove"
)

// Defines values for CounterpartyJSONPatchRemovePartyTypePath.
const (
	CounterpartyJSONPatchRemovePartyTypePathPartyType CounterpartyJSONPatchRemovePartyTypePath = "/partyType"
)

// Defines values for CounterpartyJSONPatchRemovePhoneOp.
const (
	CounterpartyJSONPatchRemovePhoneOpRemove CounterpartyJSONPatchRemovePhoneOp = "remove"
)

// Defines values for CounterpartyJSONPatchRemovePhonePath.
const (
	CounterpartyJSONPatchRemovePhonePathPhone CounterpartyJSONPatchRemovePhonePath = "/phone"
)

// Defines values for CounterpartyJSONPatchReplaceAddressOp.
const (
	CounterpartyJSONPatchReplaceAddressOpReplace CounterpartyJSONPatchReplaceAddressOp = "replace"
)

// Defines values for CounterpartyJSONPatchReplaceAddressPath.
const (
	CounterpartyJSONPatchReplaceAddressPathAddress CounterpartyJSONPatchReplaceAddressPath = "/address"
)

// Defines values for CounterpartyJSONPatchReplaceAliasOp.
const (
	CounterpartyJSONPatchReplaceAliasOpReplace CounterpartyJSONPatchReplaceAliasOp = "replace"
)

// Defines values for CounterpartyJSONPatchReplaceAliasPath.
const (
	CounterpartyJSONPatchReplaceAliasPathAlias CounterpartyJSONPatchReplaceAliasPath = "/alias"
)

// Defines values for CounterpartyJSONPatchReplaceEmailOp.
const (
	CounterpartyJSONPatchReplaceEmailOpReplace CounterpartyJSONPatchReplaceEmailOp = "replace"
)

// Defines values for CounterpartyJSONPatchReplaceEmailPath.
const (
	CounterpartyJSONPatchReplaceEmailPathEmail CounterpartyJSONPatchReplaceEmailPath = "/email"
)

// Defines values for CounterpartyJSONPatchReplaceEntityIdsOp.
const (
	CounterpartyJSONPatchReplaceEntityIdsOpReplace CounterpartyJSONPatchReplaceEntityIdsOp = "replace"
)

// Defines values for CounterpartyJSONPatchReplaceEntityIdsPath.
const (
	CounterpartyJSONPatchReplaceEntityIdsPathEntityIds CounterpartyJSONPatchReplaceEntityIdsPath = "/entityIds"
)

// Defines values for CounterpartyJSONPatchReplaceLegalNameOp.
const (
	CounterpartyJSONPatchReplaceLegalNameOpReplace CounterpartyJSONPatchReplaceLegalNameOp = "replace"
)

// Defines values for CounterpartyJSONPatchReplaceLegalNamePath.
const (
	LegalName CounterpartyJSONPatchReplaceLegalNamePath = "/legalName"
)

// Defines values for CounterpartyJSONPatchReplaceNationalIdentifierOp.
const (
	CounterpartyJSONPatchReplaceNationalIdentifierOpReplace CounterpartyJSONPatchReplaceNationalIdentifierOp = "replace"
)

// Defines values for CounterpartyJSONPatchReplaceNationalIdentifierPath.
const (
	CounterpartyJSONPatchReplaceNationalIdentifierPathNationalIdentifier CounterpartyJSONPatchReplaceNationalIdentifierPath = "/nationalIdentifier"
)

// Defines values for CounterpartyJSONPatchReplacePartyTypeOp.
const (
	CounterpartyJSONPatchReplacePartyTypeOpReplace CounterpartyJSONPatchReplacePartyTypeOp = "replace"
)

// Defines values for CounterpartyJSONPatchReplacePartyTypePath.
const (
	CounterpartyJSONPatchReplacePartyTypePathPartyType CounterpartyJSONPatchReplacePartyTypePath = "/partyType"
)

// Defines values for CounterpartyJSONPatchReplacePhoneOp.
const (
	CounterpartyJSONPatchReplacePhoneOpReplace CounterpartyJSONPatchReplacePhoneOp = "replace"
)

// Defines values for CounterpartyJSONPatchReplacePhonePath.
const (
	CounterpartyJSONPatchReplacePhonePathPhone CounterpartyJSONPatchReplacePhonePath = "/phone"
)

// Defines values for CreditTransferBatchContentType.
const (
	ApplicationvndAtlarPaymentsV2CreditTransferBatchCsv  CreditTransferBatchContentType = "application/vnd.atlar.payments.v2.credit-transfer.batch+csv"
	ApplicationvndAtlarPaymentsV2CreditTransferBatchJson CreditTransferBatchContentType = "application/vnd.atlar.payments.v2.credit-transfer.batch+json"
)

// Defines values for CreditTransferJSONPatchReplaceDateOp.
const (
	CreditTransferJSONPatchReplaceDateOpReplace CreditTransferJSONPatchReplaceDateOp = "replace"
)

// Defines values for CreditTransferJSONPatchReplaceDatePath.
const (
	Date CreditTransferJSONPatchReplaceDatePath = "/date"
)

// Defines values for CreditTransferJSONPatchReplaceStatusOp.
const (
	CreditTransferJSONPatchReplaceStatusOpReplace CreditTransferJSONPatchReplaceStatusOp = "replace"
)

// Defines values for CreditTransferJSONPatchReplaceStatusPath.
const (
	Status CreditTransferJSONPatchReplaceStatusPath = "/status"
)

// Defines values for CreditTransferSchemeType.
const (
	AUCT        CreditTransferSchemeType = "AU_CT"
	AUCTBPAY    CreditTransferSchemeType = "AU_CT_BPAY"
	BGCT        CreditTransferSchemeType = "BG_CT"
	CHCT        CreditTransferSchemeType = "CH_CT"
	CROSSBORDER CreditTransferSchemeType = "CROSS_BORDER"
	DKA2A       CreditTransferSchemeType = "DK_A2A"
	DKCTFIK71   CreditTransferSchemeType = "DK_CT_FIK71"
	DKCTFIK73   CreditTransferSchemeType = "DK_CT_FIK73"
	DKCTFIK75   CreditTransferSchemeType = "DK_CT_FIK75"
	DKCTINST    CreditTransferSchemeType = "DK_CT_INST"
	DKCTSAMEDAY CreditTransferSchemeType = "DK_CT_SAMEDAY"
	GBCTBACS    CreditTransferSchemeType = "GB_CT_BACS"
	GBCTCHAPS   CreditTransferSchemeType = "GB_CT_CHAPS"
	GBCTFPS     CreditTransferSchemeType = "GB_CT_FPS"
	ILCT        CreditTransferSchemeType = "IL_CT"
	ISCT        CreditTransferSchemeType = "IS_CT"
	KRCT        CreditTransferSchemeType = "KR_CT"
	MXCT        CreditTransferSchemeType = "MX_CT"
	NOCT        CreditTransferSchemeType = "NO_CT"
	NOCTKID     CreditTransferSchemeType = "NO_CT_KID"
	SCT         CreditTransferSchemeType = "SCT"
	SCTINST     CreditTransferSchemeType = "SCT_INST"
	SEA2A       CreditTransferSchemeType = "SE_A2A"
	SEGIRO      CreditTransferSchemeType = "SE_GIRO"
	SGCT        CreditTransferSchemeType = "SG_CT"
	THCT        CreditTransferSchemeType = "TH_CT"
	USCTACH     CreditTransferSchemeType = "US_CT_ACH"
	USCTWIRE    CreditTransferSchemeType = "US_CT_WIRE"
)

// Defines values for DirectDebitSchemeType.
const (
	AUTOGIRO DirectDebitSchemeType = "AUTOGIRO"
	SDDB2B   DirectDebitSchemeType = "SDD_B2B"
	SDDCORE  DirectDebitSchemeType = "SDD_CORE"
)

// Defines values for EventType.
const (
	EventTypeCREATED EventType = "CREATED"
	EventTypeDELETED EventType = "DELETED"
	EventTypeUPDATED EventType = "UPDATED"
)

// Defines values for ExternalAccountJSONPatchAddIdentifiersOp.
const (
	ExternalAccountJSONPatchAddIdentifiersOpAdd ExternalAccountJSONPatchAddIdentifiersOp = "add"
)

// Defines values for ExternalAccountJSONPatchAddIdentifiersPath.
const (
	Identifiers ExternalAccountJSONPatchAddIdentifiersPath = "/identifiers/-"
)

// Defines values for ExternalAccountJSONPatchAddRoutingOp.
const (
	ExternalAccountJSONPatchAddRoutingOpAdd ExternalAccountJSONPatchAddRoutingOp = "add"
)

// Defines values for ExternalAccountJSONPatchAddRoutingPath.
const (
	Routing ExternalAccountJSONPatchAddRoutingPath = "/routing/-"
)

// Defines values for ExternalAccountJSONPatchRemoveAliasOp.
const (
	Remove ExternalAccountJSONPatchRemoveAliasOp = "remove"
)

// Defines values for ExternalAccountJSONPatchRemoveAliasPath.
const (
	ExternalAccountJSONPatchRemoveAliasPathAlias ExternalAccountJSONPatchRemoveAliasPath = "/alias"
)

// Defines values for ExternalAccountJSONPatchReplaceAliasOp.
const (
	Replace ExternalAccountJSONPatchReplaceAliasOp = "replace"
)

// Defines values for ExternalAccountJSONPatchReplaceAliasPath.
const (
	ExternalAccountJSONPatchReplaceAliasPathAlias ExternalAccountJSONPatchReplaceAliasPath = "/alias"
)

// Defines values for InstrumentType.
const (
	CITIWORLDLINK InstrumentType = "CITI_WORLDLINK"
	USACH         InstrumentType = "US_ACH"
)

// Defines values for MandateStatus.
const (
	MandateStatusACCEPTED                      MandateStatus = "ACCEPTED"
	MandateStatusACTIVE                        MandateStatus = "ACTIVE"
	MandateStatusCANCELLATIONSENT              MandateStatus = "CANCELLATION_SENT"
	MandateStatusCANCELLED                     MandateStatus = "CANCELLED"
	MandateStatusCREATED                       MandateStatus = "CREATED"
	MandateStatusFAILED                        MandateStatus = "FAILED"
	MandateStatusPENDINGCANCELLATION           MandateStatus = "PENDING_CANCELLATION"
	MandateStatusPENDINGCANCELLATIONSUBMISSION MandateStatus = "PENDING_CANCELLATION_SUBMISSION"
	MandateStatusPENDINGSUBMISSION             MandateStatus = "PENDING_SUBMISSION"
	MandateStatusSENT                          MandateStatus = "SENT"
	MandateStatusUNKNOWN                       MandateStatus = "UNKNOWN"
)

// Defines values for NationalIdentifierType.
const (
	NationalIdentifierTypeCIVIC   NationalIdentifierType = "CIVIC"
	NationalIdentifierTypeCOMPANY NationalIdentifierType = "COMPANY"
)

// Defines values for PartyType.
const (
	PartyTypeCOMPANY    PartyType = "COMPANY"
	PartyTypeINDIVIDUAL PartyType = "INDIVIDUAL"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusACCEPTED          PaymentStatus = "ACCEPTED"
	PaymentStatusAPPROVED          PaymentStatus = "APPROVED"
	PaymentStatusCREATED           PaymentStatus = "CREATED"
	PaymentStatusEXECUTED          PaymentStatus = "EXECUTED"
	PaymentStatusFAILED            PaymentStatus = "FAILED"
	PaymentStatusPENDINGATBANK     PaymentStatus = "PENDING_AT_BANK"
	PaymentStatusPENDINGSUBMISSION PaymentStatus = "PENDING_SUBMISSION"
	PaymentStatusREJECTED          PaymentStatus = "REJECTED"
	PaymentStatusRETURNED          PaymentStatus = "RETURNED"
	PaymentStatusSENT              PaymentStatus = "SENT"
	PaymentStatusUNKNOWN           PaymentStatus = "UNKNOWN"
)

// Defines values for RegulatoryReportingIndicator.
const (
	RegulatoryReportingIndicatorBOTH     RegulatoryReportingIndicator = "BOTH"
	RegulatoryReportingIndicatorCREDITOR RegulatoryReportingIndicator = "CREDITOR"
	RegulatoryReportingIndicatorDEBTOR   RegulatoryReportingIndicator = "DEBTOR"
)

// Defines values for RoutingIdentifierType.
const (
	ATBLZ RoutingIdentifierType = "AT_BLZ"
	AUBSB RoutingIdentifierType = "AU_BSB"
	BIC   RoutingIdentifierType = "BIC"
	CACPA RoutingIdentifierType = "CA_CPA"
	CHBCC RoutingIdentifierType = "CH_BCC"
	CHSIC RoutingIdentifierType = "CH_SIC"
	CNAPS RoutingIdentifierType = "CN_APS"
	DEBLZ RoutingIdentifierType = "DE_BLZ"
	ESNCC RoutingIdentifierType = "ES_NCC"
	GBDSC RoutingIdentifierType = "GB_DSC"
	GRBIC RoutingIdentifierType = "GR_BIC"
	HKNCC RoutingIdentifierType = "HK_NCC"
	IENCC RoutingIdentifierType = "IE_NCC"
	INFSC RoutingIdentifierType = "IN_FSC"
	ITNCC RoutingIdentifierType = "IT_NCC"
	JPZGN RoutingIdentifierType = "JP_ZGN"
	NZNCC RoutingIdentifierType = "NZ_NCC"
	PLKNR RoutingIdentifierType = "PL_KNR"
	PTNCC RoutingIdentifierType = "PT_NCC"
	RUCBC RoutingIdentifierType = "RU_CBC"
	SESBA RoutingIdentifierType = "SE_SBA"
	SGIBG RoutingIdentifierType = "SG_IBG"
	THCBC RoutingIdentifierType = "TH_CBC"
	TWNCC RoutingIdentifierType = "TW_NCC"
	USABA RoutingIdentifierType = "US_ABA"
	USPID RoutingIdentifierType = "US_PID"
	ZANCC RoutingIdentifierType = "ZA_NCC"
)

// Defines values for GetV2CreditTransfersParamsStatus.
const (
	GetV2CreditTransfersParamsStatusAPPROVED GetV2CreditTransfersParamsStatus = "APPROVED"
	GetV2CreditTransfersParamsStatusCREATED  GetV2CreditTransfersParamsStatus = "CREATED"
)

// AccountHolder defines model for AccountHolder.
type AccountHolder struct {
	Address            *Address            `json:"address,omitempty"`
	Id                 *string             `json:"id,omitempty"`
	LegalName          *string             `json:"legalName,omitempty"`
	NationalIdentifier *NationalIdentifier `json:"nationalIdentifier,omitempty"`
	PartyType          *PartyType          `json:"partyType,omitempty"`
	Type               *AccountHolderType  `json:"type,omitempty"`
}

// AccountHolderType defines model for AccountHolder.Type.
type AccountHolderType string

// AccountIdentifier defines model for AccountIdentifier.
type AccountIdentifier struct {
	Invalid *bool                 `json:"invalid,omitempty"`
	Market  MarketCode            `json:"market"`
	Number  string                `json:"number"`
	Type    AccountIdentifierType `json:"type"`
}

// AccountIdentifierType defines model for AccountIdentifierType.
type AccountIdentifierType string

// AccountSnapshot defines model for AccountSnapshot.
type AccountSnapshot struct {
	Currency       CurrencyCode         `json:"currency"`
	Id             *string              `json:"id,omitempty"`
	Identifiers    *[]AccountIdentifier `json:"identifiers,omitempty"`
	Market         MarketCode           `json:"market"`
	OrganizationId *string              `json:"organizationId,omitempty"`
	Routing        *[]RoutingIdentifier `json:"routing,omitempty"`
	Type           AccountType          `json:"type"`
}

// AccountType defines model for AccountType.
type AccountType string

// Address defines model for Address.
type Address struct {
	City         *string      `json:"city,omitempty"`
	Country      *CountryCode `json:"country,omitempty"`
	PostalCode   *string      `json:"postalCode,omitempty"`
	StreetName   *string      `json:"streetName,omitempty"`
	StreetNumber *string      `json:"streetNumber,omitempty"`
}

// Amount defines model for Amount.
type Amount struct {
	Currency    CurrencyCode `json:"currency"`
	StringValue string       `json:"stringValue"`
	Value       int64        `json:"value"`
}

// AmountInput defines model for AmountInput.
type AmountInput struct {
	union json.RawMessage
}

// AmountIntegerValueInput defines model for AmountIntegerValueInput.
type AmountIntegerValueInput struct {
	Currency CurrencyCode `json:"currency"`
	Value    int64        `json:"value"`
}

// AmountStringValueInput defines model for AmountStringValueInput.
type AmountStringValueInput struct {
	Currency    CurrencyCode `json:"currency"`
	StringValue string       `json:"stringValue"`
}

// ApprovalStatus defines model for ApprovalStatus.
type ApprovalStatus string

// ApproveBatchRequest defines model for ApproveBatchRequest.
type ApproveBatchRequest struct {
	ApprovalStepId string `json:"approvalStepId"`
}

// ApprovePaymentRequest defines model for ApprovePaymentRequest.
type ApprovePaymentRequest struct {
	ApprovalStepId string `json:"approvalStepId"`
}

// AttachedTransactionRef defines model for AttachedTransactionRef.
type AttachedTransactionRef struct {
	Id   *string                     `json:"id,omitempty"`
	Type *AttachedTransactionRefType `json:"type,omitempty"`
}

// AttachedTransactionRefType defines model for AttachedTransactionRef.Type.
type AttachedTransactionRefType string

// BatchAmountSums defines model for BatchAmountSums.
type BatchAmountSums = []Amount

// BatchDetails defines model for BatchDetails.
type BatchDetails struct {
	Id        *string            `json:"id,omitempty"`
	Treatment BatchTreatmentType `json:"treatment"`
}

// BatchErrors defines model for BatchErrors.
type BatchErrors = []ErrorDetails

// BatchInputContent defines model for BatchInputContent.
type BatchInputContent struct {
	Checksum    string  `json:"checksum"`
	ContentType string  `json:"contentType"`
	Filename    *string `json:"filename,omitempty"`
	RecordCount *int    `json:"recordCount,omitempty"`
	Size        int64   `json:"size"`
}

// BatchResult defines model for BatchResult.
type BatchResult struct {
	Errors      *[]ErrorDetails `json:"errors,omitempty"`
	PaymentId   *string         `json:"paymentId,omitempty"`
	RecordIndex *int            `json:"recordIndex,omitempty"`
	Skipped     *bool           `json:"skipped,omitempty"`
}

// BatchResultSummary defines model for BatchResultSummary.
type BatchResultSummary struct {
	Failed    int `json:"failed"`
	Skipped   int `json:"skipped"`
	Succeeded int `json:"succeeded"`
	Total     int `json:"total"`
}

// BatchResultsSummary defines model for BatchResultsSummary.
type BatchResultsSummary struct {
	DateFrom  *openapi_types.Date `json:"dateFrom,omitempty"`
	DateTo    *openapi_types.Date `json:"dateTo,omitempty"`
	Failed    int                 `json:"failed"`
	Processed BatchResultSummary  `json:"processed"`
	Skipped   int                 `json:"skipped"`
	Succeeded int                 `json:"succeeded"`
	Sums      *BatchAmountSums    `json:"sums,omitempty"`
	Total     int                 `json:"total"`
}

// BatchStatus defines model for BatchStatus.
type BatchStatus string

// BatchTreatmentType defines model for BatchTreatmentType.
type BatchTreatmentType string

// CategoryPurpose defines model for CategoryPurpose.
type CategoryPurpose = string

// ChargeBearer defines model for ChargeBearer.
type ChargeBearer string

// CitiWorldlinkInstrument defines model for CitiWorldlinkInstrument.
type CitiWorldlinkInstrument struct {
	CitiWorldlinkId string         `json:"citiWorldlinkId"`
	Type            InstrumentType `json:"type"`
}

// CitiWorldlinkInstrumentInput defines model for CitiWorldlinkInstrumentInput.
type CitiWorldlinkInstrumentInput struct {
	Type InstrumentType `json:"type"`
}

// Counterparty defines model for Counterparty.
type Counterparty struct {
	Accounts           *[]ExternalAccount  `json:"accounts,omitempty"`
	Address            *Address            `json:"address,omitempty"`
	Alias              *string             `json:"alias,omitempty"`
	Created            *time.Time          `json:"created,omitempty"`
	Email              *string             `json:"email,omitempty"`
	EntityIds          *[]string           `json:"entityIds,omitempty"`
	Etag               *string             `json:"etag,omitempty"`
	ExternalId         *string             `json:"externalId,omitempty"`
	Id                 *string             `json:"id,omitempty"`
	LegalName          *string             `json:"legalName,omitempty"`
	Metadata           *Metadata           `json:"metadata,omitempty"`
	NationalIdentifier *NationalIdentifier `json:"nationalIdentifier,omitempty"`
	OrganizationId     *string             `json:"organizationId,omitempty"`
	PartyType          *PartyType          `json:"partyType,omitempty"`
	Phone              *string             `json:"phone,omitempty"`
	Updated            *time.Time          `json:"updated,omitempty"`
	Version            *int                `json:"version,omitempty"`
}

// CounterpartyJSONPatchRemoveAlias defines model for CounterpartyJSONPatchRemoveAlias.
type CounterpartyJSONPatchRemoveAlias struct {
	Op   CounterpartyJSONPatchRemoveAliasOp   `json:"op"`
	Path CounterpartyJSONPatchRemoveAliasPath `json:"path"`
}

// CounterpartyJSONPatchRemoveAliasOp defines model for CounterpartyJSONPatchRemoveAlias.Op.
type CounterpartyJSONPatchRemoveAliasOp string

// CounterpartyJSONPatchRemoveAliasPath defines model for CounterpartyJSONPatchRemoveAlias.Path.
type CounterpartyJSONPatchRemoveAliasPath string

// CounterpartyJSONPatchRemoveEmail defines model for CounterpartyJSONPatchRemoveEmail.
type CounterpartyJSONPatchRemoveEmail struct {
	Op   CounterpartyJSONPatchRemoveEmailOp   `json:"op"`
	Path CounterpartyJSONPatchRemoveEmailPath `json:"path"`
}

// CounterpartyJSONPatchRemoveEmailOp defines model for CounterpartyJSONPatchRemoveEmail.Op.
type CounterpartyJSONPatchRemoveEmailOp string

// CounterpartyJSONPatchRemoveEmailPath defines model for CounterpartyJSONPatchRemoveEmail.Path.
type CounterpartyJSONPatchRemoveEmailPath string

// CounterpartyJSONPatchRemoveEntityIds defines model for CounterpartyJSONPatchRemoveEntityIds.
type CounterpartyJSONPatchRemoveEntityIds struct {
	Op   CounterpartyJSONPatchRemoveEntityIdsOp   `json:"op"`
	Path CounterpartyJSONPatchRemoveEntityIdsPath `json:"path"`
}

// CounterpartyJSONPatchRemoveEntityIdsOp defines model for CounterpartyJSONPatchRemoveEntityIds.Op.
type CounterpartyJSONPatchRemoveEntityIdsOp string

// CounterpartyJSONPatchRemoveEntityIdsPath defines model for CounterpartyJSONPatchRemoveEntityIds.Path.
type CounterpartyJSONPatchRemoveEntityIdsPath string

// CounterpartyJSONPatchRemoveNationalIdentifier defines model for CounterpartyJSONPatchRemoveNationalIdentifier.
type CounterpartyJSONPatchRemoveNationalIdentifier struct {
	Op   CounterpartyJSONPatchRemoveNationalIdentifierOp   `json:"op"`
	Path CounterpartyJSONPatchRemoveNationalIdentifierPath `json:"path"`
}

// CounterpartyJSONPatchRemoveNationalIdentifierOp defines model for CounterpartyJSONPatchRemoveNationalIdentifier.Op.
type CounterpartyJSONPatchRemoveNationalIdentifierOp string

// CounterpartyJSONPatchRemoveNationalIdentifierPath defines model for CounterpartyJSONPatchRemoveNationalIdentifier.Path.
type CounterpartyJSONPatchRemoveNationalIdentifierPath string

// CounterpartyJSONPatchRemovePartyType defines model for CounterpartyJSONPatchRemovePartyType.
type CounterpartyJSONPatchRemovePartyType struct {
	Op   CounterpartyJSONPatchRemovePartyTypeOp   `json:"op"`
	Path CounterpartyJSONPatchRemovePartyTypePath `json:"path"`
}

// CounterpartyJSONPatchRemovePartyTypeOp defines model for CounterpartyJSONPatchRemovePartyType.Op.
type CounterpartyJSONPatchRemovePartyTypeOp string

// CounterpartyJSONPatchRemovePartyTypePath defines model for CounterpartyJSONPatchRemovePartyType.Path.
type CounterpartyJSONPatchRemovePartyTypePath string

// CounterpartyJSONPatchRemovePhone defines model for CounterpartyJSONPatchRemovePhone.
type CounterpartyJSONPatchRemovePhone struct {
	Op   CounterpartyJSONPatchRemovePhoneOp   `json:"op"`
	Path CounterpartyJSONPatchRemovePhonePath `json:"path"`
}

// CounterpartyJSONPatchRemovePhoneOp defines model for CounterpartyJSONPatchRemovePhone.Op.
type CounterpartyJSONPatchRemovePhoneOp string

// CounterpartyJSONPatchRemovePhonePath defines model for CounterpartyJSONPatchRemovePhone.Path.
type CounterpartyJSONPatchRemovePhonePath string

// CounterpartyJSONPatchReplaceAddress defines model for CounterpartyJSONPatchReplaceAddress.
type CounterpartyJSONPatchReplaceAddress struct {
	Op    CounterpartyJSONPatchReplaceAddressOp   `json:"op"`
	Path  CounterpartyJSONPatchReplaceAddressPath `json:"path"`
	Value Address                                 `json:"value"`
}

// CounterpartyJSONPatchReplaceAddressOp defines model for CounterpartyJSONPatchReplaceAddress.Op.
type CounterpartyJSONPatchReplaceAddressOp string

// CounterpartyJSONPatchReplaceAddressPath defines model for CounterpartyJSONPatchReplaceAddress.Path.
type CounterpartyJSONPatchReplaceAddressPath string

// CounterpartyJSONPatchReplaceAlias defines model for CounterpartyJSONPatchReplaceAlias.
type CounterpartyJSONPatchReplaceAlias struct {
	Op    CounterpartyJSONPatchReplaceAliasOp   `json:"op"`
	Path  CounterpartyJSONPatchReplaceAliasPath `json:"path"`
	Value string                                `json:"value"`
}

// CounterpartyJSONPatchReplaceAliasOp defines model for CounterpartyJSONPatchReplaceAlias.Op.
type CounterpartyJSONPatchReplaceAliasOp string

// CounterpartyJSONPatchReplaceAliasPath defines model for CounterpartyJSONPatchReplaceAlias.Path.
type CounterpartyJSONPatchReplaceAliasPath string

// CounterpartyJSONPatchReplaceEmail defines model for CounterpartyJSONPatchReplaceEmail.
type CounterpartyJSONPatchReplaceEmail struct {
	Op    CounterpartyJSONPatchReplaceEmailOp   `json:"op"`
	Path  CounterpartyJSONPatchReplaceEmailPath `json:"path"`
	Value string                                `json:"value"`
}

// CounterpartyJSONPatchReplaceEmailOp defines model for CounterpartyJSONPatchReplaceEmail.Op.
type CounterpartyJSONPatchReplaceEmailOp string

// CounterpartyJSONPatchReplaceEmailPath defines model for CounterpartyJSONPatchReplaceEmail.Path.
type CounterpartyJSONPatchReplaceEmailPath string

// CounterpartyJSONPatchReplaceEntityIds defines model for CounterpartyJSONPatchReplaceEntityIds.
type CounterpartyJSONPatchReplaceEntityIds struct {
	Op    CounterpartyJSONPatchReplaceEntityIdsOp   `json:"op"`
	Path  CounterpartyJSONPatchReplaceEntityIdsPath `json:"path"`
	Value []string                                  `json:"value"`
}

// CounterpartyJSONPatchReplaceEntityIdsOp defines model for CounterpartyJSONPatchReplaceEntityIds.Op.
type CounterpartyJSONPatchReplaceEntityIdsOp string

// CounterpartyJSONPatchReplaceEntityIdsPath defines model for CounterpartyJSONPatchReplaceEntityIds.Path.
type CounterpartyJSONPatchReplaceEntityIdsPath string

// CounterpartyJSONPatchReplaceLegalName defines model for CounterpartyJSONPatchReplaceLegalName.
type CounterpartyJSONPatchReplaceLegalName struct {
	Op    CounterpartyJSONPatchReplaceLegalNameOp   `json:"op"`
	Path  CounterpartyJSONPatchReplaceLegalNamePath `json:"path"`
	Value string                                    `json:"value"`
}

// CounterpartyJSONPatchReplaceLegalNameOp defines model for CounterpartyJSONPatchReplaceLegalName.Op.
type CounterpartyJSONPatchReplaceLegalNameOp string

// CounterpartyJSONPatchReplaceLegalNamePath defines model for CounterpartyJSONPatchReplaceLegalName.Path.
type CounterpartyJSONPatchReplaceLegalNamePath string

// CounterpartyJSONPatchReplaceNationalIdentifier defines model for CounterpartyJSONPatchReplaceNationalIdentifier.
type CounterpartyJSONPatchReplaceNationalIdentifier struct {
	Op    CounterpartyJSONPatchReplaceNationalIdentifierOp   `json:"op"`
	Path  CounterpartyJSONPatchReplaceNationalIdentifierPath `json:"path"`
	Value NationalIdentifier                                 `json:"value"`
}

// CounterpartyJSONPatchReplaceNationalIdentifierOp defines model for CounterpartyJSONPatchReplaceNationalIdentifier.Op.
type CounterpartyJSONPatchReplaceNationalIdentifierOp string

// CounterpartyJSONPatchReplaceNationalIdentifierPath defines model for CounterpartyJSONPatchReplaceNationalIdentifier.Path.
type CounterpartyJSONPatchReplaceNationalIdentifierPath string

// CounterpartyJSONPatchReplacePartyType defines model for CounterpartyJSONPatchReplacePartyType.
type CounterpartyJSONPatchReplacePartyType struct {
	Op    CounterpartyJSONPatchReplacePartyTypeOp   `json:"op"`
	Path  CounterpartyJSONPatchReplacePartyTypePath `json:"path"`
	Value PartyType                                 `json:"value"`
}

// CounterpartyJSONPatchReplacePartyTypeOp defines model for CounterpartyJSONPatchReplacePartyType.Op.
type CounterpartyJSONPatchReplacePartyTypeOp string

// CounterpartyJSONPatchReplacePartyTypePath defines model for CounterpartyJSONPatchReplacePartyType.Path.
type CounterpartyJSONPatchReplacePartyTypePath string

// CounterpartyJSONPatchReplacePhone defines model for CounterpartyJSONPatchReplacePhone.
type CounterpartyJSONPatchReplacePhone struct {
	Op    CounterpartyJSONPatchReplacePhoneOp   `json:"op"`
	Path  CounterpartyJSONPatchReplacePhonePath `json:"path"`
	Value string                                `json:"value"`
}

// CounterpartyJSONPatchReplacePhoneOp defines model for CounterpartyJSONPatchReplacePhone.Op.
type CounterpartyJSONPatchReplacePhoneOp string

// CounterpartyJSONPatchReplacePhonePath defines model for CounterpartyJSONPatchReplacePhone.Path.
type CounterpartyJSONPatchReplacePhonePath string

// CounterpartyJSONPatchRequest defines model for CounterpartyJSONPatchRequest.
type CounterpartyJSONPatchRequest = []CounterpartyJSONPatchRequest_Item

// CounterpartyJSONPatchRequest_Item defines model for CounterpartyJSONPatchRequest.Item.
type CounterpartyJSONPatchRequest_Item struct {
	union json.RawMessage
}

// CountryCode defines model for CountryCode.
type CountryCode = string

// CreateCounterpartyRequest defines model for CreateCounterpartyRequest.
type CreateCounterpartyRequest struct {
	Accounts           *[]CreateEmbeddedExternalAccountRequest `json:"accounts,omitempty"`
	Address            *Address                                `json:"address,omitempty"`
	Alias              *string                                 `json:"alias,omitempty"`
	Email              *string                                 `json:"email,omitempty"`
	EntityIds          *[]string                               `json:"entityIds,omitempty"`
	ExternalId         *string                                 `json:"externalId,omitempty"`
	LegalName          string                                  `json:"legalName"`
	Metadata           *Metadata                               `json:"metadata,omitempty"`
	NationalIdentifier *NationalIdentifier                     `json:"nationalIdentifier,omitempty"`
	PartyType          *PartyType                              `json:"partyType,omitempty"`
	Phone              *string                                 `json:"phone,omitempty"`
}

// CreateCreditTransferBatchRequest defines model for CreateCreditTransferBatchRequest.
type CreateCreditTransferBatchRequest struct {
	ExternalId *string                       `json:"externalId,omitempty"`
	Payments   []CreateCreditTransferRequest `json:"payments"`
	Treatment  BatchTreatmentType            `json:"treatment"`
}

// CreateCreditTransferRequest defines model for CreateCreditTransferRequest.
type CreateCreditTransferRequest struct {
	Amount              AmountInput                   `json:"amount"`
	CategoryPurpose     *CategoryPurpose              `json:"categoryPurpose,omitempty"`
	ChargeBearer        *ChargeBearer                 `json:"chargeBearer,omitempty"`
	Date                openapi_types.Date            `json:"date"`
	Destination         CreditTransferDestination     `json:"destination"`
	ExternalId          *string                       `json:"externalId,omitempty"`
	Metadata            *Metadata                     `json:"metadata,omitempty"`
	Reference           PaymentReference              `json:"reference"`
	RegulatoryReporting *[]RegulatoryReportingDetails `json:"regulatoryReporting,omitempty"`
	Scheme              CreditTransferSchemeType      `json:"scheme"`
	SchemeDetails       *SchemeDetailsInput           `json:"schemeDetails,omitempty"`
	Source              InternalAccountRef            `json:"source"`
}

// CreateDirectDebitRequest defines model for CreateDirectDebitRequest.
type CreateDirectDebitRequest struct {
	Amount          AmountInput                     `json:"amount"`
	CategoryPurpose *CategoryPurpose                `json:"categoryPurpose,omitempty"`
	ChargeBearer    *ChargeBearer                   `json:"chargeBearer,omitempty"`
	Date            openapi_types.Date              `json:"date"`
	Destination     InternalAccountRef              `json:"destination"`
	ExternalId      *string                         `json:"externalId,omitempty"`
	Metadata        *Metadata                       `json:"metadata,omitempty"`
	Reference       PaymentReference                `json:"reference"`
	Scheme          DirectDebitSchemeType           `json:"scheme"`
	Source          CreateDirectDebitRequest_Source `json:"source"`
}

// CreateDirectDebitRequest_Source defines model for CreateDirectDebitRequest.Source.
type CreateDirectDebitRequest_Source struct {
	union json.RawMessage
}

// CreateEmbeddedExternalAccountRequest defines model for CreateEmbeddedExternalAccountRequest.
type CreateEmbeddedExternalAccountRequest struct {
	ExternalId  *string              `json:"externalId,omitempty"`
	Identifiers []AccountIdentifier  `json:"identifiers"`
	Market      MarketCode           `json:"market"`
	Metadata    *Metadata            `json:"metadata,omitempty"`
	Routing     *[]RoutingIdentifier `json:"routing,omitempty"`
}

// CreateExternalAccountRequest defines model for CreateExternalAccountRequest.
type CreateExternalAccountRequest struct {
	Alias          *string              `json:"alias,omitempty"`
	CounterpartyId string               `json:"counterpartyId"`
	ExternalId     *string              `json:"externalId,omitempty"`
	Identifiers    []AccountIdentifier  `json:"identifiers"`
	Market         MarketCode           `json:"market"`
	Metadata       *Metadata            `json:"metadata,omitempty"`
	Routing        *[]RoutingIdentifier `json:"routing,omitempty"`
}

// CreateMandateRequest defines model for CreateMandateRequest.
type CreateMandateRequest struct {
	Active               *bool                 `json:"active,omitempty"`
	CreditorReference    string                `json:"creditorReference"`
	DestinationAccountId *string               `json:"destinationAccountId,omitempty"`
	ExternalAccountId    string                `json:"externalAccountId"`
	ExternalId           *string               `json:"externalId,omitempty"`
	MandateReference     string                `json:"mandateReference"`
	Metadata             *Metadata             `json:"metadata,omitempty"`
	Scheme               DirectDebitSchemeType `json:"scheme"`
	SignatureDate        *openapi_types.Date   `json:"signatureDate,omitempty"`
}

// CreditTransfer defines model for CreditTransfer.
type CreditTransfer struct {
	Amount                  Amount                        `json:"amount"`
	ApprovalSteps           *[]PaymentApprovalStep        `json:"approvalSteps,omitempty"`
	AttachedTransactions    *[]AttachedTransactionRef     `json:"attachedTransactions,omitempty"`
	Batch                   *BatchDetails                 `json:"batch,omitempty"`
	CategoryPurpose         *CategoryPurpose              `json:"categoryPurpose,omitempty"`
	ChargeBearer            *ChargeBearer                 `json:"chargeBearer,omitempty"`
	ConnectionInstructionId *string                       `json:"connectionInstructionId,omitempty"`
	Created                 *time.Time                    `json:"created,omitempty"`
	CreatorUserId           *string                       `json:"creatorUserId,omitempty"`
	Date                    openapi_types.Date            `json:"date"`
	Destination             *CreditTransfer_Destination   `json:"destination,omitempty"`
	DestinationHolder       AccountHolder                 `json:"destinationHolder"`
	Etag                    *string                       `json:"etag,omitempty"`
	ExternalId              *string                       `json:"externalId,omitempty"`
	Id                      *string                       `json:"id,omitempty"`
	Metadata                *Metadata                     `json:"metadata,omitempty"`
	OrganizationId          *string                       `json:"organizationId,omitempty"`
	Reference               PaymentReference              `json:"reference"`
	RegulatoryReporting     *[]RegulatoryReportingDetails `json:"regulatoryReporting,omitempty"`
	Scheme                  CreditTransferSchemeType      `json:"scheme"`
	SchemeDetails           *SchemeDetails                `json:"schemeDetails,omitempty"`
	Source                  AccountSnapshot               `json:"source"`
	SourceHolder            AccountHolder                 `json:"sourceHolder"`
	Status                  PaymentStatus                 `json:"status"`
	Updated                 *time.Time                    `json:"updated,omitempty"`
	Version                 *int                          `json:"version,omitempty"`
}

// CreditTransfer_Destination defines model for CreditTransfer.Destination.
type CreditTransfer_Destination struct {
	union json.RawMessage
}

// CreditTransferBatch defines model for CreditTransferBatch.
type CreditTransferBatch struct {
	ApprovalSteps  *[]PaymentApprovalStep `json:"approvalSteps,omitempty"`
	Created        *time.Time             `json:"created,omitempty"`
	Errors         *BatchErrors           `json:"errors,omitempty"`
	Etag           *string                `json:"etag,omitempty"`
	ExternalId     *string                `json:"externalId,omitempty"`
	Id             *string                `json:"id,omitempty"`
	InputContent   *BatchInputContent     `json:"inputContent,omitempty"`
	Metadata       *Metadata              `json:"metadata,omitempty"`
	OrganizationId *string                `json:"organizationId,omitempty"`
	ResultSummary  *BatchResultSummary    `json:"resultSummary,omitempty"`
	Results        *BatchResultsSummary   `json:"results,omitempty"`
	Status         BatchStatus            `json:"status"`
	Treatment      BatchTreatmentType     `json:"treatment"`
	Updated        *time.Time             `json:"updated,omitempty"`
	Version        *int                   `json:"version,omitempty"`
}

// CreditTransferBatchContentType defines model for CreditTransferBatchContentType.
type CreditTransferBatchContentType string

// CreditTransferDestination defines model for CreditTransferDestination.
type CreditTransferDestination struct {
	union json.RawMessage
}

// CreditTransferJSONPatchReplaceDate defines model for CreditTransferJSONPatchReplaceDate.
type CreditTransferJSONPatchReplaceDate struct {
	Op    CreditTransferJSONPatchReplaceDateOp   `json:"op"`
	Path  CreditTransferJSONPatchReplaceDatePath `json:"path"`
	Value openapi_types.Date                     `json:"value"`
}

// CreditTransferJSONPatchReplaceDateOp defines model for CreditTransferJSONPatchReplaceDate.Op.
type CreditTransferJSONPatchReplaceDateOp string

// CreditTransferJSONPatchReplaceDatePath defines model for CreditTransferJSONPatchReplaceDate.Path.
type CreditTransferJSONPatchReplaceDatePath string

// CreditTransferJSONPatchReplaceStatus defines model for CreditTransferJSONPatchReplaceStatus.
type CreditTransferJSONPatchReplaceStatus struct {
	Op    CreditTransferJSONPatchReplaceStatusOp   `json:"op"`
	Path  CreditTransferJSONPatchReplaceStatusPath `json:"path"`
	Value PaymentStatus                            `json:"value"`
}

// CreditTransferJSONPatchReplaceStatusOp defines model for CreditTransferJSONPatchReplaceStatus.Op.
type CreditTransferJSONPatchReplaceStatusOp string

// CreditTransferJSONPatchReplaceStatusPath defines model for CreditTransferJSONPatchReplaceStatus.Path.
type CreditTransferJSONPatchReplaceStatusPath string

// CreditTransferJSONPatchRequest defines model for CreditTransferJSONPatchRequest.
type CreditTransferJSONPatchRequest = []CreditTransferJSONPatchRequest_Item

// CreditTransferJSONPatchRequest_Item defines model for CreditTransferJSONPatchRequest.Item.
type CreditTransferJSONPatchRequest_Item struct {
	union json.RawMessage
}

// CreditTransferSchemeType defines model for CreditTransferSchemeType.
type CreditTransferSchemeType string

// CurrencyCode defines model for CurrencyCode.
type CurrencyCode = string

// DirectDebit defines model for DirectDebit.
type DirectDebit struct {
	Amount                  Amount                    `json:"amount"`
	ApprovalSteps           *[]PaymentApprovalStep    `json:"approvalSteps,omitempty"`
	AttachedTransactions    *[]AttachedTransactionRef `json:"attachedTransactions,omitempty"`
	CategoryPurpose         *CategoryPurpose          `json:"categoryPurpose,omitempty"`
	ChargeBearer            *ChargeBearer             `json:"chargeBearer,omitempty"`
	ConnectionInstructionId *string                   `json:"connectionInstructionId,omitempty"`
	Created                 *time.Time                `json:"created,omitempty"`
	CreatorUserId           *string                   `json:"creatorUserId,omitempty"`
	Date                    openapi_types.Date        `json:"date"`
	Destination             AccountSnapshot           `json:"destination"`
	DestinationHolder       AccountHolder             `json:"destinationHolder"`
	Etag                    *string                   `json:"etag,omitempty"`
	ExternalId              *string                   `json:"externalId,omitempty"`
	Id                      *string                   `json:"id,omitempty"`
	Mandate                 *MandateSnapshot          `json:"mandate,omitempty"`
	Metadata                *Metadata                 `json:"metadata,omitempty"`
	OrganizationId          *string                   `json:"organizationId,omitempty"`
	Reference               PaymentReference          `json:"reference"`
	Scheme                  DirectDebitSchemeType     `json:"scheme"`
	Source                  ExternalAccountSnapshot   `json:"source"`
	SourceHolder            AccountHolder             `json:"sourceHolder"`
	Status                  PaymentStatus             `json:"status"`
	Updated                 *time.Time                `json:"updated,omitempty"`
	Version                 *int                      `json:"version,omitempty"`
}

// DirectDebitSchemeType defines model for DirectDebitSchemeType.
type DirectDebitSchemeType string

// ErrorDetails defines model for ErrorDetails.
type ErrorDetails struct {
	Code  *string `json:"code,omitempty"`
	Error *string `json:"error,omitempty"`
	Field *string `json:"field,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *[]ErrorDetails `json:"details,omitempty"`
	Message *string         `json:"message,omitempty"`
	Status  *int            `json:"status,omitempty"`
}

// Event defines model for Event.
type Event struct {
	Details        *map[string]string `json:"details,omitempty"`
	EntityId       *string            `json:"entityId,omitempty"`
	Id             int                `json:"id"`
	Message        *string            `json:"message,omitempty"`
	Name           string             `json:"name"`
	OrganizationId *string            `json:"organizationId,omitempty"`
	Originator     string             `json:"originator"`
	Timestamp      time.Time          `json:"timestamp"`
	Type           EventType          `json:"type"`
}

// EventType defines model for EventType.
type EventType string

// ExternalAccount defines model for ExternalAccount.
type ExternalAccount struct {
	Alias          *string              `json:"alias,omitempty"`
	CounterpartyId *string              `json:"counterpartyId,omitempty"`
	Created        *time.Time           `json:"created,omitempty"`
	EntityIds      *[]string            `json:"entityIds,omitempty"`
	Etag           *string              `json:"etag,omitempty"`
	ExternalId     *string              `json:"externalId,omitempty"`
	Id             *string              `json:"id,omitempty"`
	Identifiers    *[]AccountIdentifier `json:"identifiers,omitempty"`
	Market         MarketCode           `json:"market"`
	Metadata       *Metadata            `json:"metadata,omitempty"`
	Name           *string              `json:"name,omitempty"`
	OrganizationId *string              `json:"organizationId,omitempty"`
	Routing        *[]RoutingIdentifier `json:"routing,omitempty"`
	Updated        *time.Time           `json:"updated,omitempty"`
	Version        *int                 `json:"version,omitempty"`
}

// ExternalAccountJSONPatchAddIdentifiers defines model for ExternalAccountJSONPatchAddIdentifiers.
type ExternalAccountJSONPatchAddIdentifiers struct {
	Op    ExternalAccountJSONPatchAddIdentifiersOp   `json:"op"`
	Path  ExternalAccountJSONPatchAddIdentifiersPath `json:"path"`
	Value AccountIdentifier                          `json:"value"`
}

// ExternalAccountJSONPatchAddIdentifiersOp defines model for ExternalAccountJSONPatchAddIdentifiers.Op.
type ExternalAccountJSONPatchAddIdentifiersOp string

// ExternalAccountJSONPatchAddIdentifiersPath defines model for ExternalAccountJSONPatchAddIdentifiers.Path.
type ExternalAccountJSONPatchAddIdentifiersPath string

// ExternalAccountJSONPatchAddRouting defines model for ExternalAccountJSONPatchAddRouting.
type ExternalAccountJSONPatchAddRouting struct {
	Op    ExternalAccountJSONPatchAddRoutingOp   `json:"op"`
	Path  ExternalAccountJSONPatchAddRoutingPath `json:"path"`
	Value RoutingIdentifier                      `json:"value"`
}

// ExternalAccountJSONPatchAddRoutingOp defines model for ExternalAccountJSONPatchAddRouting.Op.
type ExternalAccountJSONPatchAddRoutingOp string

// ExternalAccountJSONPatchAddRoutingPath defines model for ExternalAccountJSONPatchAddRouting.Path.
type ExternalAccountJSONPatchAddRoutingPath string

// ExternalAccountJSONPatchRemoveAlias defines model for ExternalAccountJSONPatchRemoveAlias.
type ExternalAccountJSONPatchRemoveAlias struct {
	Op   ExternalAccountJSONPatchRemoveAliasOp   `json:"op"`
	Path ExternalAccountJSONPatchRemoveAliasPath `json:"path"`
}

// ExternalAccountJSONPatchRemoveAliasOp defines model for ExternalAccountJSONPatchRemoveAlias.Op.
type ExternalAccountJSONPatchRemoveAliasOp string

// ExternalAccountJSONPatchRemoveAliasPath defines model for ExternalAccountJSONPatchRemoveAlias.Path.
type ExternalAccountJSONPatchRemoveAliasPath string

// ExternalAccountJSONPatchReplaceAlias defines model for ExternalAccountJSONPatchReplaceAlias.
type ExternalAccountJSONPatchReplaceAlias struct {
	Op    ExternalAccountJSONPatchReplaceAliasOp   `json:"op"`
	Path  ExternalAccountJSONPatchReplaceAliasPath `json:"path"`
	Value string                                   `json:"value"`
}

// ExternalAccountJSONPatchReplaceAliasOp defines model for ExternalAccountJSONPatchReplaceAlias.Op.
type ExternalAccountJSONPatchReplaceAliasOp string

// ExternalAccountJSONPatchReplaceAliasPath defines model for ExternalAccountJSONPatchReplaceAlias.Path.
type ExternalAccountJSONPatchReplaceAliasPath string

// ExternalAccountJSONPatchRequest defines model for ExternalAccountJSONPatchRequest.
type ExternalAccountJSONPatchRequest = []ExternalAccountJSONPatchRequest_Item

// ExternalAccountJSONPatchRequest_Item defines model for ExternalAccountJSONPatchRequest.Item.
type ExternalAccountJSONPatchRequest_Item struct {
	union json.RawMessage
}

// ExternalAccountRef defines model for ExternalAccountRef.
type ExternalAccountRef struct {
	Id   string      `json:"id"`
	Type AccountType `json:"type"`
}

// ExternalAccountSnapshot defines model for ExternalAccountSnapshot.
type ExternalAccountSnapshot struct {
	Id             *string              `json:"id,omitempty"`
	Identifiers    *[]AccountIdentifier `json:"identifiers,omitempty"`
	Market         MarketCode           `json:"market"`
	OrganizationId *string              `json:"organizationId,omitempty"`
	Routing        *[]RoutingIdentifier `json:"routing,omitempty"`
	Type           AccountType          `json:"type"`
}

// InlineAccountHolder defines model for InlineAccountHolder.
type InlineAccountHolder struct {
	LegalName *string `json:"legalName,omitempty"`
}

// InlineExternalAccount defines model for InlineExternalAccount.
type InlineExternalAccount struct {
	Holder      InlineAccountHolder  `json:"holder"`
	Identifiers []AccountIdentifier  `json:"identifiers"`
	Market      MarketCode           `json:"market"`
	Routing     *[]RoutingIdentifier `json:"routing,omitempty"`
	Type        AccountType          `json:"type"`
}

// Instrument defines model for Instrument.
type Instrument struct {
	union json.RawMessage
}

// InstrumentInput defines model for InstrumentInput.
type InstrumentInput struct {
	union json.RawMessage
}

// InstrumentType defines model for InstrumentType.
type InstrumentType string

// InternalAccountRef defines model for InternalAccountRef.
type InternalAccountRef struct {
	Id   string      `json:"id"`
	Type AccountType `json:"type"`
}

// ListResponse defines model for ListResponse.
type ListResponse struct {
	Items     interface{} `json:"items"`
	Limit     int         `json:"limit"`
	NextToken string      `json:"nextToken"`
	Token     string      `json:"token"`
}

// Mandate defines model for Mandate.
type Mandate struct {
	ConnectionInstructionId *string                 `json:"connectionInstructionId,omitempty"`
	CounterpartyId          *string                 `json:"counterpartyId,omitempty"`
	Created                 *time.Time              `json:"created,omitempty"`
	CreditorReference       string                  `json:"creditorReference"`
	DestinationAccountId    *string                 `json:"destinationAccountId,omitempty"`
	Etag                    *string                 `json:"etag,omitempty"`
	ExternalAccountId       string                  `json:"externalAccountId"`
	ExternalId              *string                 `json:"externalId,omitempty"`
	Id                      *string                 `json:"id,omitempty"`
	MandateReference        string                  `json:"mandateReference"`
	Metadata                *Metadata               `json:"metadata,omitempty"`
	OrganizationId          *string                 `json:"organizationId,omitempty"`
	Scheme                  DirectDebitSchemeType   `json:"scheme"`
	SignatureDate           *openapi_types.Date     `json:"signatureDate,omitempty"`
	Source                  ExternalAccountSnapshot `json:"source"`
	SourceHolder            AccountHolder           `json:"sourceHolder"`
	Status                  MandateStatus           `json:"status"`
	Updated                 *time.Time              `json:"updated,omitempty"`
	Version                 *int                    `json:"version,omitempty"`
}

// MandateSnapshot defines model for MandateSnapshot.
type MandateSnapshot struct {
	CreditorReference string              `json:"creditorReference"`
	FinalCollection   *bool               `json:"finalCollection,omitempty"`
	Id                *string             `json:"id,omitempty"`
	MandateReference  string              `json:"mandateReference"`
	SignatureDate     *openapi_types.Date `json:"signatureDate,omitempty"`
	Version           *int                `json:"version,omitempty"`
}

// MandateStatus defines model for MandateStatus.
type MandateStatus string

// MarketCode defines model for MarketCode.
type MarketCode = string

// Metadata defines model for Metadata.
type Metadata map[string]string

// NationalIdentifier defines model for NationalIdentifier.
type NationalIdentifier struct {
	Market MarketCode             `json:"market"`
	Number string                 `json:"number"`
	Type   NationalIdentifierType `json:"type"`
}

// NationalIdentifierType defines model for NationalIdentifier.Type.
type NationalIdentifierType string

// PartyType defines model for PartyType.
type PartyType string

// PaymentApprovalStep defines model for PaymentApprovalStep.
type PaymentApprovalStep struct {
	AllowCreatorApproval *bool          `json:"allowCreatorApproval,omitempty"`
	ApprovalChainId      *string        `json:"approvalChainId,omitempty"`
	Approver             *UserAuditInfo `json:"approver,omitempty"`
	AutoApproved         bool           `json:"autoApproved"`
	BatchId              *string        `json:"batchId,omitempty"`
	Id                   *string        `json:"id,omitempty"`
	RequiredRoleIds      *[]string      `json:"requiredRoleIds,omitempty"`
	Status               ApprovalStatus `json:"status"`
	Updated              *time.Time     `json:"updated,omitempty"`
}

// PaymentReference defines model for PaymentReference.
type PaymentReference = string

// PaymentStatus defines model for PaymentStatus.
type PaymentStatus string

// RegulatoryReportingDetails defines model for RegulatoryReportingDetails.
type RegulatoryReportingDetails struct {
	Code      string                       `json:"code"`
	Indicator RegulatoryReportingIndicator `json:"indicator"`
	Market    MarketCode                   `json:"market"`
}

// RegulatoryReportingIndicator defines model for RegulatoryReportingIndicator.
type RegulatoryReportingIndicator string

// RejectPaymentRequest defines model for RejectPaymentRequest.
type RejectPaymentRequest struct {
	Reason *string `json:"reason,omitempty"`
}

// RoutingConstraints defines model for RoutingConstraints.
type RoutingConstraints struct {
	AccountNumberType *AccountIdentifierType `json:"accountNumberType,omitempty"`
	Scheme            *string                `json:"scheme,omitempty"`
}

// RoutingIdentifier defines model for RoutingIdentifier.
type RoutingIdentifier struct {
	Constraints *RoutingConstraints   `json:"constraints,omitempty"`
	Invalid     *bool                 `json:"invalid,omitempty"`
	Number      string                `json:"number"`
	Type        RoutingIdentifierType `json:"type"`
}

// RoutingIdentifierType defines model for RoutingIdentifierType.
type RoutingIdentifierType string

// SchemeDetails defines model for SchemeDetails.
type SchemeDetails struct {
	Instrument *Instrument `json:"instrument,omitempty"`
}

// SchemeDetailsInput defines model for SchemeDetailsInput.
type SchemeDetailsInput struct {
	Instrument *InstrumentInput `json:"instrument,omitempty"`
}

// USACHInstrument defines model for USACHInstrument.
type USACHInstrument struct {
	Type           InstrumentType `json:"type"`
	UsAchCompanyId string         `json:"usAchCompanyId"`
}

// UserAuditInfo defines model for UserAuditInfo.
type UserAuditInfo struct {
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	RoleId   *string `json:"roleId,omitempty"`
	Username *string `json:"username,omitempty"`
}

// IfMatchETag defines model for IfMatchETag.
type IfMatchETag = string

// PaginationToken defines model for PaginationToken.
type PaginationToken = string

// QueryLimit defines model for QueryLimit.
type QueryLimit = int

// ResourceID defines model for ResourceID.
type ResourceID = string

// ResourceIDOrExternalID defines model for ResourceIDOrExternalID.
type ResourceIDOrExternalID = string

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// NoContent defines model for NoContent.
type NoContent = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// GetV2CounterpartiesParams defines parameters for GetV2Counterparties.
type GetV2CounterpartiesParams struct {
	// Query Free text search query term for counterparty name, account identifiers and external metadata. Must be at least 3 characters.
	Query       *string   `form:"query,omitempty" json:"query,omitempty"`
	EntityIdsIn *[]string `form:"entityIdsIn,omitempty" json:"entityIdsIn,omitempty"`

	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// PatchV2CounterpartiesIdParams defines parameters for PatchV2CounterpartiesId.
type PatchV2CounterpartiesIdParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// PostV2CreditTransferBatchesIdApproveParams defines parameters for PostV2CreditTransferBatchesIdApprove.
type PostV2CreditTransferBatchesIdApproveParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// PostV2CreditTransferBatchesIdRejectParams defines parameters for PostV2CreditTransferBatchesIdReject.
type PostV2CreditTransferBatchesIdRejectParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// GetV2CreditTransfersParams defines parameters for GetV2CreditTransfers.
type GetV2CreditTransfersParams struct {
	// AccountId Include only credit transfers for the given source account.
	AccountId *string `form:"accountId,omitempty" json:"accountId,omitempty"`

	// Status Include only credit transfers with the given status.
	Status *GetV2CreditTransfersParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Date Include only credit transfers with property `date` matching the given value. The parameter value may be either a string for equality matching, or an object for range-like matching criteria.
	Date *struct {
		union json.RawMessage
	} `json:"date,omitempty"`

	// BatchId Include only credit transfers that are part of the payment batch with the given batch ID.
	BatchId *string `form:"batchId,omitempty" json:"batchId,omitempty"`

	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// GetV2CreditTransfersParamsStatus defines parameters for GetV2CreditTransfers.
type GetV2CreditTransfersParamsStatus string

// GetV2CreditTransfersParamsDate0 defines parameters for GetV2CreditTransfers.
type GetV2CreditTransfersParamsDate0 = openapi_types.Date

// GetV2CreditTransfersParamsDate1 defines parameters for GetV2CreditTransfers.
type GetV2CreditTransfersParamsDate1 struct {
	// Eq Include only credit transfers with `date` equal to given date.
	Eq *openapi_types.Date `json:"eq,omitempty"`

	// Gte Include only credit transfers with `date` after or equal to given date.
	Gte *openapi_types.Date `json:"gte,omitempty"`

	// Lte Include only credit transfers with `date` before or equal to given date.
	Lte *openapi_types.Date `json:"lte,omitempty"`
}

// PatchV2CreditTransfersIdParams defines parameters for PatchV2CreditTransfersId.
type PatchV2CreditTransfersIdParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// GetV2CreditTransfersIdEventsParams defines parameters for GetV2CreditTransfersIdEvents.
type GetV2CreditTransfersIdEventsParams struct {
	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// PostV2CreditTransfersIdApproveParams defines parameters for PostV2CreditTransfersIdApprove.
type PostV2CreditTransfersIdApproveParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// PostV2CreditTransfersIdRejectParams defines parameters for PostV2CreditTransfersIdReject.
type PostV2CreditTransfersIdRejectParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// GetV2DirectDebitsParams defines parameters for GetV2DirectDebits.
type GetV2DirectDebitsParams struct {
	// AccountId Include only direct debits for the given destination account.
	AccountId *string `form:"accountId,omitempty" json:"accountId,omitempty"`

	// Status Include only direct debits with the given status.
	Status *PaymentStatus `form:"status,omitempty" json:"status,omitempty"`

	// Date Include only direct debits with property `date` matching the given value. The parameter value may be either a string for equality matching, or an object for range-like matching criteria.
	Date *struct {
		union json.RawMessage
	} `json:"date,omitempty"`

	// Scheme Include only direct debits with the given direct debit scheme.
	Scheme *DirectDebitSchemeType `form:"scheme,omitempty" json:"scheme,omitempty"`

	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// GetV2DirectDebitsParamsDate0 defines parameters for GetV2DirectDebits.
type GetV2DirectDebitsParamsDate0 = openapi_types.Date

// GetV2DirectDebitsParamsDate1 defines parameters for GetV2DirectDebits.
type GetV2DirectDebitsParamsDate1 struct {
	// Eq Include only direct debits with `date` equal to given date.
	Eq *openapi_types.Date `json:"eq,omitempty"`

	// Gte Include only direct debits with `date` after or equal to given date.
	Gte *openapi_types.Date `json:"gte,omitempty"`

	// Lte Include only direct debits with `date` before or equal to given date.
	Lte *openapi_types.Date `json:"lte,omitempty"`
}

// GetV2DirectDebitsIdEventsParams defines parameters for GetV2DirectDebitsIdEvents.
type GetV2DirectDebitsIdEventsParams struct {
	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// PostV2DirectDebitsIdApproveParams defines parameters for PostV2DirectDebitsIdApprove.
type PostV2DirectDebitsIdApproveParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// PostV2DirectDebitsIdRejectParams defines parameters for PostV2DirectDebitsIdReject.
type PostV2DirectDebitsIdRejectParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// GetV2ExternalAccountsParams defines parameters for GetV2ExternalAccounts.
type GetV2ExternalAccountsParams struct {
	// Query Free text search of external account identifiers.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// CounterpartyId The ID of a counterparty.
	CounterpartyId *string   `form:"counterpartyId,omitempty" json:"counterpartyId,omitempty"`
	EntityIdsIn    *[]string `form:"entityIdsIn,omitempty" json:"entityIdsIn,omitempty"`

	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// PatchV2ExternalAccountsIdParams defines parameters for PatchV2ExternalAccountsId.
type PatchV2ExternalAccountsIdParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// GetV2MandatesParams defines parameters for GetV2Mandates.
type GetV2MandatesParams struct {
	// ExternalAccountId Include only mandates associated with the given external account.
	ExternalAccountId *string `form:"externalAccountId,omitempty" json:"externalAccountId,omitempty"`

	// CounterpartyId Include only mandates associated with the given counterparty.
	CounterpartyId *string `form:"counterpartyId,omitempty" json:"counterpartyId,omitempty"`

	// Status Include only mandates with the given status.
	Status *MandateStatus `form:"status,omitempty" json:"status,omitempty"`

	// Scheme Include only mandates with the payment scheme.
	Scheme *DirectDebitSchemeType `form:"scheme,omitempty" json:"scheme,omitempty"`

	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// GetV2MandatesIdEventsParams defines parameters for GetV2MandatesIdEvents.
type GetV2MandatesIdEventsParams struct {
	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// PostV2MandatesIdCancelParams defines parameters for PostV2MandatesIdCancel.
type PostV2MandatesIdCancelParams struct {
	// IfMatch ETag (version) of resource to be updated.
	IfMatch *IfMatchETag `json:"If-Match,omitempty"`
}

// GetV2betaCreditTransferBatchesParams defines parameters for GetV2betaCreditTransferBatches.
type GetV2betaCreditTransferBatchesParams struct {
	// Limit Limit the number of items in resulting query response.
	Limit *QueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Token If a query response contains a non-empty `nextToken`, use that value as `token` query parameter to continue pagination.
	Token *PaginationToken `form:"token,omitempty" json:"token,omitempty"`
}

// PostV2betaCreditTransferBatchesMultipartBody defines parameters for PostV2betaCreditTransferBatches.
type PostV2betaCreditTransferBatchesMultipartBody struct {
	File            openapi_types.File             `json:"file"`
	FileContentType CreditTransferBatchContentType `json:"fileContentType"`
	Treatment       BatchTreatmentType             `json:"treatment"`
}

// GetV2betaCreditTransferBatchesIdResultsParams defines parameters for GetV2betaCreditTransferBatchesIdResults.
type GetV2betaCreditTransferBatchesIdResultsParams struct {
	// Errors Filter based on presence of `errors`. If `true`, only
	// results with at least one error will be included. If `false`, only
	// results with no errors will be included.
	Errors *bool `form:"errors,omitempty" json:"errors,omitempty"`

	// Skipped Filter based on `skipped`. If `true`, only results related
	// to input record that were skipped will be included. If
	// `false`, only results that are not related to skipped
	// input records will be included.
	Skipped *bool `form:"skipped,omitempty" json:"skipped,omitempty"`
}

// PostV2CounterpartiesJSONRequestBody defines body for PostV2Counterparties for application/json ContentType.
type PostV2CounterpartiesJSONRequestBody = CreateCounterpartyRequest

// PatchV2CounterpartiesIdApplicationJSONPatchPlusJSONRequestBody defines body for PatchV2CounterpartiesId for application/json-patch+json ContentType.
type PatchV2CounterpartiesIdApplicationJSONPatchPlusJSONRequestBody = CounterpartyJSONPatchRequest

// PostV2CreditTransferBatchesIdApproveJSONRequestBody defines body for PostV2CreditTransferBatchesIdApprove for application/json ContentType.
type PostV2CreditTransferBatchesIdApproveJSONRequestBody = ApproveBatchRequest

// PostV2CreditTransferBatchesIdRejectJSONRequestBody defines body for PostV2CreditTransferBatchesIdReject for application/json ContentType.
type PostV2CreditTransferBatchesIdRejectJSONRequestBody = RejectPaymentRequest

// PostV2CreditTransfersJSONRequestBody defines body for PostV2CreditTransfers for application/json ContentType.
type PostV2CreditTransfersJSONRequestBody = CreateCreditTransferRequest

// PatchV2CreditTransfersIdApplicationJSONPatchPlusJSONRequestBody defines body for PatchV2CreditTransfersId for application/json-patch+json ContentType.
type PatchV2CreditTransfersIdApplicationJSONPatchPlusJSONRequestBody = CreditTransferJSONPatchRequest

// PostV2CreditTransfersIdApproveJSONRequestBody defines body for PostV2CreditTransfersIdApprove for application/json ContentType.
type PostV2CreditTransfersIdApproveJSONRequestBody = ApprovePaymentRequest

// PostV2CreditTransfersIdRejectJSONRequestBody defines body for PostV2CreditTransfersIdReject for application/json ContentType.
type PostV2CreditTransfersIdRejectJSONRequestBody = RejectPaymentRequest

// PostV2DirectDebitsJSONRequestBody defines body for PostV2DirectDebits for application/json ContentType.
type PostV2DirectDebitsJSONRequestBody = CreateDirectDebitRequest

// PostV2DirectDebitsIdApproveJSONRequestBody defines body for PostV2DirectDebitsIdApprove for application/json ContentType.
type PostV2DirectDebitsIdApproveJSONRequestBody = ApprovePaymentRequest

// PostV2DirectDebitsIdRejectJSONRequestBody defines body for PostV2DirectDebitsIdReject for application/json ContentType.
type PostV2DirectDebitsIdRejectJSONRequestBody = RejectPaymentRequest

// PostV2ExternalAccountsJSONRequestBody defines body for PostV2ExternalAccounts for application/json ContentType.
type PostV2ExternalAccountsJSONRequestBody = CreateExternalAccountRequest

// PatchV2ExternalAccountsIdApplicationJSONPatchPlusJSONRequestBody defines body for PatchV2ExternalAccountsId for application/json-patch+json ContentType.
type PatchV2ExternalAccountsIdApplicationJSONPatchPlusJSONRequestBody = ExternalAccountJSONPatchRequest

// PostV2MandatesJSONRequestBody defines body for PostV2Mandates for application/json ContentType.
type PostV2MandatesJSONRequestBody = CreateMandateRequest

// PostV2betaCreditTransferBatchesJSONRequestBody defines body for PostV2betaCreditTransferBatches for application/json ContentType.
type PostV2betaCreditTransferBatchesJSONRequestBody = CreateCreditTransferBatchRequest

// PostV2betaCreditTransferBatchesMultipartRequestBody defines body for PostV2betaCreditTransferBatches for multipart/form-data ContentType.
type PostV2betaCreditTransferBatchesMultipartRequestBody PostV2betaCreditTransferBatchesMultipartBody

// AsAmountIntegerValueInput returns the union data inside the AmountInput as a AmountIntegerValueInput
func (t AmountInput) AsAmountIntegerValueInput() (AmountIntegerValueInput, error) {
	var body AmountIntegerValueInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmountIntegerValueInput overwrites any union data inside the AmountInput as the provided AmountIntegerValueInput
func (t *AmountInput) FromAmountIntegerValueInput(v AmountIntegerValueInput) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmountIntegerValueInput performs a merge with any union data inside the AmountInput, using the provided AmountIntegerValueInput
func (t *AmountInput) MergeAmountIntegerValueInput(v AmountIntegerValueInput) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmountStringValueInput returns the union data inside the AmountInput as a AmountStringValueInput
func (t AmountInput) AsAmountStringValueInput() (AmountStringValueInput, error) {
	var body AmountStringValueInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmountStringValueInput overwrites any union data inside the AmountInput as the provided AmountStringValueInput
func (t *AmountInput) FromAmountStringValueInput(v AmountStringValueInput) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmountStringValueInput performs a merge with any union data inside the AmountInput, using the provided AmountStringValueInput
func (t *AmountInput) MergeAmountStringValueInput(v AmountStringValueInput) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AmountInput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AmountInput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCounterpartyJSONPatchReplaceLegalName returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchReplaceLegalName
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchReplaceLegalName() (CounterpartyJSONPatchReplaceLegalName, error) {
	var body CounterpartyJSONPatchReplaceLegalName
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchReplaceLegalName overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchReplaceLegalName
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchReplaceLegalName(v CounterpartyJSONPatchReplaceLegalName) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchReplaceLegalName performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchReplaceLegalName
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchReplaceLegalName(v CounterpartyJSONPatchReplaceLegalName) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchReplaceAlias returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchReplaceAlias
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchReplaceAlias() (CounterpartyJSONPatchReplaceAlias, error) {
	var body CounterpartyJSONPatchReplaceAlias
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchReplaceAlias overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchReplaceAlias
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchReplaceAlias(v CounterpartyJSONPatchReplaceAlias) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchReplaceAlias performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchReplaceAlias
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchReplaceAlias(v CounterpartyJSONPatchReplaceAlias) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchRemoveAlias returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchRemoveAlias
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchRemoveAlias() (CounterpartyJSONPatchRemoveAlias, error) {
	var body CounterpartyJSONPatchRemoveAlias
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchRemoveAlias overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchRemoveAlias
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchRemoveAlias(v CounterpartyJSONPatchRemoveAlias) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchRemoveAlias performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchRemoveAlias
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchRemoveAlias(v CounterpartyJSONPatchRemoveAlias) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchReplaceNationalIdentifier returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchReplaceNationalIdentifier
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchReplaceNationalIdentifier() (CounterpartyJSONPatchReplaceNationalIdentifier, error) {
	var body CounterpartyJSONPatchReplaceNationalIdentifier
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchReplaceNationalIdentifier overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchReplaceNationalIdentifier
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchReplaceNationalIdentifier(v CounterpartyJSONPatchReplaceNationalIdentifier) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchReplaceNationalIdentifier performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchReplaceNationalIdentifier
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchReplaceNationalIdentifier(v CounterpartyJSONPatchReplaceNationalIdentifier) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchRemoveNationalIdentifier returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchRemoveNationalIdentifier
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchRemoveNationalIdentifier() (CounterpartyJSONPatchRemoveNationalIdentifier, error) {
	var body CounterpartyJSONPatchRemoveNationalIdentifier
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchRemoveNationalIdentifier overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchRemoveNationalIdentifier
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchRemoveNationalIdentifier(v CounterpartyJSONPatchRemoveNationalIdentifier) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchRemoveNationalIdentifier performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchRemoveNationalIdentifier
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchRemoveNationalIdentifier(v CounterpartyJSONPatchRemoveNationalIdentifier) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchReplaceEmail returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchReplaceEmail
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchReplaceEmail() (CounterpartyJSONPatchReplaceEmail, error) {
	var body CounterpartyJSONPatchReplaceEmail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchReplaceEmail overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchReplaceEmail
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchReplaceEmail(v CounterpartyJSONPatchReplaceEmail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchReplaceEmail performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchReplaceEmail
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchReplaceEmail(v CounterpartyJSONPatchReplaceEmail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchRemoveEmail returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchRemoveEmail
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchRemoveEmail() (CounterpartyJSONPatchRemoveEmail, error) {
	var body CounterpartyJSONPatchRemoveEmail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchRemoveEmail overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchRemoveEmail
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchRemoveEmail(v CounterpartyJSONPatchRemoveEmail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchRemoveEmail performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchRemoveEmail
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchRemoveEmail(v CounterpartyJSONPatchRemoveEmail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchReplaceAddress returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchReplaceAddress
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchReplaceAddress() (CounterpartyJSONPatchReplaceAddress, error) {
	var body CounterpartyJSONPatchReplaceAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchReplaceAddress overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchReplaceAddress
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchReplaceAddress(v CounterpartyJSONPatchReplaceAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchReplaceAddress performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchReplaceAddress
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchReplaceAddress(v CounterpartyJSONPatchReplaceAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchReplacePhone returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchReplacePhone
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchReplacePhone() (CounterpartyJSONPatchReplacePhone, error) {
	var body CounterpartyJSONPatchReplacePhone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchReplacePhone overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchReplacePhone
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchReplacePhone(v CounterpartyJSONPatchReplacePhone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchReplacePhone performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchReplacePhone
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchReplacePhone(v CounterpartyJSONPatchReplacePhone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchRemovePhone returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchRemovePhone
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchRemovePhone() (CounterpartyJSONPatchRemovePhone, error) {
	var body CounterpartyJSONPatchRemovePhone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchRemovePhone overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchRemovePhone
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchRemovePhone(v CounterpartyJSONPatchRemovePhone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchRemovePhone performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchRemovePhone
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchRemovePhone(v CounterpartyJSONPatchRemovePhone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchReplacePartyType returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchReplacePartyType
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchReplacePartyType() (CounterpartyJSONPatchReplacePartyType, error) {
	var body CounterpartyJSONPatchReplacePartyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchReplacePartyType overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchReplacePartyType
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchReplacePartyType(v CounterpartyJSONPatchReplacePartyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchReplacePartyType performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchReplacePartyType
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchReplacePartyType(v CounterpartyJSONPatchReplacePartyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchRemovePartyType returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchRemovePartyType
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchRemovePartyType() (CounterpartyJSONPatchRemovePartyType, error) {
	var body CounterpartyJSONPatchRemovePartyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchRemovePartyType overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchRemovePartyType
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchRemovePartyType(v CounterpartyJSONPatchRemovePartyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchRemovePartyType performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchRemovePartyType
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchRemovePartyType(v CounterpartyJSONPatchRemovePartyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchReplaceEntityIds returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchReplaceEntityIds
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchReplaceEntityIds() (CounterpartyJSONPatchReplaceEntityIds, error) {
	var body CounterpartyJSONPatchReplaceEntityIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchReplaceEntityIds overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchReplaceEntityIds
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchReplaceEntityIds(v CounterpartyJSONPatchReplaceEntityIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchReplaceEntityIds performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchReplaceEntityIds
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchReplaceEntityIds(v CounterpartyJSONPatchReplaceEntityIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCounterpartyJSONPatchRemoveEntityIds returns the union data inside the CounterpartyJSONPatchRequest_Item as a CounterpartyJSONPatchRemoveEntityIds
func (t CounterpartyJSONPatchRequest_Item) AsCounterpartyJSONPatchRemoveEntityIds() (CounterpartyJSONPatchRemoveEntityIds, error) {
	var body CounterpartyJSONPatchRemoveEntityIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCounterpartyJSONPatchRemoveEntityIds overwrites any union data inside the CounterpartyJSONPatchRequest_Item as the provided CounterpartyJSONPatchRemoveEntityIds
func (t *CounterpartyJSONPatchRequest_Item) FromCounterpartyJSONPatchRemoveEntityIds(v CounterpartyJSONPatchRemoveEntityIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCounterpartyJSONPatchRemoveEntityIds performs a merge with any union data inside the CounterpartyJSONPatchRequest_Item, using the provided CounterpartyJSONPatchRemoveEntityIds
func (t *CounterpartyJSONPatchRequest_Item) MergeCounterpartyJSONPatchRemoveEntityIds(v CounterpartyJSONPatchRemoveEntityIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CounterpartyJSONPatchRequest_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CounterpartyJSONPatchRequest_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExternalAccountRef returns the union data inside the CreateDirectDebitRequest_Source as a ExternalAccountRef
func (t CreateDirectDebitRequest_Source) AsExternalAccountRef() (ExternalAccountRef, error) {
	var body ExternalAccountRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalAccountRef overwrites any union data inside the CreateDirectDebitRequest_Source as the provided ExternalAccountRef
func (t *CreateDirectDebitRequest_Source) FromExternalAccountRef(v ExternalAccountRef) error {
	v.Type = "EXTERNAL_ACCOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalAccountRef performs a merge with any union data inside the CreateDirectDebitRequest_Source, using the provided ExternalAccountRef
func (t *CreateDirectDebitRequest_Source) MergeExternalAccountRef(v ExternalAccountRef) error {
	v.Type = "EXTERNAL_ACCOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateDirectDebitRequest_Source) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateDirectDebitRequest_Source) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "EXTERNAL_ACCOUNT":
		return t.AsExternalAccountRef()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateDirectDebitRequest_Source) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateDirectDebitRequest_Source) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExternalAccountSnapshot returns the union data inside the CreditTransfer_Destination as a ExternalAccountSnapshot
func (t CreditTransfer_Destination) AsExternalAccountSnapshot() (ExternalAccountSnapshot, error) {
	var body ExternalAccountSnapshot
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalAccountSnapshot overwrites any union data inside the CreditTransfer_Destination as the provided ExternalAccountSnapshot
func (t *CreditTransfer_Destination) FromExternalAccountSnapshot(v ExternalAccountSnapshot) error {
	v.Type = "EXTERNAL_ACCOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalAccountSnapshot performs a merge with any union data inside the CreditTransfer_Destination, using the provided ExternalAccountSnapshot
func (t *CreditTransfer_Destination) MergeExternalAccountSnapshot(v ExternalAccountSnapshot) error {
	v.Type = "EXTERNAL_ACCOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountSnapshot returns the union data inside the CreditTransfer_Destination as a AccountSnapshot
func (t CreditTransfer_Destination) AsAccountSnapshot() (AccountSnapshot, error) {
	var body AccountSnapshot
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountSnapshot overwrites any union data inside the CreditTransfer_Destination as the provided AccountSnapshot
func (t *CreditTransfer_Destination) FromAccountSnapshot(v AccountSnapshot) error {
	v.Type = "ACCOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountSnapshot performs a merge with any union data inside the CreditTransfer_Destination, using the provided AccountSnapshot
func (t *CreditTransfer_Destination) MergeAccountSnapshot(v AccountSnapshot) error {
	v.Type = "ACCOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreditTransfer_Destination) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreditTransfer_Destination) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ACCOUNT":
		return t.AsAccountSnapshot()
	case "EXTERNAL_ACCOUNT":
		return t.AsExternalAccountSnapshot()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreditTransfer_Destination) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreditTransfer_Destination) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInternalAccountRef returns the union data inside the CreditTransferDestination as a InternalAccountRef
func (t CreditTransferDestination) AsInternalAccountRef() (InternalAccountRef, error) {
	var body InternalAccountRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInternalAccountRef overwrites any union data inside the CreditTransferDestination as the provided InternalAccountRef
func (t *CreditTransferDestination) FromInternalAccountRef(v InternalAccountRef) error {
	v.Type = "ACCOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInternalAccountRef performs a merge with any union data inside the CreditTransferDestination, using the provided InternalAccountRef
func (t *CreditTransferDestination) MergeInternalAccountRef(v InternalAccountRef) error {
	v.Type = "ACCOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalAccountRef returns the union data inside the CreditTransferDestination as a ExternalAccountRef
func (t CreditTransferDestination) AsExternalAccountRef() (ExternalAccountRef, error) {
	var body ExternalAccountRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalAccountRef overwrites any union data inside the CreditTransferDestination as the provided ExternalAccountRef
func (t *CreditTransferDestination) FromExternalAccountRef(v ExternalAccountRef) error {
	v.Type = "EXTERNAL_ACCOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalAccountRef performs a merge with any union data inside the CreditTransferDestination, using the provided ExternalAccountRef
func (t *CreditTransferDestination) MergeExternalAccountRef(v ExternalAccountRef) error {
	v.Type = "EXTERNAL_ACCOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineExternalAccount returns the union data inside the CreditTransferDestination as a InlineExternalAccount
func (t CreditTransferDestination) AsInlineExternalAccount() (InlineExternalAccount, error) {
	var body InlineExternalAccount
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineExternalAccount overwrites any union data inside the CreditTransferDestination as the provided InlineExternalAccount
func (t *CreditTransferDestination) FromInlineExternalAccount(v InlineExternalAccount) error {
	v.Type = "INLINE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineExternalAccount performs a merge with any union data inside the CreditTransferDestination, using the provided InlineExternalAccount
func (t *CreditTransferDestination) MergeInlineExternalAccount(v InlineExternalAccount) error {
	v.Type = "INLINE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreditTransferDestination) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreditTransferDestination) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ACCOUNT":
		return t.AsInternalAccountRef()
	case "EXTERNAL_ACCOUNT":
		return t.AsExternalAccountRef()
	case "INLINE":
		return t.AsInlineExternalAccount()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreditTransferDestination) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreditTransferDestination) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreditTransferJSONPatchReplaceDate returns the union data inside the CreditTransferJSONPatchRequest_Item as a CreditTransferJSONPatchReplaceDate
func (t CreditTransferJSONPatchRequest_Item) AsCreditTransferJSONPatchReplaceDate() (CreditTransferJSONPatchReplaceDate, error) {
	var body CreditTransferJSONPatchReplaceDate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreditTransferJSONPatchReplaceDate overwrites any union data inside the CreditTransferJSONPatchRequest_Item as the provided CreditTransferJSONPatchReplaceDate
func (t *CreditTransferJSONPatchRequest_Item) FromCreditTransferJSONPatchReplaceDate(v CreditTransferJSONPatchReplaceDate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreditTransferJSONPatchReplaceDate performs a merge with any union data inside the CreditTransferJSONPatchRequest_Item, using the provided CreditTransferJSONPatchReplaceDate
func (t *CreditTransferJSONPatchRequest_Item) MergeCreditTransferJSONPatchReplaceDate(v CreditTransferJSONPatchReplaceDate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreditTransferJSONPatchReplaceStatus returns the union data inside the CreditTransferJSONPatchRequest_Item as a CreditTransferJSONPatchReplaceStatus
func (t CreditTransferJSONPatchRequest_Item) AsCreditTransferJSONPatchReplaceStatus() (CreditTransferJSONPatchReplaceStatus, error) {
	var body CreditTransferJSONPatchReplaceStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreditTransferJSONPatchReplaceStatus overwrites any union data inside the CreditTransferJSONPatchRequest_Item as the provided CreditTransferJSONPatchReplaceStatus
func (t *CreditTransferJSONPatchRequest_Item) FromCreditTransferJSONPatchReplaceStatus(v CreditTransferJSONPatchReplaceStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreditTransferJSONPatchReplaceStatus performs a merge with any union data inside the CreditTransferJSONPatchRequest_Item, using the provided CreditTransferJSONPatchReplaceStatus
func (t *CreditTransferJSONPatchRequest_Item) MergeCreditTransferJSONPatchReplaceStatus(v CreditTransferJSONPatchReplaceStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreditTransferJSONPatchRequest_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreditTransferJSONPatchRequest_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExternalAccountJSONPatchRemoveAlias returns the union data inside the ExternalAccountJSONPatchRequest_Item as a ExternalAccountJSONPatchRemoveAlias
func (t ExternalAccountJSONPatchRequest_Item) AsExternalAccountJSONPatchRemoveAlias() (ExternalAccountJSONPatchRemoveAlias, error) {
	var body ExternalAccountJSONPatchRemoveAlias
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalAccountJSONPatchRemoveAlias overwrites any union data inside the ExternalAccountJSONPatchRequest_Item as the provided ExternalAccountJSONPatchRemoveAlias
func (t *ExternalAccountJSONPatchRequest_Item) FromExternalAccountJSONPatchRemoveAlias(v ExternalAccountJSONPatchRemoveAlias) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalAccountJSONPatchRemoveAlias performs a merge with any union data inside the ExternalAccountJSONPatchRequest_Item, using the provided ExternalAccountJSONPatchRemoveAlias
func (t *ExternalAccountJSONPatchRequest_Item) MergeExternalAccountJSONPatchRemoveAlias(v ExternalAccountJSONPatchRemoveAlias) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalAccountJSONPatchReplaceAlias returns the union data inside the ExternalAccountJSONPatchRequest_Item as a ExternalAccountJSONPatchReplaceAlias
func (t ExternalAccountJSONPatchRequest_Item) AsExternalAccountJSONPatchReplaceAlias() (ExternalAccountJSONPatchReplaceAlias, error) {
	var body ExternalAccountJSONPatchReplaceAlias
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalAccountJSONPatchReplaceAlias overwrites any union data inside the ExternalAccountJSONPatchRequest_Item as the provided ExternalAccountJSONPatchReplaceAlias
func (t *ExternalAccountJSONPatchRequest_Item) FromExternalAccountJSONPatchReplaceAlias(v ExternalAccountJSONPatchReplaceAlias) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalAccountJSONPatchReplaceAlias performs a merge with any union data inside the ExternalAccountJSONPatchRequest_Item, using the provided ExternalAccountJSONPatchReplaceAlias
func (t *ExternalAccountJSONPatchRequest_Item) MergeExternalAccountJSONPatchReplaceAlias(v ExternalAccountJSONPatchReplaceAlias) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalAccountJSONPatchAddIdentifiers returns the union data inside the ExternalAccountJSONPatchRequest_Item as a ExternalAccountJSONPatchAddIdentifiers
func (t ExternalAccountJSONPatchRequest_Item) AsExternalAccountJSONPatchAddIdentifiers() (ExternalAccountJSONPatchAddIdentifiers, error) {
	var body ExternalAccountJSONPatchAddIdentifiers
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalAccountJSONPatchAddIdentifiers overwrites any union data inside the ExternalAccountJSONPatchRequest_Item as the provided ExternalAccountJSONPatchAddIdentifiers
func (t *ExternalAccountJSONPatchRequest_Item) FromExternalAccountJSONPatchAddIdentifiers(v ExternalAccountJSONPatchAddIdentifiers) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalAccountJSONPatchAddIdentifiers performs a merge with any union data inside the ExternalAccountJSONPatchRequest_Item, using the provided ExternalAccountJSONPatchAddIdentifiers
func (t *ExternalAccountJSONPatchRequest_Item) MergeExternalAccountJSONPatchAddIdentifiers(v ExternalAccountJSONPatchAddIdentifiers) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalAccountJSONPatchAddRouting returns the union data inside the ExternalAccountJSONPatchRequest_Item as a ExternalAccountJSONPatchAddRouting
func (t ExternalAccountJSONPatchRequest_Item) AsExternalAccountJSONPatchAddRouting() (ExternalAccountJSONPatchAddRouting, error) {
	var body ExternalAccountJSONPatchAddRouting
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalAccountJSONPatchAddRouting overwrites any union data inside the ExternalAccountJSONPatchRequest_Item as the provided ExternalAccountJSONPatchAddRouting
func (t *ExternalAccountJSONPatchRequest_Item) FromExternalAccountJSONPatchAddRouting(v ExternalAccountJSONPatchAddRouting) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalAccountJSONPatchAddRouting performs a merge with any union data inside the ExternalAccountJSONPatchRequest_Item, using the provided ExternalAccountJSONPatchAddRouting
func (t *ExternalAccountJSONPatchRequest_Item) MergeExternalAccountJSONPatchAddRouting(v ExternalAccountJSONPatchAddRouting) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExternalAccountJSONPatchRequest_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExternalAccountJSONPatchRequest_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCitiWorldlinkInstrument returns the union data inside the Instrument as a CitiWorldlinkInstrument
func (t Instrument) AsCitiWorldlinkInstrument() (CitiWorldlinkInstrument, error) {
	var body CitiWorldlinkInstrument
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCitiWorldlinkInstrument overwrites any union data inside the Instrument as the provided CitiWorldlinkInstrument
func (t *Instrument) FromCitiWorldlinkInstrument(v CitiWorldlinkInstrument) error {
	v.Type = "CITI_WORLDLINK"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCitiWorldlinkInstrument performs a merge with any union data inside the Instrument, using the provided CitiWorldlinkInstrument
func (t *Instrument) MergeCitiWorldlinkInstrument(v CitiWorldlinkInstrument) error {
	v.Type = "CITI_WORLDLINK"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUSACHInstrument returns the union data inside the Instrument as a USACHInstrument
func (t Instrument) AsUSACHInstrument() (USACHInstrument, error) {
	var body USACHInstrument
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUSACHInstrument overwrites any union data inside the Instrument as the provided USACHInstrument
func (t *Instrument) FromUSACHInstrument(v USACHInstrument) error {
	v.Type = "US_ACH"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUSACHInstrument performs a merge with any union data inside the Instrument, using the provided USACHInstrument
func (t *Instrument) MergeUSACHInstrument(v USACHInstrument) error {
	v.Type = "US_ACH"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Instrument) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Instrument) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CITI_WORLDLINK":
		return t.AsCitiWorldlinkInstrument()
	case "US_ACH":
		return t.AsUSACHInstrument()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Instrument) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Instrument) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCitiWorldlinkInstrumentInput returns the union data inside the InstrumentInput as a CitiWorldlinkInstrumentInput
func (t InstrumentInput) AsCitiWorldlinkInstrumentInput() (CitiWorldlinkInstrumentInput, error) {
	var body CitiWorldlinkInstrumentInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCitiWorldlinkInstrumentInput overwrites any union data inside the InstrumentInput as the provided CitiWorldlinkInstrumentInput
func (t *InstrumentInput) FromCitiWorldlinkInstrumentInput(v CitiWorldlinkInstrumentInput) error {
	v.Type = "CITI_WORLDLINK"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCitiWorldlinkInstrumentInput performs a merge with any union data inside the InstrumentInput, using the provided CitiWorldlinkInstrumentInput
func (t *InstrumentInput) MergeCitiWorldlinkInstrumentInput(v CitiWorldlinkInstrumentInput) error {
	v.Type = "CITI_WORLDLINK"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstrumentInput) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t InstrumentInput) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CITI_WORLDLINK":
		return t.AsCitiWorldlinkInstrumentInput()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t InstrumentInput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InstrumentInput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV2Counterparties request
	GetV2Counterparties(ctx context.Context, params *GetV2CounterpartiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2CounterpartiesWithBody request with any body
	PostV2CounterpartiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2Counterparties(ctx context.Context, body PostV2CounterpartiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2CounterpartiesId request
	DeleteV2CounterpartiesId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CounterpartiesId request
	GetV2CounterpartiesId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2CounterpartiesIdWithBody request with any body
	PatchV2CounterpartiesIdWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2CounterpartiesIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, body PatchV2CounterpartiesIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2CreditTransferBatchesIdApproveWithBody request with any body
	PostV2CreditTransferBatchesIdApproveWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2CreditTransferBatchesIdApprove(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, body PostV2CreditTransferBatchesIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2CreditTransferBatchesIdRejectWithBody request with any body
	PostV2CreditTransferBatchesIdRejectWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2CreditTransferBatchesIdReject(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, body PostV2CreditTransferBatchesIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CreditTransfers request
	GetV2CreditTransfers(ctx context.Context, params *GetV2CreditTransfersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2CreditTransfersWithBody request with any body
	PostV2CreditTransfersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2CreditTransfers(ctx context.Context, body PostV2CreditTransfersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CreditTransfersId request
	GetV2CreditTransfersId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2CreditTransfersIdWithBody request with any body
	PatchV2CreditTransfersIdWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2CreditTransfersIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, body PatchV2CreditTransfersIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CreditTransfersIdEvents request
	GetV2CreditTransfersIdEvents(ctx context.Context, id ResourceID, params *GetV2CreditTransfersIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2CreditTransfersIdApproveWithBody request with any body
	PostV2CreditTransfersIdApproveWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2CreditTransfersIdApprove(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, body PostV2CreditTransfersIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2CreditTransfersIdRejectWithBody request with any body
	PostV2CreditTransfersIdRejectWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2CreditTransfersIdReject(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, body PostV2CreditTransfersIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DirectDebits request
	GetV2DirectDebits(ctx context.Context, params *GetV2DirectDebitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2DirectDebitsWithBody request with any body
	PostV2DirectDebitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2DirectDebits(ctx context.Context, body PostV2DirectDebitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DirectDebitsId request
	GetV2DirectDebitsId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2DirectDebitsIdEvents request
	GetV2DirectDebitsIdEvents(ctx context.Context, id ResourceID, params *GetV2DirectDebitsIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2DirectDebitsIdApproveWithBody request with any body
	PostV2DirectDebitsIdApproveWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2DirectDebitsIdApprove(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, body PostV2DirectDebitsIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2DirectDebitsIdRejectWithBody request with any body
	PostV2DirectDebitsIdRejectWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2DirectDebitsIdReject(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, body PostV2DirectDebitsIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ExternalAccounts request
	GetV2ExternalAccounts(ctx context.Context, params *GetV2ExternalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2ExternalAccountsWithBody request with any body
	PostV2ExternalAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2ExternalAccounts(ctx context.Context, body PostV2ExternalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2ExternalAccountsId request
	DeleteV2ExternalAccountsId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ExternalAccountsId request
	GetV2ExternalAccountsId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2ExternalAccountsIdWithBody request with any body
	PatchV2ExternalAccountsIdWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2ExternalAccountsIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, body PatchV2ExternalAccountsIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Mandates request
	GetV2Mandates(ctx context.Context, params *GetV2MandatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2MandatesWithBody request with any body
	PostV2MandatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2Mandates(ctx context.Context, body PostV2MandatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MandatesId request
	GetV2MandatesId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MandatesIdEvents request
	GetV2MandatesIdEvents(ctx context.Context, id ResourceID, params *GetV2MandatesIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2MandatesIdCancel request
	PostV2MandatesIdCancel(ctx context.Context, id ResourceIDOrExternalID, params *PostV2MandatesIdCancelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2betaCreditTransferBatches request
	GetV2betaCreditTransferBatches(ctx context.Context, params *GetV2betaCreditTransferBatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2betaCreditTransferBatchesWithBody request with any body
	PostV2betaCreditTransferBatchesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2betaCreditTransferBatches(ctx context.Context, body PostV2betaCreditTransferBatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2betaCreditTransferBatchesId request
	GetV2betaCreditTransferBatchesId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2betaCreditTransferBatchesIdResults request
	GetV2betaCreditTransferBatchesIdResults(ctx context.Context, id ResourceID, params *GetV2betaCreditTransferBatchesIdResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV2Counterparties(ctx context.Context, params *GetV2CounterpartiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CounterpartiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CounterpartiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CounterpartiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2Counterparties(ctx context.Context, body PostV2CounterpartiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CounterpartiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2CounterpartiesId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2CounterpartiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CounterpartiesId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CounterpartiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2CounterpartiesIdWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2CounterpartiesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2CounterpartiesIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, body PatchV2CounterpartiesIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2CounterpartiesIdRequestWithApplicationJSONPatchPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransferBatchesIdApproveWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransferBatchesIdApproveRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransferBatchesIdApprove(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, body PostV2CreditTransferBatchesIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransferBatchesIdApproveRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransferBatchesIdRejectWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransferBatchesIdRejectRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransferBatchesIdReject(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, body PostV2CreditTransferBatchesIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransferBatchesIdRejectRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CreditTransfers(ctx context.Context, params *GetV2CreditTransfersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CreditTransfersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransfersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransfersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransfers(ctx context.Context, body PostV2CreditTransfersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransfersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CreditTransfersId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CreditTransfersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2CreditTransfersIdWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2CreditTransfersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2CreditTransfersIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, body PatchV2CreditTransfersIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2CreditTransfersIdRequestWithApplicationJSONPatchPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CreditTransfersIdEvents(ctx context.Context, id ResourceID, params *GetV2CreditTransfersIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CreditTransfersIdEventsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransfersIdApproveWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransfersIdApproveRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransfersIdApprove(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, body PostV2CreditTransfersIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransfersIdApproveRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransfersIdRejectWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransfersIdRejectRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CreditTransfersIdReject(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, body PostV2CreditTransfersIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CreditTransfersIdRejectRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DirectDebits(ctx context.Context, params *GetV2DirectDebitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DirectDebitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DirectDebitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DirectDebitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DirectDebits(ctx context.Context, body PostV2DirectDebitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DirectDebitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DirectDebitsId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DirectDebitsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2DirectDebitsIdEvents(ctx context.Context, id ResourceID, params *GetV2DirectDebitsIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2DirectDebitsIdEventsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DirectDebitsIdApproveWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DirectDebitsIdApproveRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DirectDebitsIdApprove(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, body PostV2DirectDebitsIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DirectDebitsIdApproveRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DirectDebitsIdRejectWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DirectDebitsIdRejectRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2DirectDebitsIdReject(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, body PostV2DirectDebitsIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2DirectDebitsIdRejectRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ExternalAccounts(ctx context.Context, params *GetV2ExternalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ExternalAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ExternalAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ExternalAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ExternalAccounts(ctx context.Context, body PostV2ExternalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ExternalAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2ExternalAccountsId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2ExternalAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ExternalAccountsId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ExternalAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2ExternalAccountsIdWithBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2ExternalAccountsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2ExternalAccountsIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, body PatchV2ExternalAccountsIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2ExternalAccountsIdRequestWithApplicationJSONPatchPlusJSONBody(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Mandates(ctx context.Context, params *GetV2MandatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MandatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MandatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MandatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2Mandates(ctx context.Context, body PostV2MandatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MandatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MandatesId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MandatesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MandatesIdEvents(ctx context.Context, id ResourceID, params *GetV2MandatesIdEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MandatesIdEventsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MandatesIdCancel(ctx context.Context, id ResourceIDOrExternalID, params *PostV2MandatesIdCancelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MandatesIdCancelRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2betaCreditTransferBatches(ctx context.Context, params *GetV2betaCreditTransferBatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2betaCreditTransferBatchesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2betaCreditTransferBatchesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2betaCreditTransferBatchesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2betaCreditTransferBatches(ctx context.Context, body PostV2betaCreditTransferBatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2betaCreditTransferBatchesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2betaCreditTransferBatchesId(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2betaCreditTransferBatchesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2betaCreditTransferBatchesIdResults(ctx context.Context, id ResourceID, params *GetV2betaCreditTransferBatchesIdResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2betaCreditTransferBatchesIdResultsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV2CounterpartiesRequest generates requests for GetV2Counterparties
func NewGetV2CounterpartiesRequest(server string, params *GetV2CounterpartiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/counterparties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntityIdsIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityIdsIn", runtime.ParamLocationQuery, *params.EntityIdsIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2CounterpartiesRequest calls the generic PostV2Counterparties builder with application/json body
func NewPostV2CounterpartiesRequest(server string, body PostV2CounterpartiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2CounterpartiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2CounterpartiesRequestWithBody generates requests for PostV2Counterparties with any type of body
func NewPostV2CounterpartiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/counterparties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2CounterpartiesIdRequest generates requests for DeleteV2CounterpartiesId
func NewDeleteV2CounterpartiesIdRequest(server string, id ResourceIDOrExternalID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/counterparties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CounterpartiesIdRequest generates requests for GetV2CounterpartiesId
func NewGetV2CounterpartiesIdRequest(server string, id ResourceIDOrExternalID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/counterparties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV2CounterpartiesIdRequestWithApplicationJSONPatchPlusJSONBody calls the generic PatchV2CounterpartiesId builder with application/json-patch+json body
func NewPatchV2CounterpartiesIdRequestWithApplicationJSONPatchPlusJSONBody(server string, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, body PatchV2CounterpartiesIdApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2CounterpartiesIdRequestWithBody(server, id, params, "application/json-patch+json", bodyReader)
}

// NewPatchV2CounterpartiesIdRequestWithBody generates requests for PatchV2CounterpartiesId with any type of body
func NewPatchV2CounterpartiesIdRequestWithBody(server string, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/counterparties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewPostV2CreditTransferBatchesIdApproveRequest calls the generic PostV2CreditTransferBatchesIdApprove builder with application/json body
func NewPostV2CreditTransferBatchesIdApproveRequest(server string, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, body PostV2CreditTransferBatchesIdApproveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2CreditTransferBatchesIdApproveRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostV2CreditTransferBatchesIdApproveRequestWithBody generates requests for PostV2CreditTransferBatchesIdApprove with any type of body
func NewPostV2CreditTransferBatchesIdApproveRequestWithBody(server string, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfer-batches/%s:approve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewPostV2CreditTransferBatchesIdRejectRequest calls the generic PostV2CreditTransferBatchesIdReject builder with application/json body
func NewPostV2CreditTransferBatchesIdRejectRequest(server string, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, body PostV2CreditTransferBatchesIdRejectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2CreditTransferBatchesIdRejectRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostV2CreditTransferBatchesIdRejectRequestWithBody generates requests for PostV2CreditTransferBatchesIdReject with any type of body
func NewPostV2CreditTransferBatchesIdRejectRequestWithBody(server string, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfer-batches/%s:reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2CreditTransfersRequest generates requests for GetV2CreditTransfers
func NewGetV2CreditTransfersRequest(server string, params *GetV2CreditTransfersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountId", runtime.ParamLocationQuery, *params.AccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BatchId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "batchId", runtime.ParamLocationQuery, *params.BatchId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2CreditTransfersRequest calls the generic PostV2CreditTransfers builder with application/json body
func NewPostV2CreditTransfersRequest(server string, body PostV2CreditTransfersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2CreditTransfersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2CreditTransfersRequestWithBody generates requests for PostV2CreditTransfers with any type of body
func NewPostV2CreditTransfersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2CreditTransfersIdRequest generates requests for GetV2CreditTransfersId
func NewGetV2CreditTransfersIdRequest(server string, id ResourceIDOrExternalID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV2CreditTransfersIdRequestWithApplicationJSONPatchPlusJSONBody calls the generic PatchV2CreditTransfersId builder with application/json-patch+json body
func NewPatchV2CreditTransfersIdRequestWithApplicationJSONPatchPlusJSONBody(server string, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, body PatchV2CreditTransfersIdApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2CreditTransfersIdRequestWithBody(server, id, params, "application/json-patch+json", bodyReader)
}

// NewPatchV2CreditTransfersIdRequestWithBody generates requests for PatchV2CreditTransfersId with any type of body
func NewPatchV2CreditTransfersIdRequestWithBody(server string, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2CreditTransfersIdEventsRequest generates requests for GetV2CreditTransfersIdEvents
func NewGetV2CreditTransfersIdEventsRequest(server string, id ResourceID, params *GetV2CreditTransfersIdEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfers/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2CreditTransfersIdApproveRequest calls the generic PostV2CreditTransfersIdApprove builder with application/json body
func NewPostV2CreditTransfersIdApproveRequest(server string, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, body PostV2CreditTransfersIdApproveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2CreditTransfersIdApproveRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostV2CreditTransfersIdApproveRequestWithBody generates requests for PostV2CreditTransfersIdApprove with any type of body
func NewPostV2CreditTransfersIdApproveRequestWithBody(server string, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfers/%s:approve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewPostV2CreditTransfersIdRejectRequest calls the generic PostV2CreditTransfersIdReject builder with application/json body
func NewPostV2CreditTransfersIdRejectRequest(server string, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, body PostV2CreditTransfersIdRejectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2CreditTransfersIdRejectRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostV2CreditTransfersIdRejectRequestWithBody generates requests for PostV2CreditTransfersIdReject with any type of body
func NewPostV2CreditTransfersIdRejectRequestWithBody(server string, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/credit-transfers/%s:reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2DirectDebitsRequest generates requests for GetV2DirectDebits
func NewGetV2DirectDebitsRequest(server string, params *GetV2DirectDebitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/direct-debits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountId", runtime.ParamLocationQuery, *params.AccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scheme != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scheme", runtime.ParamLocationQuery, *params.Scheme); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2DirectDebitsRequest calls the generic PostV2DirectDebits builder with application/json body
func NewPostV2DirectDebitsRequest(server string, body PostV2DirectDebitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2DirectDebitsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2DirectDebitsRequestWithBody generates requests for PostV2DirectDebits with any type of body
func NewPostV2DirectDebitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/direct-debits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2DirectDebitsIdRequest generates requests for GetV2DirectDebitsId
func NewGetV2DirectDebitsIdRequest(server string, id ResourceIDOrExternalID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/direct-debits/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2DirectDebitsIdEventsRequest generates requests for GetV2DirectDebitsIdEvents
func NewGetV2DirectDebitsIdEventsRequest(server string, id ResourceID, params *GetV2DirectDebitsIdEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/direct-debits/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2DirectDebitsIdApproveRequest calls the generic PostV2DirectDebitsIdApprove builder with application/json body
func NewPostV2DirectDebitsIdApproveRequest(server string, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, body PostV2DirectDebitsIdApproveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2DirectDebitsIdApproveRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostV2DirectDebitsIdApproveRequestWithBody generates requests for PostV2DirectDebitsIdApprove with any type of body
func NewPostV2DirectDebitsIdApproveRequestWithBody(server string, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/direct-debits/%s:approve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewPostV2DirectDebitsIdRejectRequest calls the generic PostV2DirectDebitsIdReject builder with application/json body
func NewPostV2DirectDebitsIdRejectRequest(server string, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, body PostV2DirectDebitsIdRejectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2DirectDebitsIdRejectRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostV2DirectDebitsIdRejectRequestWithBody generates requests for PostV2DirectDebitsIdReject with any type of body
func NewPostV2DirectDebitsIdRejectRequestWithBody(server string, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/direct-debits/%s:reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2ExternalAccountsRequest generates requests for GetV2ExternalAccounts
func NewGetV2ExternalAccountsRequest(server string, params *GetV2ExternalAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/external-accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CounterpartyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "counterpartyId", runtime.ParamLocationQuery, *params.CounterpartyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntityIdsIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entityIdsIn", runtime.ParamLocationQuery, *params.EntityIdsIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2ExternalAccountsRequest calls the generic PostV2ExternalAccounts builder with application/json body
func NewPostV2ExternalAccountsRequest(server string, body PostV2ExternalAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2ExternalAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2ExternalAccountsRequestWithBody generates requests for PostV2ExternalAccounts with any type of body
func NewPostV2ExternalAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/external-accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2ExternalAccountsIdRequest generates requests for DeleteV2ExternalAccountsId
func NewDeleteV2ExternalAccountsIdRequest(server string, id ResourceIDOrExternalID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/external-accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ExternalAccountsIdRequest generates requests for GetV2ExternalAccountsId
func NewGetV2ExternalAccountsIdRequest(server string, id ResourceIDOrExternalID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/external-accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV2ExternalAccountsIdRequestWithApplicationJSONPatchPlusJSONBody calls the generic PatchV2ExternalAccountsId builder with application/json-patch+json body
func NewPatchV2ExternalAccountsIdRequestWithApplicationJSONPatchPlusJSONBody(server string, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, body PatchV2ExternalAccountsIdApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2ExternalAccountsIdRequestWithBody(server, id, params, "application/json-patch+json", bodyReader)
}

// NewPatchV2ExternalAccountsIdRequestWithBody generates requests for PatchV2ExternalAccountsId with any type of body
func NewPatchV2ExternalAccountsIdRequestWithBody(server string, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/external-accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2MandatesRequest generates requests for GetV2Mandates
func NewGetV2MandatesRequest(server string, params *GetV2MandatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mandates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExternalAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalAccountId", runtime.ParamLocationQuery, *params.ExternalAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CounterpartyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "counterpartyId", runtime.ParamLocationQuery, *params.CounterpartyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scheme != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scheme", runtime.ParamLocationQuery, *params.Scheme); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2MandatesRequest calls the generic PostV2Mandates builder with application/json body
func NewPostV2MandatesRequest(server string, body PostV2MandatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2MandatesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2MandatesRequestWithBody generates requests for PostV2Mandates with any type of body
func NewPostV2MandatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mandates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2MandatesIdRequest generates requests for GetV2MandatesId
func NewGetV2MandatesIdRequest(server string, id ResourceIDOrExternalID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mandates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2MandatesIdEventsRequest generates requests for GetV2MandatesIdEvents
func NewGetV2MandatesIdEventsRequest(server string, id ResourceID, params *GetV2MandatesIdEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mandates/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2MandatesIdCancelRequest generates requests for PostV2MandatesIdCancel
func NewPostV2MandatesIdCancelRequest(server string, id ResourceIDOrExternalID, params *PostV2MandatesIdCancelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mandates/%s:cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewGetV2betaCreditTransferBatchesRequest generates requests for GetV2betaCreditTransferBatches
func NewGetV2betaCreditTransferBatchesRequest(server string, params *GetV2betaCreditTransferBatchesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2beta/credit-transfer-batches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2betaCreditTransferBatchesRequest calls the generic PostV2betaCreditTransferBatches builder with application/json body
func NewPostV2betaCreditTransferBatchesRequest(server string, body PostV2betaCreditTransferBatchesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2betaCreditTransferBatchesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2betaCreditTransferBatchesRequestWithBody generates requests for PostV2betaCreditTransferBatches with any type of body
func NewPostV2betaCreditTransferBatchesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2beta/credit-transfer-batches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2betaCreditTransferBatchesIdRequest generates requests for GetV2betaCreditTransferBatchesId
func NewGetV2betaCreditTransferBatchesIdRequest(server string, id ResourceIDOrExternalID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2beta/credit-transfer-batches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2betaCreditTransferBatchesIdResultsRequest generates requests for GetV2betaCreditTransferBatchesIdResults
func NewGetV2betaCreditTransferBatchesIdResultsRequest(server string, id ResourceID, params *GetV2betaCreditTransferBatchesIdResultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2beta/credit-transfer-batches/%s/results", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Errors != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "errors", runtime.ParamLocationQuery, *params.Errors); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skipped != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipped", runtime.ParamLocationQuery, *params.Skipped); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV2CounterpartiesWithResponse request
	GetV2CounterpartiesWithResponse(ctx context.Context, params *GetV2CounterpartiesParams, reqEditors ...RequestEditorFn) (*GetV2CounterpartiesResponse, error)

	// PostV2CounterpartiesWithBodyWithResponse request with any body
	PostV2CounterpartiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CounterpartiesResponse, error)

	PostV2CounterpartiesWithResponse(ctx context.Context, body PostV2CounterpartiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CounterpartiesResponse, error)

	// DeleteV2CounterpartiesIdWithResponse request
	DeleteV2CounterpartiesIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*DeleteV2CounterpartiesIdResponse, error)

	// GetV2CounterpartiesIdWithResponse request
	GetV2CounterpartiesIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2CounterpartiesIdResponse, error)

	// PatchV2CounterpartiesIdWithBodyWithResponse request with any body
	PatchV2CounterpartiesIdWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2CounterpartiesIdResponse, error)

	PatchV2CounterpartiesIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, body PatchV2CounterpartiesIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2CounterpartiesIdResponse, error)

	// PostV2CreditTransferBatchesIdApproveWithBodyWithResponse request with any body
	PostV2CreditTransferBatchesIdApproveWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransferBatchesIdApproveResponse, error)

	PostV2CreditTransferBatchesIdApproveWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, body PostV2CreditTransferBatchesIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransferBatchesIdApproveResponse, error)

	// PostV2CreditTransferBatchesIdRejectWithBodyWithResponse request with any body
	PostV2CreditTransferBatchesIdRejectWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransferBatchesIdRejectResponse, error)

	PostV2CreditTransferBatchesIdRejectWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, body PostV2CreditTransferBatchesIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransferBatchesIdRejectResponse, error)

	// GetV2CreditTransfersWithResponse request
	GetV2CreditTransfersWithResponse(ctx context.Context, params *GetV2CreditTransfersParams, reqEditors ...RequestEditorFn) (*GetV2CreditTransfersResponse, error)

	// PostV2CreditTransfersWithBodyWithResponse request with any body
	PostV2CreditTransfersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersResponse, error)

	PostV2CreditTransfersWithResponse(ctx context.Context, body PostV2CreditTransfersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersResponse, error)

	// GetV2CreditTransfersIdWithResponse request
	GetV2CreditTransfersIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2CreditTransfersIdResponse, error)

	// PatchV2CreditTransfersIdWithBodyWithResponse request with any body
	PatchV2CreditTransfersIdWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2CreditTransfersIdResponse, error)

	PatchV2CreditTransfersIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, body PatchV2CreditTransfersIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2CreditTransfersIdResponse, error)

	// GetV2CreditTransfersIdEventsWithResponse request
	GetV2CreditTransfersIdEventsWithResponse(ctx context.Context, id ResourceID, params *GetV2CreditTransfersIdEventsParams, reqEditors ...RequestEditorFn) (*GetV2CreditTransfersIdEventsResponse, error)

	// PostV2CreditTransfersIdApproveWithBodyWithResponse request with any body
	PostV2CreditTransfersIdApproveWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersIdApproveResponse, error)

	PostV2CreditTransfersIdApproveWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, body PostV2CreditTransfersIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersIdApproveResponse, error)

	// PostV2CreditTransfersIdRejectWithBodyWithResponse request with any body
	PostV2CreditTransfersIdRejectWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersIdRejectResponse, error)

	PostV2CreditTransfersIdRejectWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, body PostV2CreditTransfersIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersIdRejectResponse, error)

	// GetV2DirectDebitsWithResponse request
	GetV2DirectDebitsWithResponse(ctx context.Context, params *GetV2DirectDebitsParams, reqEditors ...RequestEditorFn) (*GetV2DirectDebitsResponse, error)

	// PostV2DirectDebitsWithBodyWithResponse request with any body
	PostV2DirectDebitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsResponse, error)

	PostV2DirectDebitsWithResponse(ctx context.Context, body PostV2DirectDebitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsResponse, error)

	// GetV2DirectDebitsIdWithResponse request
	GetV2DirectDebitsIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2DirectDebitsIdResponse, error)

	// GetV2DirectDebitsIdEventsWithResponse request
	GetV2DirectDebitsIdEventsWithResponse(ctx context.Context, id ResourceID, params *GetV2DirectDebitsIdEventsParams, reqEditors ...RequestEditorFn) (*GetV2DirectDebitsIdEventsResponse, error)

	// PostV2DirectDebitsIdApproveWithBodyWithResponse request with any body
	PostV2DirectDebitsIdApproveWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsIdApproveResponse, error)

	PostV2DirectDebitsIdApproveWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, body PostV2DirectDebitsIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsIdApproveResponse, error)

	// PostV2DirectDebitsIdRejectWithBodyWithResponse request with any body
	PostV2DirectDebitsIdRejectWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsIdRejectResponse, error)

	PostV2DirectDebitsIdRejectWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, body PostV2DirectDebitsIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsIdRejectResponse, error)

	// GetV2ExternalAccountsWithResponse request
	GetV2ExternalAccountsWithResponse(ctx context.Context, params *GetV2ExternalAccountsParams, reqEditors ...RequestEditorFn) (*GetV2ExternalAccountsResponse, error)

	// PostV2ExternalAccountsWithBodyWithResponse request with any body
	PostV2ExternalAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ExternalAccountsResponse, error)

	PostV2ExternalAccountsWithResponse(ctx context.Context, body PostV2ExternalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ExternalAccountsResponse, error)

	// DeleteV2ExternalAccountsIdWithResponse request
	DeleteV2ExternalAccountsIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*DeleteV2ExternalAccountsIdResponse, error)

	// GetV2ExternalAccountsIdWithResponse request
	GetV2ExternalAccountsIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2ExternalAccountsIdResponse, error)

	// PatchV2ExternalAccountsIdWithBodyWithResponse request with any body
	PatchV2ExternalAccountsIdWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2ExternalAccountsIdResponse, error)

	PatchV2ExternalAccountsIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, body PatchV2ExternalAccountsIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2ExternalAccountsIdResponse, error)

	// GetV2MandatesWithResponse request
	GetV2MandatesWithResponse(ctx context.Context, params *GetV2MandatesParams, reqEditors ...RequestEditorFn) (*GetV2MandatesResponse, error)

	// PostV2MandatesWithBodyWithResponse request with any body
	PostV2MandatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MandatesResponse, error)

	PostV2MandatesWithResponse(ctx context.Context, body PostV2MandatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MandatesResponse, error)

	// GetV2MandatesIdWithResponse request
	GetV2MandatesIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2MandatesIdResponse, error)

	// GetV2MandatesIdEventsWithResponse request
	GetV2MandatesIdEventsWithResponse(ctx context.Context, id ResourceID, params *GetV2MandatesIdEventsParams, reqEditors ...RequestEditorFn) (*GetV2MandatesIdEventsResponse, error)

	// PostV2MandatesIdCancelWithResponse request
	PostV2MandatesIdCancelWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2MandatesIdCancelParams, reqEditors ...RequestEditorFn) (*PostV2MandatesIdCancelResponse, error)

	// GetV2betaCreditTransferBatchesWithResponse request
	GetV2betaCreditTransferBatchesWithResponse(ctx context.Context, params *GetV2betaCreditTransferBatchesParams, reqEditors ...RequestEditorFn) (*GetV2betaCreditTransferBatchesResponse, error)

	// PostV2betaCreditTransferBatchesWithBodyWithResponse request with any body
	PostV2betaCreditTransferBatchesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2betaCreditTransferBatchesResponse, error)

	PostV2betaCreditTransferBatchesWithResponse(ctx context.Context, body PostV2betaCreditTransferBatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2betaCreditTransferBatchesResponse, error)

	// GetV2betaCreditTransferBatchesIdWithResponse request
	GetV2betaCreditTransferBatchesIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2betaCreditTransferBatchesIdResponse, error)

	// GetV2betaCreditTransferBatchesIdResultsWithResponse request
	GetV2betaCreditTransferBatchesIdResultsWithResponse(ctx context.Context, id ResourceID, params *GetV2betaCreditTransferBatchesIdResultsParams, reqEditors ...RequestEditorFn) (*GetV2betaCreditTransferBatchesIdResultsResponse, error)
}

type GetV2CounterpartiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []Counterparty `json:"items"`
		Limit     int            `json:"limit"`
		NextToken string         `json:"nextToken"`
		Token     string         `json:"token"`
	}
	JSON400 *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetV2CounterpartiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CounterpartiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2CounterpartiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Counterparty
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r PostV2CounterpartiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2CounterpartiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2CounterpartiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *NoContent
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteV2CounterpartiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2CounterpartiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CounterpartiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Counterparty
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2CounterpartiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CounterpartiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2CounterpartiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Counterparty
	JSON400      *BadRequest
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PatchV2CounterpartiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2CounterpartiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2CreditTransferBatchesIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CreditTransferBatch
	JSON400      *BadRequest
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostV2CreditTransferBatchesIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2CreditTransferBatchesIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2CreditTransferBatchesIdRejectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CreditTransferBatch
	JSON400      *BadRequest
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostV2CreditTransferBatchesIdRejectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2CreditTransferBatchesIdRejectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CreditTransfersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []CreditTransfer `json:"items"`
		Limit     int              `json:"limit"`
		NextToken string           `json:"nextToken"`
		Token     string           `json:"token"`
	}
	JSON400 *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetV2CreditTransfersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CreditTransfersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2CreditTransfersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreditTransfer
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r PostV2CreditTransfersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2CreditTransfersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CreditTransfersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditTransfer
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2CreditTransfersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CreditTransfersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2CreditTransfersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CreditTransfer
	JSON400      *BadRequest
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PatchV2CreditTransfersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2CreditTransfersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CreditTransfersIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []Event `json:"items"`
		Limit     int     `json:"limit"`
		NextToken string  `json:"nextToken"`
		Token     string  `json:"token"`
	}
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2CreditTransfersIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CreditTransfersIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2CreditTransfersIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CreditTransfer
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostV2CreditTransfersIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2CreditTransfersIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2CreditTransfersIdRejectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CreditTransfer
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostV2CreditTransfersIdRejectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2CreditTransfersIdRejectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DirectDebitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []DirectDebit `json:"items"`
		Limit     int           `json:"limit"`
		NextToken string        `json:"nextToken"`
		Token     string        `json:"token"`
	}
	JSON400 *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2DirectDebitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DirectDebitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2DirectDebitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DirectDebit
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r PostV2DirectDebitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2DirectDebitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DirectDebitsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DirectDebit
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2DirectDebitsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DirectDebitsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2DirectDebitsIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []Event `json:"items"`
		Limit     int     `json:"limit"`
		NextToken string  `json:"nextToken"`
		Token     string  `json:"token"`
	}
	JSON400 *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2DirectDebitsIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2DirectDebitsIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2DirectDebitsIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *DirectDebit
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostV2DirectDebitsIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2DirectDebitsIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2DirectDebitsIdRejectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *DirectDebit
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostV2DirectDebitsIdRejectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2DirectDebitsIdRejectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ExternalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []ExternalAccount `json:"items"`
		Limit     int               `json:"limit"`
		NextToken string            `json:"nextToken"`
		Token     string            `json:"token"`
	}
	JSON400 *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetV2ExternalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ExternalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2ExternalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExternalAccount
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r PostV2ExternalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2ExternalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2ExternalAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *NoContent
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteV2ExternalAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2ExternalAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ExternalAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalAccount
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2ExternalAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ExternalAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2ExternalAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalAccount
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PatchV2ExternalAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2ExternalAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MandatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []Mandate `json:"items"`
		Limit     int       `json:"limit"`
		NextToken string    `json:"nextToken"`
		Token     string    `json:"token"`
	}
	JSON400 *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetV2MandatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MandatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2MandatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Mandate
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r PostV2MandatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2MandatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MandatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Mandate
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2MandatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MandatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MandatesIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []Event `json:"items"`
		Limit     int     `json:"limit"`
		NextToken string  `json:"nextToken"`
		Token     string  `json:"token"`
	}
	JSON400 *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2MandatesIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MandatesIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2MandatesIdCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Mandate
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PostV2MandatesIdCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2MandatesIdCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2betaCreditTransferBatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []CreditTransferBatch `json:"items"`
		Limit     int                   `json:"limit"`
		NextToken string                `json:"nextToken"`
		Token     string                `json:"token"`
	}
	JSON400 *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetV2betaCreditTransferBatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2betaCreditTransferBatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2betaCreditTransferBatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreditTransferBatch
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r PostV2betaCreditTransferBatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2betaCreditTransferBatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2betaCreditTransferBatchesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditTransferBatch
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2betaCreditTransferBatchesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2betaCreditTransferBatchesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2betaCreditTransferBatchesIdResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items     []BatchResult `json:"items"`
		Limit     int           `json:"limit"`
		NextToken string        `json:"nextToken"`
		Token     string        `json:"token"`
	}
	JSON400 *BadRequest
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2betaCreditTransferBatchesIdResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2betaCreditTransferBatchesIdResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV2CounterpartiesWithResponse request returning *GetV2CounterpartiesResponse
func (c *ClientWithResponses) GetV2CounterpartiesWithResponse(ctx context.Context, params *GetV2CounterpartiesParams, reqEditors ...RequestEditorFn) (*GetV2CounterpartiesResponse, error) {
	rsp, err := c.GetV2Counterparties(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CounterpartiesResponse(rsp)
}

// PostV2CounterpartiesWithBodyWithResponse request with arbitrary body returning *PostV2CounterpartiesResponse
func (c *ClientWithResponses) PostV2CounterpartiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CounterpartiesResponse, error) {
	rsp, err := c.PostV2CounterpartiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CounterpartiesResponse(rsp)
}

func (c *ClientWithResponses) PostV2CounterpartiesWithResponse(ctx context.Context, body PostV2CounterpartiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CounterpartiesResponse, error) {
	rsp, err := c.PostV2Counterparties(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CounterpartiesResponse(rsp)
}

// DeleteV2CounterpartiesIdWithResponse request returning *DeleteV2CounterpartiesIdResponse
func (c *ClientWithResponses) DeleteV2CounterpartiesIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*DeleteV2CounterpartiesIdResponse, error) {
	rsp, err := c.DeleteV2CounterpartiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2CounterpartiesIdResponse(rsp)
}

// GetV2CounterpartiesIdWithResponse request returning *GetV2CounterpartiesIdResponse
func (c *ClientWithResponses) GetV2CounterpartiesIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2CounterpartiesIdResponse, error) {
	rsp, err := c.GetV2CounterpartiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CounterpartiesIdResponse(rsp)
}

// PatchV2CounterpartiesIdWithBodyWithResponse request with arbitrary body returning *PatchV2CounterpartiesIdResponse
func (c *ClientWithResponses) PatchV2CounterpartiesIdWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2CounterpartiesIdResponse, error) {
	rsp, err := c.PatchV2CounterpartiesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2CounterpartiesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV2CounterpartiesIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CounterpartiesIdParams, body PatchV2CounterpartiesIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2CounterpartiesIdResponse, error) {
	rsp, err := c.PatchV2CounterpartiesIdWithApplicationJSONPatchPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2CounterpartiesIdResponse(rsp)
}

// PostV2CreditTransferBatchesIdApproveWithBodyWithResponse request with arbitrary body returning *PostV2CreditTransferBatchesIdApproveResponse
func (c *ClientWithResponses) PostV2CreditTransferBatchesIdApproveWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransferBatchesIdApproveResponse, error) {
	rsp, err := c.PostV2CreditTransferBatchesIdApproveWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransferBatchesIdApproveResponse(rsp)
}

func (c *ClientWithResponses) PostV2CreditTransferBatchesIdApproveWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdApproveParams, body PostV2CreditTransferBatchesIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransferBatchesIdApproveResponse, error) {
	rsp, err := c.PostV2CreditTransferBatchesIdApprove(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransferBatchesIdApproveResponse(rsp)
}

// PostV2CreditTransferBatchesIdRejectWithBodyWithResponse request with arbitrary body returning *PostV2CreditTransferBatchesIdRejectResponse
func (c *ClientWithResponses) PostV2CreditTransferBatchesIdRejectWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransferBatchesIdRejectResponse, error) {
	rsp, err := c.PostV2CreditTransferBatchesIdRejectWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransferBatchesIdRejectResponse(rsp)
}

func (c *ClientWithResponses) PostV2CreditTransferBatchesIdRejectWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransferBatchesIdRejectParams, body PostV2CreditTransferBatchesIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransferBatchesIdRejectResponse, error) {
	rsp, err := c.PostV2CreditTransferBatchesIdReject(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransferBatchesIdRejectResponse(rsp)
}

// GetV2CreditTransfersWithResponse request returning *GetV2CreditTransfersResponse
func (c *ClientWithResponses) GetV2CreditTransfersWithResponse(ctx context.Context, params *GetV2CreditTransfersParams, reqEditors ...RequestEditorFn) (*GetV2CreditTransfersResponse, error) {
	rsp, err := c.GetV2CreditTransfers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CreditTransfersResponse(rsp)
}

// PostV2CreditTransfersWithBodyWithResponse request with arbitrary body returning *PostV2CreditTransfersResponse
func (c *ClientWithResponses) PostV2CreditTransfersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersResponse, error) {
	rsp, err := c.PostV2CreditTransfersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransfersResponse(rsp)
}

func (c *ClientWithResponses) PostV2CreditTransfersWithResponse(ctx context.Context, body PostV2CreditTransfersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersResponse, error) {
	rsp, err := c.PostV2CreditTransfers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransfersResponse(rsp)
}

// GetV2CreditTransfersIdWithResponse request returning *GetV2CreditTransfersIdResponse
func (c *ClientWithResponses) GetV2CreditTransfersIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2CreditTransfersIdResponse, error) {
	rsp, err := c.GetV2CreditTransfersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CreditTransfersIdResponse(rsp)
}

// PatchV2CreditTransfersIdWithBodyWithResponse request with arbitrary body returning *PatchV2CreditTransfersIdResponse
func (c *ClientWithResponses) PatchV2CreditTransfersIdWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2CreditTransfersIdResponse, error) {
	rsp, err := c.PatchV2CreditTransfersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2CreditTransfersIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV2CreditTransfersIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2CreditTransfersIdParams, body PatchV2CreditTransfersIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2CreditTransfersIdResponse, error) {
	rsp, err := c.PatchV2CreditTransfersIdWithApplicationJSONPatchPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2CreditTransfersIdResponse(rsp)
}

// GetV2CreditTransfersIdEventsWithResponse request returning *GetV2CreditTransfersIdEventsResponse
func (c *ClientWithResponses) GetV2CreditTransfersIdEventsWithResponse(ctx context.Context, id ResourceID, params *GetV2CreditTransfersIdEventsParams, reqEditors ...RequestEditorFn) (*GetV2CreditTransfersIdEventsResponse, error) {
	rsp, err := c.GetV2CreditTransfersIdEvents(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CreditTransfersIdEventsResponse(rsp)
}

// PostV2CreditTransfersIdApproveWithBodyWithResponse request with arbitrary body returning *PostV2CreditTransfersIdApproveResponse
func (c *ClientWithResponses) PostV2CreditTransfersIdApproveWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersIdApproveResponse, error) {
	rsp, err := c.PostV2CreditTransfersIdApproveWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransfersIdApproveResponse(rsp)
}

func (c *ClientWithResponses) PostV2CreditTransfersIdApproveWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdApproveParams, body PostV2CreditTransfersIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersIdApproveResponse, error) {
	rsp, err := c.PostV2CreditTransfersIdApprove(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransfersIdApproveResponse(rsp)
}

// PostV2CreditTransfersIdRejectWithBodyWithResponse request with arbitrary body returning *PostV2CreditTransfersIdRejectResponse
func (c *ClientWithResponses) PostV2CreditTransfersIdRejectWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersIdRejectResponse, error) {
	rsp, err := c.PostV2CreditTransfersIdRejectWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransfersIdRejectResponse(rsp)
}

func (c *ClientWithResponses) PostV2CreditTransfersIdRejectWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2CreditTransfersIdRejectParams, body PostV2CreditTransfersIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CreditTransfersIdRejectResponse, error) {
	rsp, err := c.PostV2CreditTransfersIdReject(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CreditTransfersIdRejectResponse(rsp)
}

// GetV2DirectDebitsWithResponse request returning *GetV2DirectDebitsResponse
func (c *ClientWithResponses) GetV2DirectDebitsWithResponse(ctx context.Context, params *GetV2DirectDebitsParams, reqEditors ...RequestEditorFn) (*GetV2DirectDebitsResponse, error) {
	rsp, err := c.GetV2DirectDebits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DirectDebitsResponse(rsp)
}

// PostV2DirectDebitsWithBodyWithResponse request with arbitrary body returning *PostV2DirectDebitsResponse
func (c *ClientWithResponses) PostV2DirectDebitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsResponse, error) {
	rsp, err := c.PostV2DirectDebitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DirectDebitsResponse(rsp)
}

func (c *ClientWithResponses) PostV2DirectDebitsWithResponse(ctx context.Context, body PostV2DirectDebitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsResponse, error) {
	rsp, err := c.PostV2DirectDebits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DirectDebitsResponse(rsp)
}

// GetV2DirectDebitsIdWithResponse request returning *GetV2DirectDebitsIdResponse
func (c *ClientWithResponses) GetV2DirectDebitsIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2DirectDebitsIdResponse, error) {
	rsp, err := c.GetV2DirectDebitsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DirectDebitsIdResponse(rsp)
}

// GetV2DirectDebitsIdEventsWithResponse request returning *GetV2DirectDebitsIdEventsResponse
func (c *ClientWithResponses) GetV2DirectDebitsIdEventsWithResponse(ctx context.Context, id ResourceID, params *GetV2DirectDebitsIdEventsParams, reqEditors ...RequestEditorFn) (*GetV2DirectDebitsIdEventsResponse, error) {
	rsp, err := c.GetV2DirectDebitsIdEvents(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2DirectDebitsIdEventsResponse(rsp)
}

// PostV2DirectDebitsIdApproveWithBodyWithResponse request with arbitrary body returning *PostV2DirectDebitsIdApproveResponse
func (c *ClientWithResponses) PostV2DirectDebitsIdApproveWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsIdApproveResponse, error) {
	rsp, err := c.PostV2DirectDebitsIdApproveWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DirectDebitsIdApproveResponse(rsp)
}

func (c *ClientWithResponses) PostV2DirectDebitsIdApproveWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdApproveParams, body PostV2DirectDebitsIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsIdApproveResponse, error) {
	rsp, err := c.PostV2DirectDebitsIdApprove(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DirectDebitsIdApproveResponse(rsp)
}

// PostV2DirectDebitsIdRejectWithBodyWithResponse request with arbitrary body returning *PostV2DirectDebitsIdRejectResponse
func (c *ClientWithResponses) PostV2DirectDebitsIdRejectWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsIdRejectResponse, error) {
	rsp, err := c.PostV2DirectDebitsIdRejectWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DirectDebitsIdRejectResponse(rsp)
}

func (c *ClientWithResponses) PostV2DirectDebitsIdRejectWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2DirectDebitsIdRejectParams, body PostV2DirectDebitsIdRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2DirectDebitsIdRejectResponse, error) {
	rsp, err := c.PostV2DirectDebitsIdReject(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2DirectDebitsIdRejectResponse(rsp)
}

// GetV2ExternalAccountsWithResponse request returning *GetV2ExternalAccountsResponse
func (c *ClientWithResponses) GetV2ExternalAccountsWithResponse(ctx context.Context, params *GetV2ExternalAccountsParams, reqEditors ...RequestEditorFn) (*GetV2ExternalAccountsResponse, error) {
	rsp, err := c.GetV2ExternalAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ExternalAccountsResponse(rsp)
}

// PostV2ExternalAccountsWithBodyWithResponse request with arbitrary body returning *PostV2ExternalAccountsResponse
func (c *ClientWithResponses) PostV2ExternalAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ExternalAccountsResponse, error) {
	rsp, err := c.PostV2ExternalAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ExternalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostV2ExternalAccountsWithResponse(ctx context.Context, body PostV2ExternalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ExternalAccountsResponse, error) {
	rsp, err := c.PostV2ExternalAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ExternalAccountsResponse(rsp)
}

// DeleteV2ExternalAccountsIdWithResponse request returning *DeleteV2ExternalAccountsIdResponse
func (c *ClientWithResponses) DeleteV2ExternalAccountsIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*DeleteV2ExternalAccountsIdResponse, error) {
	rsp, err := c.DeleteV2ExternalAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2ExternalAccountsIdResponse(rsp)
}

// GetV2ExternalAccountsIdWithResponse request returning *GetV2ExternalAccountsIdResponse
func (c *ClientWithResponses) GetV2ExternalAccountsIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2ExternalAccountsIdResponse, error) {
	rsp, err := c.GetV2ExternalAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ExternalAccountsIdResponse(rsp)
}

// PatchV2ExternalAccountsIdWithBodyWithResponse request with arbitrary body returning *PatchV2ExternalAccountsIdResponse
func (c *ClientWithResponses) PatchV2ExternalAccountsIdWithBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2ExternalAccountsIdResponse, error) {
	rsp, err := c.PatchV2ExternalAccountsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2ExternalAccountsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV2ExternalAccountsIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PatchV2ExternalAccountsIdParams, body PatchV2ExternalAccountsIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2ExternalAccountsIdResponse, error) {
	rsp, err := c.PatchV2ExternalAccountsIdWithApplicationJSONPatchPlusJSONBody(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2ExternalAccountsIdResponse(rsp)
}

// GetV2MandatesWithResponse request returning *GetV2MandatesResponse
func (c *ClientWithResponses) GetV2MandatesWithResponse(ctx context.Context, params *GetV2MandatesParams, reqEditors ...RequestEditorFn) (*GetV2MandatesResponse, error) {
	rsp, err := c.GetV2Mandates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MandatesResponse(rsp)
}

// PostV2MandatesWithBodyWithResponse request with arbitrary body returning *PostV2MandatesResponse
func (c *ClientWithResponses) PostV2MandatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MandatesResponse, error) {
	rsp, err := c.PostV2MandatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MandatesResponse(rsp)
}

func (c *ClientWithResponses) PostV2MandatesWithResponse(ctx context.Context, body PostV2MandatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MandatesResponse, error) {
	rsp, err := c.PostV2Mandates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MandatesResponse(rsp)
}

// GetV2MandatesIdWithResponse request returning *GetV2MandatesIdResponse
func (c *ClientWithResponses) GetV2MandatesIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2MandatesIdResponse, error) {
	rsp, err := c.GetV2MandatesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MandatesIdResponse(rsp)
}

// GetV2MandatesIdEventsWithResponse request returning *GetV2MandatesIdEventsResponse
func (c *ClientWithResponses) GetV2MandatesIdEventsWithResponse(ctx context.Context, id ResourceID, params *GetV2MandatesIdEventsParams, reqEditors ...RequestEditorFn) (*GetV2MandatesIdEventsResponse, error) {
	rsp, err := c.GetV2MandatesIdEvents(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MandatesIdEventsResponse(rsp)
}

// PostV2MandatesIdCancelWithResponse request returning *PostV2MandatesIdCancelResponse
func (c *ClientWithResponses) PostV2MandatesIdCancelWithResponse(ctx context.Context, id ResourceIDOrExternalID, params *PostV2MandatesIdCancelParams, reqEditors ...RequestEditorFn) (*PostV2MandatesIdCancelResponse, error) {
	rsp, err := c.PostV2MandatesIdCancel(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MandatesIdCancelResponse(rsp)
}

// GetV2betaCreditTransferBatchesWithResponse request returning *GetV2betaCreditTransferBatchesResponse
func (c *ClientWithResponses) GetV2betaCreditTransferBatchesWithResponse(ctx context.Context, params *GetV2betaCreditTransferBatchesParams, reqEditors ...RequestEditorFn) (*GetV2betaCreditTransferBatchesResponse, error) {
	rsp, err := c.GetV2betaCreditTransferBatches(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2betaCreditTransferBatchesResponse(rsp)
}

// PostV2betaCreditTransferBatchesWithBodyWithResponse request with arbitrary body returning *PostV2betaCreditTransferBatchesResponse
func (c *ClientWithResponses) PostV2betaCreditTransferBatchesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2betaCreditTransferBatchesResponse, error) {
	rsp, err := c.PostV2betaCreditTransferBatchesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2betaCreditTransferBatchesResponse(rsp)
}

func (c *ClientWithResponses) PostV2betaCreditTransferBatchesWithResponse(ctx context.Context, body PostV2betaCreditTransferBatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2betaCreditTransferBatchesResponse, error) {
	rsp, err := c.PostV2betaCreditTransferBatches(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2betaCreditTransferBatchesResponse(rsp)
}

// GetV2betaCreditTransferBatchesIdWithResponse request returning *GetV2betaCreditTransferBatchesIdResponse
func (c *ClientWithResponses) GetV2betaCreditTransferBatchesIdWithResponse(ctx context.Context, id ResourceIDOrExternalID, reqEditors ...RequestEditorFn) (*GetV2betaCreditTransferBatchesIdResponse, error) {
	rsp, err := c.GetV2betaCreditTransferBatchesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2betaCreditTransferBatchesIdResponse(rsp)
}

// GetV2betaCreditTransferBatchesIdResultsWithResponse request returning *GetV2betaCreditTransferBatchesIdResultsResponse
func (c *ClientWithResponses) GetV2betaCreditTransferBatchesIdResultsWithResponse(ctx context.Context, id ResourceID, params *GetV2betaCreditTransferBatchesIdResultsParams, reqEditors ...RequestEditorFn) (*GetV2betaCreditTransferBatchesIdResultsResponse, error) {
	rsp, err := c.GetV2betaCreditTransferBatchesIdResults(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2betaCreditTransferBatchesIdResultsResponse(rsp)
}

// ParseGetV2CounterpartiesResponse parses an HTTP response from a GetV2CounterpartiesWithResponse call
func ParseGetV2CounterpartiesResponse(rsp *http.Response) (*GetV2CounterpartiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CounterpartiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []Counterparty `json:"items"`
			Limit     int            `json:"limit"`
			NextToken string         `json:"nextToken"`
			Token     string         `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2CounterpartiesResponse parses an HTTP response from a PostV2CounterpartiesWithResponse call
func ParsePostV2CounterpartiesResponse(rsp *http.Response) (*PostV2CounterpartiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2CounterpartiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Counterparty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV2CounterpartiesIdResponse parses an HTTP response from a DeleteV2CounterpartiesIdWithResponse call
func ParseDeleteV2CounterpartiesIdResponse(rsp *http.Response) (*DeleteV2CounterpartiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2CounterpartiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest NoContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2CounterpartiesIdResponse parses an HTTP response from a GetV2CounterpartiesIdWithResponse call
func ParseGetV2CounterpartiesIdResponse(rsp *http.Response) (*GetV2CounterpartiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CounterpartiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Counterparty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV2CounterpartiesIdResponse parses an HTTP response from a PatchV2CounterpartiesIdWithResponse call
func ParsePatchV2CounterpartiesIdResponse(rsp *http.Response) (*PatchV2CounterpartiesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2CounterpartiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Counterparty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV2CreditTransferBatchesIdApproveResponse parses an HTTP response from a PostV2CreditTransferBatchesIdApproveWithResponse call
func ParsePostV2CreditTransferBatchesIdApproveResponse(rsp *http.Response) (*PostV2CreditTransferBatchesIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2CreditTransferBatchesIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CreditTransferBatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV2CreditTransferBatchesIdRejectResponse parses an HTTP response from a PostV2CreditTransferBatchesIdRejectWithResponse call
func ParsePostV2CreditTransferBatchesIdRejectResponse(rsp *http.Response) (*PostV2CreditTransferBatchesIdRejectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2CreditTransferBatchesIdRejectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CreditTransferBatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2CreditTransfersResponse parses an HTTP response from a GetV2CreditTransfersWithResponse call
func ParseGetV2CreditTransfersResponse(rsp *http.Response) (*GetV2CreditTransfersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CreditTransfersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []CreditTransfer `json:"items"`
			Limit     int              `json:"limit"`
			NextToken string           `json:"nextToken"`
			Token     string           `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2CreditTransfersResponse parses an HTTP response from a PostV2CreditTransfersWithResponse call
func ParsePostV2CreditTransfersResponse(rsp *http.Response) (*PostV2CreditTransfersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2CreditTransfersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreditTransfer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2CreditTransfersIdResponse parses an HTTP response from a GetV2CreditTransfersIdWithResponse call
func ParseGetV2CreditTransfersIdResponse(rsp *http.Response) (*GetV2CreditTransfersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CreditTransfersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditTransfer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV2CreditTransfersIdResponse parses an HTTP response from a PatchV2CreditTransfersIdWithResponse call
func ParsePatchV2CreditTransfersIdResponse(rsp *http.Response) (*PatchV2CreditTransfersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2CreditTransfersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CreditTransfer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2CreditTransfersIdEventsResponse parses an HTTP response from a GetV2CreditTransfersIdEventsWithResponse call
func ParseGetV2CreditTransfersIdEventsResponse(rsp *http.Response) (*GetV2CreditTransfersIdEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CreditTransfersIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []Event `json:"items"`
			Limit     int     `json:"limit"`
			NextToken string  `json:"nextToken"`
			Token     string  `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV2CreditTransfersIdApproveResponse parses an HTTP response from a PostV2CreditTransfersIdApproveWithResponse call
func ParsePostV2CreditTransfersIdApproveResponse(rsp *http.Response) (*PostV2CreditTransfersIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2CreditTransfersIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CreditTransfer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV2CreditTransfersIdRejectResponse parses an HTTP response from a PostV2CreditTransfersIdRejectWithResponse call
func ParsePostV2CreditTransfersIdRejectResponse(rsp *http.Response) (*PostV2CreditTransfersIdRejectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2CreditTransfersIdRejectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CreditTransfer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2DirectDebitsResponse parses an HTTP response from a GetV2DirectDebitsWithResponse call
func ParseGetV2DirectDebitsResponse(rsp *http.Response) (*GetV2DirectDebitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DirectDebitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []DirectDebit `json:"items"`
			Limit     int           `json:"limit"`
			NextToken string        `json:"nextToken"`
			Token     string        `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2DirectDebitsResponse parses an HTTP response from a PostV2DirectDebitsWithResponse call
func ParsePostV2DirectDebitsResponse(rsp *http.Response) (*PostV2DirectDebitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2DirectDebitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DirectDebit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2DirectDebitsIdResponse parses an HTTP response from a GetV2DirectDebitsIdWithResponse call
func ParseGetV2DirectDebitsIdResponse(rsp *http.Response) (*GetV2DirectDebitsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DirectDebitsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DirectDebit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2DirectDebitsIdEventsResponse parses an HTTP response from a GetV2DirectDebitsIdEventsWithResponse call
func ParseGetV2DirectDebitsIdEventsResponse(rsp *http.Response) (*GetV2DirectDebitsIdEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2DirectDebitsIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []Event `json:"items"`
			Limit     int     `json:"limit"`
			NextToken string  `json:"nextToken"`
			Token     string  `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2DirectDebitsIdApproveResponse parses an HTTP response from a PostV2DirectDebitsIdApproveWithResponse call
func ParsePostV2DirectDebitsIdApproveResponse(rsp *http.Response) (*PostV2DirectDebitsIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2DirectDebitsIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DirectDebit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV2DirectDebitsIdRejectResponse parses an HTTP response from a PostV2DirectDebitsIdRejectWithResponse call
func ParsePostV2DirectDebitsIdRejectResponse(rsp *http.Response) (*PostV2DirectDebitsIdRejectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2DirectDebitsIdRejectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DirectDebit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2ExternalAccountsResponse parses an HTTP response from a GetV2ExternalAccountsWithResponse call
func ParseGetV2ExternalAccountsResponse(rsp *http.Response) (*GetV2ExternalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ExternalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []ExternalAccount `json:"items"`
			Limit     int               `json:"limit"`
			NextToken string            `json:"nextToken"`
			Token     string            `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2ExternalAccountsResponse parses an HTTP response from a PostV2ExternalAccountsWithResponse call
func ParsePostV2ExternalAccountsResponse(rsp *http.Response) (*PostV2ExternalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2ExternalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExternalAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV2ExternalAccountsIdResponse parses an HTTP response from a DeleteV2ExternalAccountsIdWithResponse call
func ParseDeleteV2ExternalAccountsIdResponse(rsp *http.Response) (*DeleteV2ExternalAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2ExternalAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest NoContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2ExternalAccountsIdResponse parses an HTTP response from a GetV2ExternalAccountsIdWithResponse call
func ParseGetV2ExternalAccountsIdResponse(rsp *http.Response) (*GetV2ExternalAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ExternalAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV2ExternalAccountsIdResponse parses an HTTP response from a PatchV2ExternalAccountsIdWithResponse call
func ParsePatchV2ExternalAccountsIdResponse(rsp *http.Response) (*PatchV2ExternalAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2ExternalAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2MandatesResponse parses an HTTP response from a GetV2MandatesWithResponse call
func ParseGetV2MandatesResponse(rsp *http.Response) (*GetV2MandatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MandatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []Mandate `json:"items"`
			Limit     int       `json:"limit"`
			NextToken string    `json:"nextToken"`
			Token     string    `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2MandatesResponse parses an HTTP response from a PostV2MandatesWithResponse call
func ParsePostV2MandatesResponse(rsp *http.Response) (*PostV2MandatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2MandatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Mandate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2MandatesIdResponse parses an HTTP response from a GetV2MandatesIdWithResponse call
func ParseGetV2MandatesIdResponse(rsp *http.Response) (*GetV2MandatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MandatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Mandate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2MandatesIdEventsResponse parses an HTTP response from a GetV2MandatesIdEventsWithResponse call
func ParseGetV2MandatesIdEventsResponse(rsp *http.Response) (*GetV2MandatesIdEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MandatesIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []Event `json:"items"`
			Limit     int     `json:"limit"`
			NextToken string  `json:"nextToken"`
			Token     string  `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2MandatesIdCancelResponse parses an HTTP response from a PostV2MandatesIdCancelWithResponse call
func ParsePostV2MandatesIdCancelResponse(rsp *http.Response) (*PostV2MandatesIdCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2MandatesIdCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Mandate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2betaCreditTransferBatchesResponse parses an HTTP response from a GetV2betaCreditTransferBatchesWithResponse call
func ParseGetV2betaCreditTransferBatchesResponse(rsp *http.Response) (*GetV2betaCreditTransferBatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2betaCreditTransferBatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []CreditTransferBatch `json:"items"`
			Limit     int                   `json:"limit"`
			NextToken string                `json:"nextToken"`
			Token     string                `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2betaCreditTransferBatchesResponse parses an HTTP response from a PostV2betaCreditTransferBatchesWithResponse call
func ParsePostV2betaCreditTransferBatchesResponse(rsp *http.Response) (*PostV2betaCreditTransferBatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2betaCreditTransferBatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreditTransferBatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2betaCreditTransferBatchesIdResponse parses an HTTP response from a GetV2betaCreditTransferBatchesIdWithResponse call
func ParseGetV2betaCreditTransferBatchesIdResponse(rsp *http.Response) (*GetV2betaCreditTransferBatchesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2betaCreditTransferBatchesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditTransferBatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2betaCreditTransferBatchesIdResultsResponse parses an HTTP response from a GetV2betaCreditTransferBatchesIdResultsWithResponse call
func ParseGetV2betaCreditTransferBatchesIdResultsResponse(rsp *http.Response) (*GetV2betaCreditTransferBatchesIdResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2betaCreditTransferBatchesIdResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items     []BatchResult `json:"items"`
			Limit     int           `json:"limit"`
			NextToken string        `json:"nextToken"`
			Token     string        `json:"token"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
