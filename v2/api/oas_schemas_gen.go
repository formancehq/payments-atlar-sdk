// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
)

func (s *UnexpectedErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Postal address.
// Ref: #/components/schemas/Address
type Address struct {
	Country      OptCountryCode `json:"country"`
	City         OptString      `json:"city"`
	PostalCode   OptString      `json:"postalCode"`
	StreetName   OptString      `json:"streetName"`
	StreetNumber OptString      `json:"streetNumber"`
}

// GetCountry returns the value of Country.
func (s *Address) GetCountry() OptCountryCode {
	return s.Country
}

// GetCity returns the value of City.
func (s *Address) GetCity() OptString {
	return s.City
}

// GetPostalCode returns the value of PostalCode.
func (s *Address) GetPostalCode() OptString {
	return s.PostalCode
}

// GetStreetName returns the value of StreetName.
func (s *Address) GetStreetName() OptString {
	return s.StreetName
}

// GetStreetNumber returns the value of StreetNumber.
func (s *Address) GetStreetNumber() OptString {
	return s.StreetNumber
}

// SetCountry sets the value of Country.
func (s *Address) SetCountry(val OptCountryCode) {
	s.Country = val
}

// SetCity sets the value of City.
func (s *Address) SetCity(val OptString) {
	s.City = val
}

// SetPostalCode sets the value of PostalCode.
func (s *Address) SetPostalCode(val OptString) {
	s.PostalCode = val
}

// SetStreetName sets the value of StreetName.
func (s *Address) SetStreetName(val OptString) {
	s.StreetName = val
}

// SetStreetNumber sets the value of StreetNumber.
func (s *Address) SetStreetNumber(val OptString) {
	s.StreetNumber = val
}

// Ref: #/components/schemas/Amount
type Amount struct {
	Currency CurrencyCode `json:"currency"`
	// A string representation of the amount value. This will be
	// a decimal number if the currency has decimals. The number
	// is not formatted for display purposes (e.g. with locale
	// specific thousand separator) and always contains the dot
	// `.` character as decimal separator.
	StringValue string `json:"stringValue"`
	// The amount value as an integer (int64) represented in
	// currency minor units (e.g. 15.02 EUR is represented as the
	// value 1502).
	Value int64 `json:"value"`
}

// GetCurrency returns the value of Currency.
func (s *Amount) GetCurrency() CurrencyCode {
	return s.Currency
}

// GetStringValue returns the value of StringValue.
func (s *Amount) GetStringValue() string {
	return s.StringValue
}

// GetValue returns the value of Value.
func (s *Amount) GetValue() int64 {
	return s.Value
}

// SetCurrency sets the value of Currency.
func (s *Amount) SetCurrency(val CurrencyCode) {
	s.Currency = val
}

// SetStringValue sets the value of StringValue.
func (s *Amount) SetStringValue(val string) {
	s.StringValue = val
}

// SetValue sets the value of Value.
func (s *Amount) SetValue(val int64) {
	s.Value = val
}

// The status of the approval step.
// Ref: #/components/schemas/ApprovalStatus
type ApprovalStatus string

const (
	ApprovalStatusPENDING  ApprovalStatus = "PENDING"
	ApprovalStatusAPPROVED ApprovalStatus = "APPROVED"
	ApprovalStatusREJECTED ApprovalStatus = "REJECTED"
)

// AllValues returns all ApprovalStatus values.
func (ApprovalStatus) AllValues() []ApprovalStatus {
	return []ApprovalStatus{
		ApprovalStatusPENDING,
		ApprovalStatusAPPROVED,
		ApprovalStatusREJECTED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApprovalStatus) MarshalText() ([]byte, error) {
	switch s {
	case ApprovalStatusPENDING:
		return []byte(s), nil
	case ApprovalStatusAPPROVED:
		return []byte(s), nil
	case ApprovalStatusREJECTED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApprovalStatus) UnmarshalText(data []byte) error {
	switch ApprovalStatus(data) {
	case ApprovalStatusPENDING:
		*s = ApprovalStatusPENDING
		return nil
	case ApprovalStatusAPPROVED:
		*s = ApprovalStatusAPPROVED
		return nil
	case ApprovalStatusREJECTED:
		*s = ApprovalStatusREJECTED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ApproveBatchRequest
type ApproveBatchRequest struct {
	// The id of the approval step to be approved.
	ApprovalStepId string `json:"approvalStepId"`
}

// GetApprovalStepId returns the value of ApprovalStepId.
func (s *ApproveBatchRequest) GetApprovalStepId() string {
	return s.ApprovalStepId
}

// SetApprovalStepId sets the value of ApprovalStepId.
func (s *ApproveBatchRequest) SetApprovalStepId(val string) {
	s.ApprovalStepId = val
}

// Ref: #/components/schemas/Balance
type Balance struct {
	ID             ResourceID          `json:"id"`
	AccountId      ResourceID          `json:"accountId"`
	OrganizationId OrganizationID      `json:"organizationId"`
	Type           BalanceType         `json:"type"`
	ReportedType   BalanceReportedType `json:"reportedType"`
	Amount         Amount              `json:"amount"`
	LocalDate      Date                `json:"localDate"`
	// Timestamp of when the balance entry was recorded on the account. This timestamp is reported in UTC
	// and thus the date component of this timestamp may be different than `localDate`.
	Timestamp time.Time       `json:"timestamp"`
	Version   ResourceVersion `json:"version"`
}

// GetID returns the value of ID.
func (s *Balance) GetID() ResourceID {
	return s.ID
}

// GetAccountId returns the value of AccountId.
func (s *Balance) GetAccountId() ResourceID {
	return s.AccountId
}

// GetOrganizationId returns the value of OrganizationId.
func (s *Balance) GetOrganizationId() OrganizationID {
	return s.OrganizationId
}

// GetType returns the value of Type.
func (s *Balance) GetType() BalanceType {
	return s.Type
}

// GetReportedType returns the value of ReportedType.
func (s *Balance) GetReportedType() BalanceReportedType {
	return s.ReportedType
}

// GetAmount returns the value of Amount.
func (s *Balance) GetAmount() Amount {
	return s.Amount
}

// GetLocalDate returns the value of LocalDate.
func (s *Balance) GetLocalDate() Date {
	return s.LocalDate
}

// GetTimestamp returns the value of Timestamp.
func (s *Balance) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVersion returns the value of Version.
func (s *Balance) GetVersion() ResourceVersion {
	return s.Version
}

// SetID sets the value of ID.
func (s *Balance) SetID(val ResourceID) {
	s.ID = val
}

// SetAccountId sets the value of AccountId.
func (s *Balance) SetAccountId(val ResourceID) {
	s.AccountId = val
}

// SetOrganizationId sets the value of OrganizationId.
func (s *Balance) SetOrganizationId(val OrganizationID) {
	s.OrganizationId = val
}

// SetType sets the value of Type.
func (s *Balance) SetType(val BalanceType) {
	s.Type = val
}

// SetReportedType sets the value of ReportedType.
func (s *Balance) SetReportedType(val BalanceReportedType) {
	s.ReportedType = val
}

// SetAmount sets the value of Amount.
func (s *Balance) SetAmount(val Amount) {
	s.Amount = val
}

// SetLocalDate sets the value of LocalDate.
func (s *Balance) SetLocalDate(val Date) {
	s.LocalDate = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Balance) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVersion sets the value of Version.
func (s *Balance) SetVersion(val ResourceVersion) {
	s.Version = val
}

// Ref: #/components/schemas/BalanceReportedType
type BalanceReportedType string

const (
	BalanceReportedTypeOPEN    BalanceReportedType = "OPEN"
	BalanceReportedTypeCLOSE   BalanceReportedType = "CLOSE"
	BalanceReportedTypeINTERIM BalanceReportedType = "INTERIM"
)

// AllValues returns all BalanceReportedType values.
func (BalanceReportedType) AllValues() []BalanceReportedType {
	return []BalanceReportedType{
		BalanceReportedTypeOPEN,
		BalanceReportedTypeCLOSE,
		BalanceReportedTypeINTERIM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BalanceReportedType) MarshalText() ([]byte, error) {
	switch s {
	case BalanceReportedTypeOPEN:
		return []byte(s), nil
	case BalanceReportedTypeCLOSE:
		return []byte(s), nil
	case BalanceReportedTypeINTERIM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BalanceReportedType) UnmarshalText(data []byte) error {
	switch BalanceReportedType(data) {
	case BalanceReportedTypeOPEN:
		*s = BalanceReportedTypeOPEN
		return nil
	case BalanceReportedTypeCLOSE:
		*s = BalanceReportedTypeCLOSE
		return nil
	case BalanceReportedTypeINTERIM:
		*s = BalanceReportedTypeINTERIM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BalanceType
type BalanceType string

const (
	BalanceTypeBOOKED    BalanceType = "BOOKED"
	BalanceTypeAVAILABLE BalanceType = "AVAILABLE"
)

// AllValues returns all BalanceType values.
func (BalanceType) AllValues() []BalanceType {
	return []BalanceType{
		BalanceTypeBOOKED,
		BalanceTypeAVAILABLE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BalanceType) MarshalText() ([]byte, error) {
	switch s {
	case BalanceTypeBOOKED:
		return []byte(s), nil
	case BalanceTypeAVAILABLE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BalanceType) UnmarshalText(data []byte) error {
	switch BalanceType(data) {
	case BalanceTypeBOOKED:
		*s = BalanceTypeBOOKED
		return nil
	case BalanceTypeAVAILABLE:
		*s = BalanceTypeAVAILABLE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BasicAuth struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

type BatchAmountSums []Amount

type BatchErrors []ErrorDetails

// Metadata describing the input contents that was used to create this batch.
// Ref: #/components/schemas/BatchInputContent
type BatchInputContent struct {
	ContentType string `json:"contentType"`
	// Total count of input records (resources) in the input batch.
	RecordCount int `json:"recordCount"`
	// The size of the input content in bytes.
	// If the batch was created by uploading a file using `multipart/form-data` the `contentSize` will be
	// the file size.
	// If the batch was created with JSON input this will be the raw JSON size.
	Size int64 `json:"size"`
	// A checksum of the batch input contents.
	// The checksum digest value will be prefixed by an
	// identifier of the hash algorithm used, e.g. `sha256`. A
	// colon `:` is used as separator between the algorithm
	// identifier and the digest value.
	Checksum string `json:"checksum"`
	// The name of the file that was used as input to create the batch.
	// Filename will only available if the batch input was provided using `multipart/form-data`.
	Filename OptString `json:"filename"`
}

// GetContentType returns the value of ContentType.
func (s *BatchInputContent) GetContentType() string {
	return s.ContentType
}

// GetRecordCount returns the value of RecordCount.
func (s *BatchInputContent) GetRecordCount() int {
	return s.RecordCount
}

// GetSize returns the value of Size.
func (s *BatchInputContent) GetSize() int64 {
	return s.Size
}

// GetChecksum returns the value of Checksum.
func (s *BatchInputContent) GetChecksum() string {
	return s.Checksum
}

// GetFilename returns the value of Filename.
func (s *BatchInputContent) GetFilename() OptString {
	return s.Filename
}

// SetContentType sets the value of ContentType.
func (s *BatchInputContent) SetContentType(val string) {
	s.ContentType = val
}

// SetRecordCount sets the value of RecordCount.
func (s *BatchInputContent) SetRecordCount(val int) {
	s.RecordCount = val
}

// SetSize sets the value of Size.
func (s *BatchInputContent) SetSize(val int64) {
	s.Size = val
}

// SetChecksum sets the value of Checksum.
func (s *BatchInputContent) SetChecksum(val string) {
	s.Checksum = val
}

// SetFilename sets the value of Filename.
func (s *BatchInputContent) SetFilename(val OptString) {
	s.Filename = val
}

// Result of processing an individual payment request as part of
// a batch request.
// Ref: #/components/schemas/BatchResult
type BatchResult struct {
	PaymentId OptResourceID  `json:"paymentId"`
	Errors    []ErrorDetails `json:"errors"`
	// Indicates whether a given payment request was skipped when
	// processed as part of a batch.
	Skipped OptBool `json:"skipped"`
	// 0-based index specifying which record in the batch input that
	// this result is associated with. If the batch input was a
	// CSV file the `recordIndex` will refer to rows (lines) in
	// the file. If the batch input was JSON it will refer to
	// JSON array indicies.
	// If the error(s) are not directly related to a specific
	// record/row/line the `recordIndex` will not be present.
	RecordIndex OptInt `json:"recordIndex"`
}

// GetPaymentId returns the value of PaymentId.
func (s *BatchResult) GetPaymentId() OptResourceID {
	return s.PaymentId
}

// GetErrors returns the value of Errors.
func (s *BatchResult) GetErrors() []ErrorDetails {
	return s.Errors
}

// GetSkipped returns the value of Skipped.
func (s *BatchResult) GetSkipped() OptBool {
	return s.Skipped
}

// GetRecordIndex returns the value of RecordIndex.
func (s *BatchResult) GetRecordIndex() OptInt {
	return s.RecordIndex
}

// SetPaymentId sets the value of PaymentId.
func (s *BatchResult) SetPaymentId(val OptResourceID) {
	s.PaymentId = val
}

// SetErrors sets the value of Errors.
func (s *BatchResult) SetErrors(val []ErrorDetails) {
	s.Errors = val
}

// SetSkipped sets the value of Skipped.
func (s *BatchResult) SetSkipped(val OptBool) {
	s.Skipped = val
}

// SetRecordIndex sets the value of RecordIndex.
func (s *BatchResult) SetRecordIndex(val OptInt) {
	s.RecordIndex = val
}

// Aggregate summary of batch processing results.
// Ref: #/components/schemas/BatchResultSummary
type BatchResultSummary struct {
	// Number of input records that were attempted to be processed.
	Total int `json:"total"`
	// Number of input records that resulted in a successfully created resource.
	Succeeded int `json:"succeeded"`
	// Number of failed records.
	Failed int `json:"failed"`
	// Number of input records that were skipped.
	Skipped int `json:"skipped"`
}

// GetTotal returns the value of Total.
func (s *BatchResultSummary) GetTotal() int {
	return s.Total
}

// GetSucceeded returns the value of Succeeded.
func (s *BatchResultSummary) GetSucceeded() int {
	return s.Succeeded
}

// GetFailed returns the value of Failed.
func (s *BatchResultSummary) GetFailed() int {
	return s.Failed
}

// GetSkipped returns the value of Skipped.
func (s *BatchResultSummary) GetSkipped() int {
	return s.Skipped
}

// SetTotal sets the value of Total.
func (s *BatchResultSummary) SetTotal(val int) {
	s.Total = val
}

// SetSucceeded sets the value of Succeeded.
func (s *BatchResultSummary) SetSucceeded(val int) {
	s.Succeeded = val
}

// SetFailed sets the value of Failed.
func (s *BatchResultSummary) SetFailed(val int) {
	s.Failed = val
}

// SetSkipped sets the value of Skipped.
func (s *BatchResultSummary) SetSkipped(val int) {
	s.Skipped = val
}

// Aggregate summary of payment batch processing results.
// Ref: #/components/schemas/BatchResultsSummary
type BatchResultsSummary struct {
	// Deprecated. Moved to `processed`. Number of input records that were attempted to be processed.
	Total int `json:"total"`
	// Deprecated. Moved to `processed`. Number of input records that resulted in a successfully created
	// payment.
	Succeeded int `json:"succeeded"`
	// Deprecated. Moved to `processed`. Number of failed records.
	Failed int `json:"failed"`
	// Deprecated. Moved to `processed`. Number of input records that were skipped.
	Skipped   int                `json:"skipped"`
	Processed BatchResultSummary `json:"processed"`
	Sums      BatchAmountSums    `json:"sums"`
}

// GetTotal returns the value of Total.
func (s *BatchResultsSummary) GetTotal() int {
	return s.Total
}

// GetSucceeded returns the value of Succeeded.
func (s *BatchResultsSummary) GetSucceeded() int {
	return s.Succeeded
}

// GetFailed returns the value of Failed.
func (s *BatchResultsSummary) GetFailed() int {
	return s.Failed
}

// GetSkipped returns the value of Skipped.
func (s *BatchResultsSummary) GetSkipped() int {
	return s.Skipped
}

// GetProcessed returns the value of Processed.
func (s *BatchResultsSummary) GetProcessed() BatchResultSummary {
	return s.Processed
}

// GetSums returns the value of Sums.
func (s *BatchResultsSummary) GetSums() BatchAmountSums {
	return s.Sums
}

// SetTotal sets the value of Total.
func (s *BatchResultsSummary) SetTotal(val int) {
	s.Total = val
}

// SetSucceeded sets the value of Succeeded.
func (s *BatchResultsSummary) SetSucceeded(val int) {
	s.Succeeded = val
}

// SetFailed sets the value of Failed.
func (s *BatchResultsSummary) SetFailed(val int) {
	s.Failed = val
}

// SetSkipped sets the value of Skipped.
func (s *BatchResultsSummary) SetSkipped(val int) {
	s.Skipped = val
}

// SetProcessed sets the value of Processed.
func (s *BatchResultsSummary) SetProcessed(val BatchResultSummary) {
	s.Processed = val
}

// SetSums sets the value of Sums.
func (s *BatchResultsSummary) SetSums(val BatchAmountSums) {
	s.Sums = val
}

// The status of this batch. The status only refers to the
// processing of the input, not the processing or success of
// the resources themselves.
// `COMPLETED` is the only end-state. Failure is indicated by a non-empty list of `errors`.
// Ref: #/components/schemas/BatchStatus
type BatchStatus string

const (
	BatchStatusCREATED           BatchStatus = "CREATED"
	BatchStatusPROCESSINGSTARTED BatchStatus = "PROCESSING_STARTED"
	BatchStatusCOMPLETED         BatchStatus = "COMPLETED"
)

// AllValues returns all BatchStatus values.
func (BatchStatus) AllValues() []BatchStatus {
	return []BatchStatus{
		BatchStatusCREATED,
		BatchStatusPROCESSINGSTARTED,
		BatchStatusCOMPLETED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BatchStatus) MarshalText() ([]byte, error) {
	switch s {
	case BatchStatusCREATED:
		return []byte(s), nil
	case BatchStatusPROCESSINGSTARTED:
		return []byte(s), nil
	case BatchStatusCOMPLETED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BatchStatus) UnmarshalText(data []byte) error {
	switch BatchStatus(data) {
	case BatchStatusCREATED:
		*s = BatchStatusCREATED
		return nil
	case BatchStatusPROCESSINGSTARTED:
		*s = BatchStatusPROCESSINGSTARTED
		return nil
	case BatchStatusCOMPLETED:
		*s = BatchStatusCOMPLETED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The way this batch treats the underlying payments.
// `INDIVIDUAL_PAYMENTS` means that each payment is treated individually.
// `BATCH` means that payment approvals (or rejections) are handled at batch level.
// Ref: #/components/schemas/BatchTreatmentType
type BatchTreatmentType string

const (
	BatchTreatmentTypeINDIVIDUALPAYMENTS BatchTreatmentType = "INDIVIDUAL_PAYMENTS"
	BatchTreatmentTypeBATCH              BatchTreatmentType = "BATCH"
)

// AllValues returns all BatchTreatmentType values.
func (BatchTreatmentType) AllValues() []BatchTreatmentType {
	return []BatchTreatmentType{
		BatchTreatmentTypeINDIVIDUALPAYMENTS,
		BatchTreatmentTypeBATCH,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BatchTreatmentType) MarshalText() ([]byte, error) {
	switch s {
	case BatchTreatmentTypeINDIVIDUALPAYMENTS:
		return []byte(s), nil
	case BatchTreatmentTypeBATCH:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BatchTreatmentType) UnmarshalText(data []byte) error {
	switch BatchTreatmentType(data) {
	case BatchTreatmentTypeINDIVIDUALPAYMENTS:
		*s = BatchTreatmentTypeINDIVIDUALPAYMENTS
		return nil
	case BatchTreatmentTypeBATCH:
		*s = BatchTreatmentTypeBATCH
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CountryCode string

// Ref: #/components/schemas/CreateEntityRequest
type CreateEntityRequest struct {
	// Legal name.
	LegalName          string                `json:"legalName"`
	NationalIdentifier OptNationalIdentifier `json:"nationalIdentifier"`
	Address            OptAddress            `json:"address"`
	// Parent Entity ID, if applicable. Set the parent entity ID if the entity is a subsidiary or a
	// branch of another entity.
	ParentId OptString `json:"parentId"`
}

// GetLegalName returns the value of LegalName.
func (s *CreateEntityRequest) GetLegalName() string {
	return s.LegalName
}

// GetNationalIdentifier returns the value of NationalIdentifier.
func (s *CreateEntityRequest) GetNationalIdentifier() OptNationalIdentifier {
	return s.NationalIdentifier
}

// GetAddress returns the value of Address.
func (s *CreateEntityRequest) GetAddress() OptAddress {
	return s.Address
}

// GetParentId returns the value of ParentId.
func (s *CreateEntityRequest) GetParentId() OptString {
	return s.ParentId
}

// SetLegalName sets the value of LegalName.
func (s *CreateEntityRequest) SetLegalName(val string) {
	s.LegalName = val
}

// SetNationalIdentifier sets the value of NationalIdentifier.
func (s *CreateEntityRequest) SetNationalIdentifier(val OptNationalIdentifier) {
	s.NationalIdentifier = val
}

// SetAddress sets the value of Address.
func (s *CreateEntityRequest) SetAddress(val OptAddress) {
	s.Address = val
}

// SetParentId sets the value of ParentId.
func (s *CreateEntityRequest) SetParentId(val OptString) {
	s.ParentId = val
}

type CreatedTimestamp time.Time

// Ref: #/components/schemas/CreditTransferBatch
type CreditTransferBatch struct {
	ID             ResourceID             `json:"id"`
	OrganizationId OrganizationID         `json:"organizationId"`
	Treatment      BatchTreatmentType     `json:"treatment"`
	InputContent   BatchInputContent      `json:"inputContent"`
	Results        OptBatchResultsSummary `json:"results"`
	ResultSummary  OptBatchResultSummary  `json:"resultSummary"`
	Status         BatchStatus            `json:"status"`
	Errors         BatchErrors            `json:"errors"`
	// Batch approval steps.
	// Approval steps will only be available once the the batch
	// `status` is `COMPLETED`. I.e. no action must be taken
	// based on the absence of approval steps (empty array).
	ApprovalSteps []PaymentApprovalStep `json:"approvalSteps"`
	ExternalId    OptExternalID         `json:"externalId"`
	Metadata      OptNilMetadata        `json:"metadata"`
	Etag          ETag                  `json:"etag"`
	Version       ResourceVersion       `json:"version"`
	Created       CreatedTimestamp      `json:"created"`
	Updated       UpdatedTimestamp      `json:"updated"`
}

// GetID returns the value of ID.
func (s *CreditTransferBatch) GetID() ResourceID {
	return s.ID
}

// GetOrganizationId returns the value of OrganizationId.
func (s *CreditTransferBatch) GetOrganizationId() OrganizationID {
	return s.OrganizationId
}

// GetTreatment returns the value of Treatment.
func (s *CreditTransferBatch) GetTreatment() BatchTreatmentType {
	return s.Treatment
}

// GetInputContent returns the value of InputContent.
func (s *CreditTransferBatch) GetInputContent() BatchInputContent {
	return s.InputContent
}

// GetResults returns the value of Results.
func (s *CreditTransferBatch) GetResults() OptBatchResultsSummary {
	return s.Results
}

// GetResultSummary returns the value of ResultSummary.
func (s *CreditTransferBatch) GetResultSummary() OptBatchResultSummary {
	return s.ResultSummary
}

// GetStatus returns the value of Status.
func (s *CreditTransferBatch) GetStatus() BatchStatus {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *CreditTransferBatch) GetErrors() BatchErrors {
	return s.Errors
}

// GetApprovalSteps returns the value of ApprovalSteps.
func (s *CreditTransferBatch) GetApprovalSteps() []PaymentApprovalStep {
	return s.ApprovalSteps
}

// GetExternalId returns the value of ExternalId.
func (s *CreditTransferBatch) GetExternalId() OptExternalID {
	return s.ExternalId
}

// GetMetadata returns the value of Metadata.
func (s *CreditTransferBatch) GetMetadata() OptNilMetadata {
	return s.Metadata
}

// GetEtag returns the value of Etag.
func (s *CreditTransferBatch) GetEtag() ETag {
	return s.Etag
}

// GetVersion returns the value of Version.
func (s *CreditTransferBatch) GetVersion() ResourceVersion {
	return s.Version
}

// GetCreated returns the value of Created.
func (s *CreditTransferBatch) GetCreated() CreatedTimestamp {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CreditTransferBatch) GetUpdated() UpdatedTimestamp {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CreditTransferBatch) SetID(val ResourceID) {
	s.ID = val
}

// SetOrganizationId sets the value of OrganizationId.
func (s *CreditTransferBatch) SetOrganizationId(val OrganizationID) {
	s.OrganizationId = val
}

// SetTreatment sets the value of Treatment.
func (s *CreditTransferBatch) SetTreatment(val BatchTreatmentType) {
	s.Treatment = val
}

// SetInputContent sets the value of InputContent.
func (s *CreditTransferBatch) SetInputContent(val BatchInputContent) {
	s.InputContent = val
}

// SetResults sets the value of Results.
func (s *CreditTransferBatch) SetResults(val OptBatchResultsSummary) {
	s.Results = val
}

// SetResultSummary sets the value of ResultSummary.
func (s *CreditTransferBatch) SetResultSummary(val OptBatchResultSummary) {
	s.ResultSummary = val
}

// SetStatus sets the value of Status.
func (s *CreditTransferBatch) SetStatus(val BatchStatus) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *CreditTransferBatch) SetErrors(val BatchErrors) {
	s.Errors = val
}

// SetApprovalSteps sets the value of ApprovalSteps.
func (s *CreditTransferBatch) SetApprovalSteps(val []PaymentApprovalStep) {
	s.ApprovalSteps = val
}

// SetExternalId sets the value of ExternalId.
func (s *CreditTransferBatch) SetExternalId(val OptExternalID) {
	s.ExternalId = val
}

// SetMetadata sets the value of Metadata.
func (s *CreditTransferBatch) SetMetadata(val OptNilMetadata) {
	s.Metadata = val
}

// SetEtag sets the value of Etag.
func (s *CreditTransferBatch) SetEtag(val ETag) {
	s.Etag = val
}

// SetVersion sets the value of Version.
func (s *CreditTransferBatch) SetVersion(val ResourceVersion) {
	s.Version = val
}

// SetCreated sets the value of Created.
func (s *CreditTransferBatch) SetCreated(val CreatedTimestamp) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CreditTransferBatch) SetUpdated(val UpdatedTimestamp) {
	s.Updated = val
}

func (*CreditTransferBatch) paymentsV2CreditTransferBatchesIDApprovePostRes() {}
func (*CreditTransferBatch) paymentsV2CreditTransferBatchesIDRejectPostRes()  {}
func (*CreditTransferBatch) paymentsV2betaCreditTransferBatchesIDGetRes()     {}
func (*CreditTransferBatch) paymentsV2betaCreditTransferBatchesPostRes()      {}

// The content type of the batch.
// See https://docs.atlar.com/docs/batch-payments#csv-format for details on the CSV format for credit
// transfer batches.
// Ref: #/components/schemas/CreditTransferBatchContentType
type CreditTransferBatchContentType string

const (
	CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchCsv  CreditTransferBatchContentType = "application/vnd.atlar.payments.v2.credit-transfer.batch+csv"
	CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchJSON CreditTransferBatchContentType = "application/vnd.atlar.payments.v2.credit-transfer.batch+json"
)

// AllValues returns all CreditTransferBatchContentType values.
func (CreditTransferBatchContentType) AllValues() []CreditTransferBatchContentType {
	return []CreditTransferBatchContentType{
		CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchCsv,
		CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchJSON,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreditTransferBatchContentType) MarshalText() ([]byte, error) {
	switch s {
	case CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchCsv:
		return []byte(s), nil
	case CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchJSON:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreditTransferBatchContentType) UnmarshalText(data []byte) error {
	switch CreditTransferBatchContentType(data) {
	case CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchCsv:
		*s = CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchCsv
		return nil
	case CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchJSON:
		*s = CreditTransferBatchContentTypeApplicationVndAtlarPaymentsV2CreditTransferBatchJSON
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CurrencyCode string

type Date time.Time

type ETag string

// Ref: #/components/schemas/Entity
type Entity struct {
	ID             ResourceID     `json:"id"`
	OrganizationId OrganizationID `json:"organizationId"`
	// This optional field identifies a parent entity, indicating this entity is a subsidiary or branch
	// to the parent. A missing Parent Entity ID implies the entity is without parent company.
	ParentId OptString `json:"parentId"`
	// Legal name of the entity. E.g. your company's legal business name.
	LegalName          string                `json:"legalName"`
	NationalIdentifier OptNationalIdentifier `json:"nationalIdentifier"`
	Address            OptAddress            `json:"address"`
	Created            CreatedTimestamp      `json:"created"`
	Updated            UpdatedTimestamp      `json:"updated"`
	Version            ResourceVersion       `json:"version"`
}

// GetID returns the value of ID.
func (s *Entity) GetID() ResourceID {
	return s.ID
}

// GetOrganizationId returns the value of OrganizationId.
func (s *Entity) GetOrganizationId() OrganizationID {
	return s.OrganizationId
}

// GetParentId returns the value of ParentId.
func (s *Entity) GetParentId() OptString {
	return s.ParentId
}

// GetLegalName returns the value of LegalName.
func (s *Entity) GetLegalName() string {
	return s.LegalName
}

// GetNationalIdentifier returns the value of NationalIdentifier.
func (s *Entity) GetNationalIdentifier() OptNationalIdentifier {
	return s.NationalIdentifier
}

// GetAddress returns the value of Address.
func (s *Entity) GetAddress() OptAddress {
	return s.Address
}

// GetCreated returns the value of Created.
func (s *Entity) GetCreated() CreatedTimestamp {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *Entity) GetUpdated() UpdatedTimestamp {
	return s.Updated
}

// GetVersion returns the value of Version.
func (s *Entity) GetVersion() ResourceVersion {
	return s.Version
}

// SetID sets the value of ID.
func (s *Entity) SetID(val ResourceID) {
	s.ID = val
}

// SetOrganizationId sets the value of OrganizationId.
func (s *Entity) SetOrganizationId(val OrganizationID) {
	s.OrganizationId = val
}

// SetParentId sets the value of ParentId.
func (s *Entity) SetParentId(val OptString) {
	s.ParentId = val
}

// SetLegalName sets the value of LegalName.
func (s *Entity) SetLegalName(val string) {
	s.LegalName = val
}

// SetNationalIdentifier sets the value of NationalIdentifier.
func (s *Entity) SetNationalIdentifier(val OptNationalIdentifier) {
	s.NationalIdentifier = val
}

// SetAddress sets the value of Address.
func (s *Entity) SetAddress(val OptAddress) {
	s.Address = val
}

// SetCreated sets the value of Created.
func (s *Entity) SetCreated(val CreatedTimestamp) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *Entity) SetUpdated(val UpdatedTimestamp) {
	s.Updated = val
}

// SetVersion sets the value of Version.
func (s *Entity) SetVersion(val ResourceVersion) {
	s.Version = val
}

func (*Entity) financialDataV2EntitiesIDGetRes() {}

// Error detail.
// Ref: #/components/schemas/ErrorDetails
type ErrorDetails struct {
	// An error code for this error. Not always present.
	Code OptString `json:"code"`
	// A description of this specific error.
	Error OptString `json:"error"`
	// The field which has an error. This only set if the error has to do with a specific field, such as
	// for validation errors. Nested fields are concatenated with `.`, as well as indexed fields in lists.
	Field OptString `json:"field"`
}

// GetCode returns the value of Code.
func (s *ErrorDetails) GetCode() OptString {
	return s.Code
}

// GetError returns the value of Error.
func (s *ErrorDetails) GetError() OptString {
	return s.Error
}

// GetField returns the value of Field.
func (s *ErrorDetails) GetField() OptString {
	return s.Field
}

// SetCode sets the value of Code.
func (s *ErrorDetails) SetCode(val OptString) {
	s.Code = val
}

// SetError sets the value of Error.
func (s *ErrorDetails) SetError(val OptString) {
	s.Error = val
}

// SetField sets the value of Field.
func (s *ErrorDetails) SetField(val OptString) {
	s.Field = val
}

// Error response.
// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	// The HTTP status code.
	Status OptInt `json:"status"`
	// A top-level message describing the error(s).
	Message OptString `json:"message"`
	// A list of details for each error that occurred.
	Details []ErrorDetails `json:"details"`
}

// GetStatus returns the value of Status.
func (s *ErrorResponse) GetStatus() OptInt {
	return s.Status
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() OptString {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *ErrorResponse) GetDetails() []ErrorDetails {
	return s.Details
}

// SetStatus sets the value of Status.
func (s *ErrorResponse) SetStatus(val OptInt) {
	s.Status = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val OptString) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *ErrorResponse) SetDetails(val []ErrorDetails) {
	s.Details = val
}

func (*ErrorResponse) financialDataV2AccountsIDBalancesGetRes()          {}
func (*ErrorResponse) financialDataV2EntitiesGetRes()                    {}
func (*ErrorResponse) financialDataV2EntitiesIDGetRes()                  {}
func (*ErrorResponse) financialDataV2EntitiesPostRes()                   {}
func (*ErrorResponse) financialDataV2PendingTransactionsIDEventsGetRes() {}
func (*ErrorResponse) paymentsV2CreditTransfersIDEventsGetRes()          {}
func (*ErrorResponse) paymentsV2DirectDebitsIDEventsGetRes()             {}
func (*ErrorResponse) paymentsV2MandatesIDEventsGetRes()                 {}
func (*ErrorResponse) paymentsV2betaCreditTransferBatchesGetRes()        {}
func (*ErrorResponse) paymentsV2betaCreditTransferBatchesIDGetRes()      {}
func (*ErrorResponse) paymentsV2betaCreditTransferBatchesPostRes()       {}

// A resource event.
// Ref: #/components/schemas/Event
type Event struct {
	// The ID of the event.
	ID             int            `json:"id"`
	OrganizationId OrganizationID `json:"organizationId"`
	EntityId       ResourceID     `json:"entityId"`
	Type           EventType      `json:"type"`
	// The event name. Different resources have different sets of event names.
	Name string `json:"name"`
	// When the event happened.
	Timestamp time.Time `json:"timestamp"`
	// Additional details describing this event.
	Details OptEventDetails `json:"details"`
	// A message which could either be a message from the bank or an explanation of the event.
	Message OptString `json:"message"`
	// The originator of the event which could be either a user ID, BANK or ATLAR.
	Originator string `json:"originator"`
}

// GetID returns the value of ID.
func (s *Event) GetID() int {
	return s.ID
}

// GetOrganizationId returns the value of OrganizationId.
func (s *Event) GetOrganizationId() OrganizationID {
	return s.OrganizationId
}

// GetEntityId returns the value of EntityId.
func (s *Event) GetEntityId() ResourceID {
	return s.EntityId
}

// GetType returns the value of Type.
func (s *Event) GetType() EventType {
	return s.Type
}

// GetName returns the value of Name.
func (s *Event) GetName() string {
	return s.Name
}

// GetTimestamp returns the value of Timestamp.
func (s *Event) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetDetails returns the value of Details.
func (s *Event) GetDetails() OptEventDetails {
	return s.Details
}

// GetMessage returns the value of Message.
func (s *Event) GetMessage() OptString {
	return s.Message
}

// GetOriginator returns the value of Originator.
func (s *Event) GetOriginator() string {
	return s.Originator
}

// SetID sets the value of ID.
func (s *Event) SetID(val int) {
	s.ID = val
}

// SetOrganizationId sets the value of OrganizationId.
func (s *Event) SetOrganizationId(val OrganizationID) {
	s.OrganizationId = val
}

// SetEntityId sets the value of EntityId.
func (s *Event) SetEntityId(val ResourceID) {
	s.EntityId = val
}

// SetType sets the value of Type.
func (s *Event) SetType(val EventType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *Event) SetName(val string) {
	s.Name = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Event) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetDetails sets the value of Details.
func (s *Event) SetDetails(val OptEventDetails) {
	s.Details = val
}

// SetMessage sets the value of Message.
func (s *Event) SetMessage(val OptString) {
	s.Message = val
}

// SetOriginator sets the value of Originator.
func (s *Event) SetOriginator(val string) {
	s.Originator = val
}

// Additional details describing this event.
type EventDetails map[string]string

func (s *EventDetails) init() EventDetails {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Event type.
// Ref: #/components/schemas/EventType
type EventType string

const (
	EventTypeCREATED EventType = "CREATED"
	EventTypeUPDATED EventType = "UPDATED"
	EventTypeDELETED EventType = "DELETED"
)

// AllValues returns all EventType values.
func (EventType) AllValues() []EventType {
	return []EventType{
		EventTypeCREATED,
		EventTypeUPDATED,
		EventTypeDELETED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventType) MarshalText() ([]byte, error) {
	switch s {
	case EventTypeCREATED:
		return []byte(s), nil
	case EventTypeUPDATED:
		return []byte(s), nil
	case EventTypeDELETED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventType) UnmarshalText(data []byte) error {
	switch EventType(data) {
	case EventTypeCREATED:
		*s = EventTypeCREATED
		return nil
	case EventTypeUPDATED:
		*s = EventTypeUPDATED
		return nil
	case EventTypeDELETED:
		*s = EventTypeDELETED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExternalID string

// Merged schema.
type FinancialDataV2AccountsIDBalancesGetOK struct {
	// Merged property.
	Items []Balance `json:"items"`
	// Pagination token for next page.
	// The value will be a non-empty string if there are more resources to be fetched.
	// The value will be an empty string if there are no more resources to be fetched.
	NextToken string `json:"nextToken"`
	// The pagination token that was used for this request.
	// The value will be an empty string if no `token` query parameter was provided with the request.
	Token string `json:"token"`
	// The page limit that was used for this request.
	Limit int `json:"limit"`
}

// GetItems returns the value of Items.
func (s *FinancialDataV2AccountsIDBalancesGetOK) GetItems() []Balance {
	return s.Items
}

// GetNextToken returns the value of NextToken.
func (s *FinancialDataV2AccountsIDBalancesGetOK) GetNextToken() string {
	return s.NextToken
}

// GetToken returns the value of Token.
func (s *FinancialDataV2AccountsIDBalancesGetOK) GetToken() string {
	return s.Token
}

// GetLimit returns the value of Limit.
func (s *FinancialDataV2AccountsIDBalancesGetOK) GetLimit() int {
	return s.Limit
}

// SetItems sets the value of Items.
func (s *FinancialDataV2AccountsIDBalancesGetOK) SetItems(val []Balance) {
	s.Items = val
}

// SetNextToken sets the value of NextToken.
func (s *FinancialDataV2AccountsIDBalancesGetOK) SetNextToken(val string) {
	s.NextToken = val
}

// SetToken sets the value of Token.
func (s *FinancialDataV2AccountsIDBalancesGetOK) SetToken(val string) {
	s.Token = val
}

// SetLimit sets the value of Limit.
func (s *FinancialDataV2AccountsIDBalancesGetOK) SetLimit(val int) {
	s.Limit = val
}

func (*FinancialDataV2AccountsIDBalancesGetOK) financialDataV2AccountsIDBalancesGetRes() {}

// Merged schema.
type FinancialDataV2EntitiesGetOK struct {
	// Merged property.
	Items []Entity `json:"items"`
	// Pagination token for next page.
	// The value will be a non-empty string if there are more resources to be fetched.
	// The value will be an empty string if there are no more resources to be fetched.
	NextToken string `json:"nextToken"`
	// The pagination token that was used for this request.
	// The value will be an empty string if no `token` query parameter was provided with the request.
	Token string `json:"token"`
	// The page limit that was used for this request.
	Limit int `json:"limit"`
}

// GetItems returns the value of Items.
func (s *FinancialDataV2EntitiesGetOK) GetItems() []Entity {
	return s.Items
}

// GetNextToken returns the value of NextToken.
func (s *FinancialDataV2EntitiesGetOK) GetNextToken() string {
	return s.NextToken
}

// GetToken returns the value of Token.
func (s *FinancialDataV2EntitiesGetOK) GetToken() string {
	return s.Token
}

// GetLimit returns the value of Limit.
func (s *FinancialDataV2EntitiesGetOK) GetLimit() int {
	return s.Limit
}

// SetItems sets the value of Items.
func (s *FinancialDataV2EntitiesGetOK) SetItems(val []Entity) {
	s.Items = val
}

// SetNextToken sets the value of NextToken.
func (s *FinancialDataV2EntitiesGetOK) SetNextToken(val string) {
	s.NextToken = val
}

// SetToken sets the value of Token.
func (s *FinancialDataV2EntitiesGetOK) SetToken(val string) {
	s.Token = val
}

// SetLimit sets the value of Limit.
func (s *FinancialDataV2EntitiesGetOK) SetLimit(val int) {
	s.Limit = val
}

func (*FinancialDataV2EntitiesGetOK) financialDataV2EntitiesGetRes() {}

type FinancialDataV2EntitiesIDDeleteNoContent ErrorResponse

func (*FinancialDataV2EntitiesIDDeleteNoContent) financialDataV2EntitiesIDDeleteRes() {}

type FinancialDataV2EntitiesIDDeleteNotFound ErrorResponse

func (*FinancialDataV2EntitiesIDDeleteNotFound) financialDataV2EntitiesIDDeleteRes() {}

type FinancialDataV2EntitiesPostCreated Entity

func (*FinancialDataV2EntitiesPostCreated) financialDataV2EntitiesPostRes() {}

type FinancialDataV2EntitiesPostOK Entity

func (*FinancialDataV2EntitiesPostOK) financialDataV2EntitiesPostRes() {}

// Merged schema.
type FinancialDataV2PendingTransactionsIDEventsGetOK struct {
	// Merged property.
	Items []Event `json:"items"`
	// Pagination token for next page.
	// The value will be a non-empty string if there are more resources to be fetched.
	// The value will be an empty string if there are no more resources to be fetched.
	NextToken string `json:"nextToken"`
	// The pagination token that was used for this request.
	// The value will be an empty string if no `token` query parameter was provided with the request.
	Token string `json:"token"`
	// The page limit that was used for this request.
	Limit int `json:"limit"`
}

// GetItems returns the value of Items.
func (s *FinancialDataV2PendingTransactionsIDEventsGetOK) GetItems() []Event {
	return s.Items
}

// GetNextToken returns the value of NextToken.
func (s *FinancialDataV2PendingTransactionsIDEventsGetOK) GetNextToken() string {
	return s.NextToken
}

// GetToken returns the value of Token.
func (s *FinancialDataV2PendingTransactionsIDEventsGetOK) GetToken() string {
	return s.Token
}

// GetLimit returns the value of Limit.
func (s *FinancialDataV2PendingTransactionsIDEventsGetOK) GetLimit() int {
	return s.Limit
}

// SetItems sets the value of Items.
func (s *FinancialDataV2PendingTransactionsIDEventsGetOK) SetItems(val []Event) {
	s.Items = val
}

// SetNextToken sets the value of NextToken.
func (s *FinancialDataV2PendingTransactionsIDEventsGetOK) SetNextToken(val string) {
	s.NextToken = val
}

// SetToken sets the value of Token.
func (s *FinancialDataV2PendingTransactionsIDEventsGetOK) SetToken(val string) {
	s.Token = val
}

// SetLimit sets the value of Limit.
func (s *FinancialDataV2PendingTransactionsIDEventsGetOK) SetLimit(val int) {
	s.Limit = val
}

func (*FinancialDataV2PendingTransactionsIDEventsGetOK) financialDataV2PendingTransactionsIDEventsGetRes() {
}

type IamV2betaOAuth2TokenPostBadRequest OAuth2ErrorResponse

func (*IamV2betaOAuth2TokenPostBadRequest) iamV2betaOAuth2TokenPostRes() {}

type IamV2betaOAuth2TokenPostReq struct {
	GrantType IamV2betaOAuth2TokenPostReqGrantType `json:"grant_type"`
}

// GetGrantType returns the value of GrantType.
func (s *IamV2betaOAuth2TokenPostReq) GetGrantType() IamV2betaOAuth2TokenPostReqGrantType {
	return s.GrantType
}

// SetGrantType sets the value of GrantType.
func (s *IamV2betaOAuth2TokenPostReq) SetGrantType(val IamV2betaOAuth2TokenPostReqGrantType) {
	s.GrantType = val
}

type IamV2betaOAuth2TokenPostReqGrantType string

const (
	IamV2betaOAuth2TokenPostReqGrantTypeClientCredentials IamV2betaOAuth2TokenPostReqGrantType = "client_credentials"
)

// AllValues returns all IamV2betaOAuth2TokenPostReqGrantType values.
func (IamV2betaOAuth2TokenPostReqGrantType) AllValues() []IamV2betaOAuth2TokenPostReqGrantType {
	return []IamV2betaOAuth2TokenPostReqGrantType{
		IamV2betaOAuth2TokenPostReqGrantTypeClientCredentials,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IamV2betaOAuth2TokenPostReqGrantType) MarshalText() ([]byte, error) {
	switch s {
	case IamV2betaOAuth2TokenPostReqGrantTypeClientCredentials:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IamV2betaOAuth2TokenPostReqGrantType) UnmarshalText(data []byte) error {
	switch IamV2betaOAuth2TokenPostReqGrantType(data) {
	case IamV2betaOAuth2TokenPostReqGrantTypeClientCredentials:
		*s = IamV2betaOAuth2TokenPostReqGrantTypeClientCredentials
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IamV2betaOAuth2TokenPostUnauthorized OAuth2ErrorResponse

func (*IamV2betaOAuth2TokenPostUnauthorized) iamV2betaOAuth2TokenPostRes() {}

type MarketCode string

// Metadata is a `string-string` key-value container that
// can be used to store information known at the time of resource
// creation. This can be retrieved later on, for instance when a
// payment or expected transaction is reconciled with the booked
// transaction on the bank statement.
// Metadata can have at most 12 entries. Keys may have a
// maximum length of 64 chars and values a maximum length of 512
// chars.
// By default, this field is optional. It is possible to make it
// required in the Atlar Dashboard by visiting the [Metadata keys
// page](https://app.atlar.com/metadata-keys). Requirement rules
// can be specified per API resource. Both the Dashboard and the
// API will then enforce these rules and give validation errors
// when the required fields are not set.
// Ref: #/components/schemas/Metadata
type Metadata map[string]string

func (s *Metadata) init() Metadata {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/NationalIdentifier
type NationalIdentifier struct {
	// Type of the national identifier.
	Type   NationalIdentifierType `json:"type"`
	Market MarketCode             `json:"market"`
	// The identifier itself.
	Number string `json:"number"`
}

// GetType returns the value of Type.
func (s *NationalIdentifier) GetType() NationalIdentifierType {
	return s.Type
}

// GetMarket returns the value of Market.
func (s *NationalIdentifier) GetMarket() MarketCode {
	return s.Market
}

// GetNumber returns the value of Number.
func (s *NationalIdentifier) GetNumber() string {
	return s.Number
}

// SetType sets the value of Type.
func (s *NationalIdentifier) SetType(val NationalIdentifierType) {
	s.Type = val
}

// SetMarket sets the value of Market.
func (s *NationalIdentifier) SetMarket(val MarketCode) {
	s.Market = val
}

// SetNumber sets the value of Number.
func (s *NationalIdentifier) SetNumber(val string) {
	s.Number = val
}

// Type of the national identifier.
type NationalIdentifierType string

const (
	NationalIdentifierTypeCIVIC   NationalIdentifierType = "CIVIC"
	NationalIdentifierTypeCOMPANY NationalIdentifierType = "COMPANY"
)

// AllValues returns all NationalIdentifierType values.
func (NationalIdentifierType) AllValues() []NationalIdentifierType {
	return []NationalIdentifierType{
		NationalIdentifierTypeCIVIC,
		NationalIdentifierTypeCOMPANY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NationalIdentifierType) MarshalText() ([]byte, error) {
	switch s {
	case NationalIdentifierTypeCIVIC:
		return []byte(s), nil
	case NationalIdentifierTypeCOMPANY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NationalIdentifierType) UnmarshalText(data []byte) error {
	switch NationalIdentifierType(data) {
	case NationalIdentifierTypeCIVIC:
		*s = NationalIdentifierTypeCIVIC
		return nil
	case NationalIdentifierTypeCOMPANY:
		*s = NationalIdentifierTypeCOMPANY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Successful OAuth 2.0 access token response.
// Ref: #/components/schemas/OAuth2AccessTokenResponse
type OAuth2AccessTokenResponse struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
	// The lifetime in seconds of the access token.
	ExpiresIn OptInt64 `json:"expires_in"`
}

// GetAccessToken returns the value of AccessToken.
func (s *OAuth2AccessTokenResponse) GetAccessToken() string {
	return s.AccessToken
}

// GetTokenType returns the value of TokenType.
func (s *OAuth2AccessTokenResponse) GetTokenType() string {
	return s.TokenType
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *OAuth2AccessTokenResponse) GetExpiresIn() OptInt64 {
	return s.ExpiresIn
}

// SetAccessToken sets the value of AccessToken.
func (s *OAuth2AccessTokenResponse) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetTokenType sets the value of TokenType.
func (s *OAuth2AccessTokenResponse) SetTokenType(val string) {
	s.TokenType = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *OAuth2AccessTokenResponse) SetExpiresIn(val OptInt64) {
	s.ExpiresIn = val
}

func (*OAuth2AccessTokenResponse) iamV2betaOAuth2TokenPostRes() {}

// OAuth 2.0 error response.
// Ref: #/components/schemas/OAuth2ErrorResponse
type OAuth2ErrorResponse struct {
	// OAuth 2.0 error code. See a <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-5.
	// 2">RFC 6749</a> for details.
	Error OAuth2ErrorResponseError `json:"error"`
	// Human readable description of the error.
	ErrorDescription OptString `json:"error_description"`
}

// GetError returns the value of Error.
func (s *OAuth2ErrorResponse) GetError() OAuth2ErrorResponseError {
	return s.Error
}

// GetErrorDescription returns the value of ErrorDescription.
func (s *OAuth2ErrorResponse) GetErrorDescription() OptString {
	return s.ErrorDescription
}

// SetError sets the value of Error.
func (s *OAuth2ErrorResponse) SetError(val OAuth2ErrorResponseError) {
	s.Error = val
}

// SetErrorDescription sets the value of ErrorDescription.
func (s *OAuth2ErrorResponse) SetErrorDescription(val OptString) {
	s.ErrorDescription = val
}

// OAuth 2.0 error code. See a <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-5.
// 2">RFC 6749</a> for details.
type OAuth2ErrorResponseError string

const (
	OAuth2ErrorResponseErrorInvalidRequest       OAuth2ErrorResponseError = "invalid_request"
	OAuth2ErrorResponseErrorInvalidClient        OAuth2ErrorResponseError = "invalid_client"
	OAuth2ErrorResponseErrorInvalidGrant         OAuth2ErrorResponseError = "invalid_grant"
	OAuth2ErrorResponseErrorUnauthorizedClient   OAuth2ErrorResponseError = "unauthorized_client"
	OAuth2ErrorResponseErrorUnsupportedGrantType OAuth2ErrorResponseError = "unsupported_grant_type"
)

// AllValues returns all OAuth2ErrorResponseError values.
func (OAuth2ErrorResponseError) AllValues() []OAuth2ErrorResponseError {
	return []OAuth2ErrorResponseError{
		OAuth2ErrorResponseErrorInvalidRequest,
		OAuth2ErrorResponseErrorInvalidClient,
		OAuth2ErrorResponseErrorInvalidGrant,
		OAuth2ErrorResponseErrorUnauthorizedClient,
		OAuth2ErrorResponseErrorUnsupportedGrantType,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OAuth2ErrorResponseError) MarshalText() ([]byte, error) {
	switch s {
	case OAuth2ErrorResponseErrorInvalidRequest:
		return []byte(s), nil
	case OAuth2ErrorResponseErrorInvalidClient:
		return []byte(s), nil
	case OAuth2ErrorResponseErrorInvalidGrant:
		return []byte(s), nil
	case OAuth2ErrorResponseErrorUnauthorizedClient:
		return []byte(s), nil
	case OAuth2ErrorResponseErrorUnsupportedGrantType:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OAuth2ErrorResponseError) UnmarshalText(data []byte) error {
	switch OAuth2ErrorResponseError(data) {
	case OAuth2ErrorResponseErrorInvalidRequest:
		*s = OAuth2ErrorResponseErrorInvalidRequest
		return nil
	case OAuth2ErrorResponseErrorInvalidClient:
		*s = OAuth2ErrorResponseErrorInvalidClient
		return nil
	case OAuth2ErrorResponseErrorInvalidGrant:
		*s = OAuth2ErrorResponseErrorInvalidGrant
		return nil
	case OAuth2ErrorResponseErrorUnauthorizedClient:
		*s = OAuth2ErrorResponseErrorUnauthorizedClient
		return nil
	case OAuth2ErrorResponseErrorUnsupportedGrantType:
		*s = OAuth2ErrorResponseErrorUnsupportedGrantType
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptAddress returns new OptAddress with value set to v.
func NewOptAddress(v Address) OptAddress {
	return OptAddress{
		Value: v,
		Set:   true,
	}
}

// OptAddress is optional Address.
type OptAddress struct {
	Value Address
	Set   bool
}

// IsSet returns true if OptAddress was set.
func (o OptAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAddress) Reset() {
	var v Address
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAddress) SetTo(v Address) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAddress) Get() (v Address, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAddress) Or(d Address) Address {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBalanceType returns new OptBalanceType with value set to v.
func NewOptBalanceType(v BalanceType) OptBalanceType {
	return OptBalanceType{
		Value: v,
		Set:   true,
	}
}

// OptBalanceType is optional BalanceType.
type OptBalanceType struct {
	Value BalanceType
	Set   bool
}

// IsSet returns true if OptBalanceType was set.
func (o OptBalanceType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBalanceType) Reset() {
	var v BalanceType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBalanceType) SetTo(v BalanceType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBalanceType) Get() (v BalanceType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBalanceType) Or(d BalanceType) BalanceType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBatchResultSummary returns new OptBatchResultSummary with value set to v.
func NewOptBatchResultSummary(v BatchResultSummary) OptBatchResultSummary {
	return OptBatchResultSummary{
		Value: v,
		Set:   true,
	}
}

// OptBatchResultSummary is optional BatchResultSummary.
type OptBatchResultSummary struct {
	Value BatchResultSummary
	Set   bool
}

// IsSet returns true if OptBatchResultSummary was set.
func (o OptBatchResultSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBatchResultSummary) Reset() {
	var v BatchResultSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBatchResultSummary) SetTo(v BatchResultSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBatchResultSummary) Get() (v BatchResultSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBatchResultSummary) Or(d BatchResultSummary) BatchResultSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBatchResultsSummary returns new OptBatchResultsSummary with value set to v.
func NewOptBatchResultsSummary(v BatchResultsSummary) OptBatchResultsSummary {
	return OptBatchResultsSummary{
		Value: v,
		Set:   true,
	}
}

// OptBatchResultsSummary is optional BatchResultsSummary.
type OptBatchResultsSummary struct {
	Value BatchResultsSummary
	Set   bool
}

// IsSet returns true if OptBatchResultsSummary was set.
func (o OptBatchResultsSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBatchResultsSummary) Reset() {
	var v BatchResultsSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBatchResultsSummary) SetTo(v BatchResultsSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBatchResultsSummary) Get() (v BatchResultsSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBatchResultsSummary) Or(d BatchResultsSummary) BatchResultsSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCountryCode returns new OptCountryCode with value set to v.
func NewOptCountryCode(v CountryCode) OptCountryCode {
	return OptCountryCode{
		Value: v,
		Set:   true,
	}
}

// OptCountryCode is optional CountryCode.
type OptCountryCode struct {
	Value CountryCode
	Set   bool
}

// IsSet returns true if OptCountryCode was set.
func (o OptCountryCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCountryCode) Reset() {
	var v CountryCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCountryCode) SetTo(v CountryCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCountryCode) Get() (v CountryCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCountryCode) Or(d CountryCode) CountryCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventDetails returns new OptEventDetails with value set to v.
func NewOptEventDetails(v EventDetails) OptEventDetails {
	return OptEventDetails{
		Value: v,
		Set:   true,
	}
}

// OptEventDetails is optional EventDetails.
type OptEventDetails struct {
	Value EventDetails
	Set   bool
}

// IsSet returns true if OptEventDetails was set.
func (o OptEventDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventDetails) Reset() {
	var v EventDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventDetails) SetTo(v EventDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventDetails) Get() (v EventDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventDetails) Or(d EventDetails) EventDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExternalID returns new OptExternalID with value set to v.
func NewOptExternalID(v ExternalID) OptExternalID {
	return OptExternalID{
		Value: v,
		Set:   true,
	}
}

// OptExternalID is optional ExternalID.
type OptExternalID struct {
	Value ExternalID
	Set   bool
}

// IsSet returns true if OptExternalID was set.
func (o OptExternalID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExternalID) Reset() {
	var v ExternalID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExternalID) SetTo(v ExternalID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExternalID) Get() (v ExternalID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExternalID) Or(d ExternalID) ExternalID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNationalIdentifier returns new OptNationalIdentifier with value set to v.
func NewOptNationalIdentifier(v NationalIdentifier) OptNationalIdentifier {
	return OptNationalIdentifier{
		Value: v,
		Set:   true,
	}
}

// OptNationalIdentifier is optional NationalIdentifier.
type OptNationalIdentifier struct {
	Value NationalIdentifier
	Set   bool
}

// IsSet returns true if OptNationalIdentifier was set.
func (o OptNationalIdentifier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNationalIdentifier) Reset() {
	var v NationalIdentifier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNationalIdentifier) SetTo(v NationalIdentifier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNationalIdentifier) Get() (v NationalIdentifier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNationalIdentifier) Or(d NationalIdentifier) NationalIdentifier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMetadata returns new OptNilMetadata with value set to v.
func NewOptNilMetadata(v Metadata) OptNilMetadata {
	return OptNilMetadata{
		Value: v,
		Set:   true,
	}
}

// OptNilMetadata is optional nullable Metadata.
type OptNilMetadata struct {
	Value Metadata
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMetadata was set.
func (o OptNilMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMetadata) Reset() {
	var v Metadata
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMetadata) SetTo(v Metadata) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMetadata) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilMetadata) SetToNull() {
	o.Set = true
	o.Null = true
	var v Metadata
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMetadata) Get() (v Metadata, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMetadata) Or(d Metadata) Metadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResourceID returns new OptResourceID with value set to v.
func NewOptResourceID(v ResourceID) OptResourceID {
	return OptResourceID{
		Value: v,
		Set:   true,
	}
}

// OptResourceID is optional ResourceID.
type OptResourceID struct {
	Value ResourceID
	Set   bool
}

// IsSet returns true if OptResourceID was set.
func (o OptResourceID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResourceID) Reset() {
	var v ResourceID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResourceID) SetTo(v ResourceID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResourceID) Get() (v ResourceID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResourceID) Or(d ResourceID) ResourceID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserAuditInfo returns new OptUserAuditInfo with value set to v.
func NewOptUserAuditInfo(v UserAuditInfo) OptUserAuditInfo {
	return OptUserAuditInfo{
		Value: v,
		Set:   true,
	}
}

// OptUserAuditInfo is optional UserAuditInfo.
type OptUserAuditInfo struct {
	Value UserAuditInfo
	Set   bool
}

// IsSet returns true if OptUserAuditInfo was set.
func (o OptUserAuditInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserAuditInfo) Reset() {
	var v UserAuditInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserAuditInfo) SetTo(v UserAuditInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserAuditInfo) Get() (v UserAuditInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserAuditInfo) Or(d UserAuditInfo) UserAuditInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type OrganizationID string

// Ref: #/components/schemas/PaymentApprovalStep
type PaymentApprovalStep struct {
	// The ID of this step. Used when approving/rejecting.
	ID string `json:"id"`
	// The ID of the approval chain that triggered this approval step.
	ApprovalChainId string `json:"approvalChainId"`
	// IDs of the Roles that can approve/reject. Not specified if the step was automatically approved
	// based on an auto-approval chain.
	RequiredRoleIds []string         `json:"requiredRoleIds"`
	Status          ApprovalStatus   `json:"status"`
	Approver        OptUserAuditInfo `json:"approver"`
	// Timestamp when approved/rejected. Omitted if the step is not yet approved/rejected.
	Updated      OptDateTime `json:"updated"`
	AutoApproved bool        `json:"autoApproved"`
	// Allow approval by the user creating this resource if they have the role required for this step. By
	// default, this is not allowed to conform with a four-eyes principle where approval by another
	// person is required.
	AllowCreatorApproval OptBool `json:"allowCreatorApproval"`
}

// GetID returns the value of ID.
func (s *PaymentApprovalStep) GetID() string {
	return s.ID
}

// GetApprovalChainId returns the value of ApprovalChainId.
func (s *PaymentApprovalStep) GetApprovalChainId() string {
	return s.ApprovalChainId
}

// GetRequiredRoleIds returns the value of RequiredRoleIds.
func (s *PaymentApprovalStep) GetRequiredRoleIds() []string {
	return s.RequiredRoleIds
}

// GetStatus returns the value of Status.
func (s *PaymentApprovalStep) GetStatus() ApprovalStatus {
	return s.Status
}

// GetApprover returns the value of Approver.
func (s *PaymentApprovalStep) GetApprover() OptUserAuditInfo {
	return s.Approver
}

// GetUpdated returns the value of Updated.
func (s *PaymentApprovalStep) GetUpdated() OptDateTime {
	return s.Updated
}

// GetAutoApproved returns the value of AutoApproved.
func (s *PaymentApprovalStep) GetAutoApproved() bool {
	return s.AutoApproved
}

// GetAllowCreatorApproval returns the value of AllowCreatorApproval.
func (s *PaymentApprovalStep) GetAllowCreatorApproval() OptBool {
	return s.AllowCreatorApproval
}

// SetID sets the value of ID.
func (s *PaymentApprovalStep) SetID(val string) {
	s.ID = val
}

// SetApprovalChainId sets the value of ApprovalChainId.
func (s *PaymentApprovalStep) SetApprovalChainId(val string) {
	s.ApprovalChainId = val
}

// SetRequiredRoleIds sets the value of RequiredRoleIds.
func (s *PaymentApprovalStep) SetRequiredRoleIds(val []string) {
	s.RequiredRoleIds = val
}

// SetStatus sets the value of Status.
func (s *PaymentApprovalStep) SetStatus(val ApprovalStatus) {
	s.Status = val
}

// SetApprover sets the value of Approver.
func (s *PaymentApprovalStep) SetApprover(val OptUserAuditInfo) {
	s.Approver = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentApprovalStep) SetUpdated(val OptDateTime) {
	s.Updated = val
}

// SetAutoApproved sets the value of AutoApproved.
func (s *PaymentApprovalStep) SetAutoApproved(val bool) {
	s.AutoApproved = val
}

// SetAllowCreatorApproval sets the value of AllowCreatorApproval.
func (s *PaymentApprovalStep) SetAllowCreatorApproval(val OptBool) {
	s.AllowCreatorApproval = val
}

type PaymentsV2CounterpartiesIDDeleteNoContent ErrorResponse

func (*PaymentsV2CounterpartiesIDDeleteNoContent) paymentsV2CounterpartiesIDDeleteRes() {}

type PaymentsV2CounterpartiesIDDeleteNotFound ErrorResponse

func (*PaymentsV2CounterpartiesIDDeleteNotFound) paymentsV2CounterpartiesIDDeleteRes() {}

type PaymentsV2CreditTransferBatchesIDApprovePostBadRequest ErrorResponse

func (*PaymentsV2CreditTransferBatchesIDApprovePostBadRequest) paymentsV2CreditTransferBatchesIDApprovePostRes() {
}

type PaymentsV2CreditTransferBatchesIDApprovePostNotFound ErrorResponse

func (*PaymentsV2CreditTransferBatchesIDApprovePostNotFound) paymentsV2CreditTransferBatchesIDApprovePostRes() {
}

type PaymentsV2CreditTransferBatchesIDRejectPostBadRequest ErrorResponse

func (*PaymentsV2CreditTransferBatchesIDRejectPostBadRequest) paymentsV2CreditTransferBatchesIDRejectPostRes() {
}

type PaymentsV2CreditTransferBatchesIDRejectPostNotFound ErrorResponse

func (*PaymentsV2CreditTransferBatchesIDRejectPostNotFound) paymentsV2CreditTransferBatchesIDRejectPostRes() {
}

// Merged schema.
type PaymentsV2CreditTransfersIDEventsGetOK struct {
	// Merged property.
	Items []Event `json:"items"`
	// Pagination token for next page.
	// The value will be a non-empty string if there are more resources to be fetched.
	// The value will be an empty string if there are no more resources to be fetched.
	NextToken string `json:"nextToken"`
	// The pagination token that was used for this request.
	// The value will be an empty string if no `token` query parameter was provided with the request.
	Token string `json:"token"`
	// The page limit that was used for this request.
	Limit int `json:"limit"`
}

// GetItems returns the value of Items.
func (s *PaymentsV2CreditTransfersIDEventsGetOK) GetItems() []Event {
	return s.Items
}

// GetNextToken returns the value of NextToken.
func (s *PaymentsV2CreditTransfersIDEventsGetOK) GetNextToken() string {
	return s.NextToken
}

// GetToken returns the value of Token.
func (s *PaymentsV2CreditTransfersIDEventsGetOK) GetToken() string {
	return s.Token
}

// GetLimit returns the value of Limit.
func (s *PaymentsV2CreditTransfersIDEventsGetOK) GetLimit() int {
	return s.Limit
}

// SetItems sets the value of Items.
func (s *PaymentsV2CreditTransfersIDEventsGetOK) SetItems(val []Event) {
	s.Items = val
}

// SetNextToken sets the value of NextToken.
func (s *PaymentsV2CreditTransfersIDEventsGetOK) SetNextToken(val string) {
	s.NextToken = val
}

// SetToken sets the value of Token.
func (s *PaymentsV2CreditTransfersIDEventsGetOK) SetToken(val string) {
	s.Token = val
}

// SetLimit sets the value of Limit.
func (s *PaymentsV2CreditTransfersIDEventsGetOK) SetLimit(val int) {
	s.Limit = val
}

func (*PaymentsV2CreditTransfersIDEventsGetOK) paymentsV2CreditTransfersIDEventsGetRes() {}

// Merged schema.
type PaymentsV2DirectDebitsIDEventsGetOK struct {
	// Merged property.
	Items []Event `json:"items"`
	// Pagination token for next page.
	// The value will be a non-empty string if there are more resources to be fetched.
	// The value will be an empty string if there are no more resources to be fetched.
	NextToken string `json:"nextToken"`
	// The pagination token that was used for this request.
	// The value will be an empty string if no `token` query parameter was provided with the request.
	Token string `json:"token"`
	// The page limit that was used for this request.
	Limit int `json:"limit"`
}

// GetItems returns the value of Items.
func (s *PaymentsV2DirectDebitsIDEventsGetOK) GetItems() []Event {
	return s.Items
}

// GetNextToken returns the value of NextToken.
func (s *PaymentsV2DirectDebitsIDEventsGetOK) GetNextToken() string {
	return s.NextToken
}

// GetToken returns the value of Token.
func (s *PaymentsV2DirectDebitsIDEventsGetOK) GetToken() string {
	return s.Token
}

// GetLimit returns the value of Limit.
func (s *PaymentsV2DirectDebitsIDEventsGetOK) GetLimit() int {
	return s.Limit
}

// SetItems sets the value of Items.
func (s *PaymentsV2DirectDebitsIDEventsGetOK) SetItems(val []Event) {
	s.Items = val
}

// SetNextToken sets the value of NextToken.
func (s *PaymentsV2DirectDebitsIDEventsGetOK) SetNextToken(val string) {
	s.NextToken = val
}

// SetToken sets the value of Token.
func (s *PaymentsV2DirectDebitsIDEventsGetOK) SetToken(val string) {
	s.Token = val
}

// SetLimit sets the value of Limit.
func (s *PaymentsV2DirectDebitsIDEventsGetOK) SetLimit(val int) {
	s.Limit = val
}

func (*PaymentsV2DirectDebitsIDEventsGetOK) paymentsV2DirectDebitsIDEventsGetRes() {}

type PaymentsV2ExternalAccountsIDDeleteNoContent ErrorResponse

func (*PaymentsV2ExternalAccountsIDDeleteNoContent) paymentsV2ExternalAccountsIDDeleteRes() {}

type PaymentsV2ExternalAccountsIDDeleteNotFound ErrorResponse

func (*PaymentsV2ExternalAccountsIDDeleteNotFound) paymentsV2ExternalAccountsIDDeleteRes() {}

// Merged schema.
type PaymentsV2MandatesIDEventsGetOK struct {
	// Merged property.
	Items []Event `json:"items"`
	// Pagination token for next page.
	// The value will be a non-empty string if there are more resources to be fetched.
	// The value will be an empty string if there are no more resources to be fetched.
	NextToken string `json:"nextToken"`
	// The pagination token that was used for this request.
	// The value will be an empty string if no `token` query parameter was provided with the request.
	Token string `json:"token"`
	// The page limit that was used for this request.
	Limit int `json:"limit"`
}

// GetItems returns the value of Items.
func (s *PaymentsV2MandatesIDEventsGetOK) GetItems() []Event {
	return s.Items
}

// GetNextToken returns the value of NextToken.
func (s *PaymentsV2MandatesIDEventsGetOK) GetNextToken() string {
	return s.NextToken
}

// GetToken returns the value of Token.
func (s *PaymentsV2MandatesIDEventsGetOK) GetToken() string {
	return s.Token
}

// GetLimit returns the value of Limit.
func (s *PaymentsV2MandatesIDEventsGetOK) GetLimit() int {
	return s.Limit
}

// SetItems sets the value of Items.
func (s *PaymentsV2MandatesIDEventsGetOK) SetItems(val []Event) {
	s.Items = val
}

// SetNextToken sets the value of NextToken.
func (s *PaymentsV2MandatesIDEventsGetOK) SetNextToken(val string) {
	s.NextToken = val
}

// SetToken sets the value of Token.
func (s *PaymentsV2MandatesIDEventsGetOK) SetToken(val string) {
	s.Token = val
}

// SetLimit sets the value of Limit.
func (s *PaymentsV2MandatesIDEventsGetOK) SetLimit(val int) {
	s.Limit = val
}

func (*PaymentsV2MandatesIDEventsGetOK) paymentsV2MandatesIDEventsGetRes() {}

// Merged schema.
type PaymentsV2betaCreditTransferBatchesGetOK struct {
	// Merged property.
	Items []CreditTransferBatch `json:"items"`
	// Pagination token for next page.
	// The value will be a non-empty string if there are more resources to be fetched.
	// The value will be an empty string if there are no more resources to be fetched.
	NextToken string `json:"nextToken"`
	// The pagination token that was used for this request.
	// The value will be an empty string if no `token` query parameter was provided with the request.
	Token string `json:"token"`
	// The page limit that was used for this request.
	Limit int `json:"limit"`
}

// GetItems returns the value of Items.
func (s *PaymentsV2betaCreditTransferBatchesGetOK) GetItems() []CreditTransferBatch {
	return s.Items
}

// GetNextToken returns the value of NextToken.
func (s *PaymentsV2betaCreditTransferBatchesGetOK) GetNextToken() string {
	return s.NextToken
}

// GetToken returns the value of Token.
func (s *PaymentsV2betaCreditTransferBatchesGetOK) GetToken() string {
	return s.Token
}

// GetLimit returns the value of Limit.
func (s *PaymentsV2betaCreditTransferBatchesGetOK) GetLimit() int {
	return s.Limit
}

// SetItems sets the value of Items.
func (s *PaymentsV2betaCreditTransferBatchesGetOK) SetItems(val []CreditTransferBatch) {
	s.Items = val
}

// SetNextToken sets the value of NextToken.
func (s *PaymentsV2betaCreditTransferBatchesGetOK) SetNextToken(val string) {
	s.NextToken = val
}

// SetToken sets the value of Token.
func (s *PaymentsV2betaCreditTransferBatchesGetOK) SetToken(val string) {
	s.Token = val
}

// SetLimit sets the value of Limit.
func (s *PaymentsV2betaCreditTransferBatchesGetOK) SetLimit(val int) {
	s.Limit = val
}

func (*PaymentsV2betaCreditTransferBatchesGetOK) paymentsV2betaCreditTransferBatchesGetRes() {}

type PaymentsV2betaCreditTransferBatchesIDResultsGetBadRequest ErrorResponse

func (*PaymentsV2betaCreditTransferBatchesIDResultsGetBadRequest) paymentsV2betaCreditTransferBatchesIDResultsGetRes() {
}

type PaymentsV2betaCreditTransferBatchesIDResultsGetNotFound ErrorResponse

func (*PaymentsV2betaCreditTransferBatchesIDResultsGetNotFound) paymentsV2betaCreditTransferBatchesIDResultsGetRes() {
}

// Merged schema.
type PaymentsV2betaCreditTransferBatchesIDResultsGetOK struct {
	// Merged property.
	Items []BatchResult `json:"items"`
	// Pagination token for next page.
	// The value will be a non-empty string if there are more resources to be fetched.
	// The value will be an empty string if there are no more resources to be fetched.
	NextToken string `json:"nextToken"`
	// The pagination token that was used for this request.
	// The value will be an empty string if no `token` query parameter was provided with the request.
	Token string `json:"token"`
	// The page limit that was used for this request.
	Limit int `json:"limit"`
}

// GetItems returns the value of Items.
func (s *PaymentsV2betaCreditTransferBatchesIDResultsGetOK) GetItems() []BatchResult {
	return s.Items
}

// GetNextToken returns the value of NextToken.
func (s *PaymentsV2betaCreditTransferBatchesIDResultsGetOK) GetNextToken() string {
	return s.NextToken
}

// GetToken returns the value of Token.
func (s *PaymentsV2betaCreditTransferBatchesIDResultsGetOK) GetToken() string {
	return s.Token
}

// GetLimit returns the value of Limit.
func (s *PaymentsV2betaCreditTransferBatchesIDResultsGetOK) GetLimit() int {
	return s.Limit
}

// SetItems sets the value of Items.
func (s *PaymentsV2betaCreditTransferBatchesIDResultsGetOK) SetItems(val []BatchResult) {
	s.Items = val
}

// SetNextToken sets the value of NextToken.
func (s *PaymentsV2betaCreditTransferBatchesIDResultsGetOK) SetNextToken(val string) {
	s.NextToken = val
}

// SetToken sets the value of Token.
func (s *PaymentsV2betaCreditTransferBatchesIDResultsGetOK) SetToken(val string) {
	s.Token = val
}

// SetLimit sets the value of Limit.
func (s *PaymentsV2betaCreditTransferBatchesIDResultsGetOK) SetLimit(val int) {
	s.Limit = val
}

func (*PaymentsV2betaCreditTransferBatchesIDResultsGetOK) paymentsV2betaCreditTransferBatchesIDResultsGetRes() {
}

type PaymentsV2betaCreditTransferBatchesPostReqMultipartFormData struct {
	Treatment       BatchTreatmentType             `json:"treatment"`
	FileContentType CreditTransferBatchContentType `json:"fileContentType"`
	File            ht.MultipartFile               `json:"file"`
}

// GetTreatment returns the value of Treatment.
func (s *PaymentsV2betaCreditTransferBatchesPostReqMultipartFormData) GetTreatment() BatchTreatmentType {
	return s.Treatment
}

// GetFileContentType returns the value of FileContentType.
func (s *PaymentsV2betaCreditTransferBatchesPostReqMultipartFormData) GetFileContentType() CreditTransferBatchContentType {
	return s.FileContentType
}

// GetFile returns the value of File.
func (s *PaymentsV2betaCreditTransferBatchesPostReqMultipartFormData) GetFile() ht.MultipartFile {
	return s.File
}

// SetTreatment sets the value of Treatment.
func (s *PaymentsV2betaCreditTransferBatchesPostReqMultipartFormData) SetTreatment(val BatchTreatmentType) {
	s.Treatment = val
}

// SetFileContentType sets the value of FileContentType.
func (s *PaymentsV2betaCreditTransferBatchesPostReqMultipartFormData) SetFileContentType(val CreditTransferBatchContentType) {
	s.FileContentType = val
}

// SetFile sets the value of File.
func (s *PaymentsV2betaCreditTransferBatchesPostReqMultipartFormData) SetFile(val ht.MultipartFile) {
	s.File = val
}

// Ref: #/components/schemas/RejectPaymentRequest
type RejectPaymentRequest struct {
	// An optional rejection reason that will propagate to the reject event on the payment.
	Reason OptString `json:"reason"`
}

// GetReason returns the value of Reason.
func (s *RejectPaymentRequest) GetReason() OptString {
	return s.Reason
}

// SetReason sets the value of Reason.
func (s *RejectPaymentRequest) SetReason(val OptString) {
	s.Reason = val
}

type ResourceID string

type ResourceVersion int

// UnexpectedErrorStatusCode wraps ErrorResponse with StatusCode.
type UnexpectedErrorStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *UnexpectedErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *UnexpectedErrorStatusCode) GetResponse() ErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *UnexpectedErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *UnexpectedErrorStatusCode) SetResponse(val ErrorResponse) {
	s.Response = val
}

type UpdatedTimestamp time.Time

// User information for audit trail.
// Ref: #/components/schemas/UserAuditInfo
type UserAuditInfo struct {
	ID       ResourceID `json:"id"`
	Username string     `json:"username"`
	// User given name(s) information. May be a concatenation of firstname, lastname etc.
	Name OptString `json:"name"`
	// Role ID.
	RoleId OptString `json:"roleId"`
}

// GetID returns the value of ID.
func (s *UserAuditInfo) GetID() ResourceID {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *UserAuditInfo) GetUsername() string {
	return s.Username
}

// GetName returns the value of Name.
func (s *UserAuditInfo) GetName() OptString {
	return s.Name
}

// GetRoleId returns the value of RoleId.
func (s *UserAuditInfo) GetRoleId() OptString {
	return s.RoleId
}

// SetID sets the value of ID.
func (s *UserAuditInfo) SetID(val ResourceID) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *UserAuditInfo) SetUsername(val string) {
	s.Username = val
}

// SetName sets the value of Name.
func (s *UserAuditInfo) SetName(val OptString) {
	s.Name = val
}

// SetRoleId sets the value of RoleId.
func (s *UserAuditInfo) SetRoleId(val OptString) {
	s.RoleId = val
}
