// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'f': // Prefix: "financial-data/v2/"
				origElem := elem
				if l := len("financial-data/v2/"); len(elem) >= l && elem[0:l] == "financial-data/v2/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "accounts/"
					origElem := elem
					if l := len("accounts/"); len(elem) >= l && elem[0:l] == "accounts/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/balances"
						origElem := elem
						if l := len("/balances"); len(elem) >= l && elem[0:l] == "/balances" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleFinancialDataV2AccountsIDBalancesGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "entities"
					origElem := elem
					if l := len("entities"); len(elem) >= l && elem[0:l] == "entities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleFinancialDataV2EntitiesGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleFinancialDataV2EntitiesPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleFinancialDataV2EntitiesIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleFinancialDataV2EntitiesIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "pending-transactions/"
					origElem := elem
					if l := len("pending-transactions/"); len(elem) >= l && elem[0:l] == "pending-transactions/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/events"
						origElem := elem
						if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleFinancialDataV2PendingTransactionsIDEventsGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "iam/v2beta/oauth2/token"
				origElem := elem
				if l := len("iam/v2beta/oauth2/token"); len(elem) >= l && elem[0:l] == "iam/v2beta/oauth2/token" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleIamV2betaOAuth2TokenPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 'p': // Prefix: "payments/v2"
				origElem := elem
				if l := len("payments/v2"); len(elem) >= l && elem[0:l] == "payments/v2" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "c"
						origElem := elem
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "ounterparties/"
							origElem := elem
							if l := len("ounterparties/"); len(elem) >= l && elem[0:l] == "ounterparties/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handlePaymentsV2CounterpartiesIDDeleteRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "redit-transfer"
							origElem := elem
							if l := len("redit-transfer"); len(elem) >= l && elem[0:l] == "redit-transfer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '-': // Prefix: "-batches/"
								origElem := elem
								if l := len("-batches/"); len(elem) >= l && elem[0:l] == "-batches/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until ":"
								idx := strings.IndexByte(elem, ':')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case ':': // Prefix: ":"
									origElem := elem
									if l := len(":"); len(elem) >= l && elem[0:l] == ":" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "approve"
										origElem := elem
										if l := len("approve"); len(elem) >= l && elem[0:l] == "approve" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handlePaymentsV2CreditTransferBatchesIDApprovePostRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									case 'r': // Prefix: "reject"
										origElem := elem
										if l := len("reject"); len(elem) >= l && elem[0:l] == "reject" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handlePaymentsV2CreditTransferBatchesIDRejectPostRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "s/"
								origElem := elem
								if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/events"
									origElem := elem
									if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handlePaymentsV2CreditTransfersIDEventsGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'd': // Prefix: "direct-debits/"
						origElem := elem
						if l := len("direct-debits/"); len(elem) >= l && elem[0:l] == "direct-debits/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/events"
							origElem := elem
							if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handlePaymentsV2DirectDebitsIDEventsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'e': // Prefix: "external-accounts/"
						origElem := elem
						if l := len("external-accounts/"); len(elem) >= l && elem[0:l] == "external-accounts/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handlePaymentsV2ExternalAccountsIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE")
							}

							return
						}

						elem = origElem
					case 'm': // Prefix: "mandates/"
						origElem := elem
						if l := len("mandates/"); len(elem) >= l && elem[0:l] == "mandates/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/events"
							origElem := elem
							if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handlePaymentsV2MandatesIDEventsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'b': // Prefix: "beta/credit-transfer-batches"
					origElem := elem
					if l := len("beta/credit-transfer-batches"); len(elem) >= l && elem[0:l] == "beta/credit-transfer-batches" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handlePaymentsV2betaCreditTransferBatchesGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePaymentsV2betaCreditTransferBatchesPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handlePaymentsV2betaCreditTransferBatchesIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/results"
							origElem := elem
							if l := len("/results"); len(elem) >= l && elem[0:l] == "/results" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handlePaymentsV2betaCreditTransferBatchesIDResultsGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'f': // Prefix: "financial-data/v2/"
				origElem := elem
				if l := len("financial-data/v2/"); len(elem) >= l && elem[0:l] == "financial-data/v2/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "accounts/"
					origElem := elem
					if l := len("accounts/"); len(elem) >= l && elem[0:l] == "accounts/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/balances"
						origElem := elem
						if l := len("/balances"); len(elem) >= l && elem[0:l] == "/balances" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "FinancialDataV2AccountsIDBalancesGet"
								r.summary = "List balances"
								r.operationID = ""
								r.pathPattern = "/financial-data/v2/accounts/{id}/balances"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "entities"
					origElem := elem
					if l := len("entities"); len(elem) >= l && elem[0:l] == "entities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "FinancialDataV2EntitiesGet"
							r.summary = "List entities"
							r.operationID = ""
							r.pathPattern = "/financial-data/v2/entities"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "FinancialDataV2EntitiesPost"
							r.summary = "Create entity"
							r.operationID = ""
							r.pathPattern = "/financial-data/v2/entities"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "FinancialDataV2EntitiesIDDelete"
								r.summary = "Delete entity"
								r.operationID = ""
								r.pathPattern = "/financial-data/v2/entities/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "FinancialDataV2EntitiesIDGet"
								r.summary = "Get entity"
								r.operationID = ""
								r.pathPattern = "/financial-data/v2/entities/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "pending-transactions/"
					origElem := elem
					if l := len("pending-transactions/"); len(elem) >= l && elem[0:l] == "pending-transactions/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/events"
						origElem := elem
						if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "FinancialDataV2PendingTransactionsIDEventsGet"
								r.summary = "List pending transaction events"
								r.operationID = ""
								r.pathPattern = "/financial-data/v2/pending-transactions/{id}/events"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "iam/v2beta/oauth2/token"
				origElem := elem
				if l := len("iam/v2beta/oauth2/token"); len(elem) >= l && elem[0:l] == "iam/v2beta/oauth2/token" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "IamV2betaOAuth2TokenPost"
						r.summary = "Create OAuth 2.0 access token"
						r.operationID = ""
						r.pathPattern = "/iam/v2beta/oauth2/token"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'p': // Prefix: "payments/v2"
				origElem := elem
				if l := len("payments/v2"); len(elem) >= l && elem[0:l] == "payments/v2" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "c"
						origElem := elem
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "ounterparties/"
							origElem := elem
							if l := len("ounterparties/"); len(elem) >= l && elem[0:l] == "ounterparties/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "PaymentsV2CounterpartiesIDDelete"
									r.summary = "Delete counterparty"
									r.operationID = ""
									r.pathPattern = "/payments/v2/counterparties/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "redit-transfer"
							origElem := elem
							if l := len("redit-transfer"); len(elem) >= l && elem[0:l] == "redit-transfer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '-': // Prefix: "-batches/"
								origElem := elem
								if l := len("-batches/"); len(elem) >= l && elem[0:l] == "-batches/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until ":"
								idx := strings.IndexByte(elem, ':')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case ':': // Prefix: ":"
									origElem := elem
									if l := len(":"); len(elem) >= l && elem[0:l] == ":" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "approve"
										origElem := elem
										if l := len("approve"); len(elem) >= l && elem[0:l] == "approve" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = "PaymentsV2CreditTransferBatchesIDApprovePost"
												r.summary = "Approve credit transfer batch"
												r.operationID = ""
												r.pathPattern = "/payments/v2/credit-transfer-batches/{id}:approve"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'r': // Prefix: "reject"
										origElem := elem
										if l := len("reject"); len(elem) >= l && elem[0:l] == "reject" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = "PaymentsV2CreditTransferBatchesIDRejectPost"
												r.summary = "Reject credit transfer batch"
												r.operationID = ""
												r.pathPattern = "/payments/v2/credit-transfer-batches/{id}:reject"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "s/"
								origElem := elem
								if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/events"
									origElem := elem
									if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "PaymentsV2CreditTransfersIDEventsGet"
											r.summary = "List credit transfer events"
											r.operationID = ""
											r.pathPattern = "/payments/v2/credit-transfers/{id}/events"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'd': // Prefix: "direct-debits/"
						origElem := elem
						if l := len("direct-debits/"); len(elem) >= l && elem[0:l] == "direct-debits/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/events"
							origElem := elem
							if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "PaymentsV2DirectDebitsIDEventsGet"
									r.summary = "List direct debit events"
									r.operationID = ""
									r.pathPattern = "/payments/v2/direct-debits/{id}/events"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'e': // Prefix: "external-accounts/"
						origElem := elem
						if l := len("external-accounts/"); len(elem) >= l && elem[0:l] == "external-accounts/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "PaymentsV2ExternalAccountsIDDelete"
								r.summary = "Delete external account"
								r.operationID = ""
								r.pathPattern = "/payments/v2/external-accounts/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'm': // Prefix: "mandates/"
						origElem := elem
						if l := len("mandates/"); len(elem) >= l && elem[0:l] == "mandates/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/events"
							origElem := elem
							if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "PaymentsV2MandatesIDEventsGet"
									r.summary = "List mandate events"
									r.operationID = ""
									r.pathPattern = "/payments/v2/mandates/{id}/events"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'b': // Prefix: "beta/credit-transfer-batches"
					origElem := elem
					if l := len("beta/credit-transfer-batches"); len(elem) >= l && elem[0:l] == "beta/credit-transfer-batches" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "PaymentsV2betaCreditTransferBatchesGet"
							r.summary = "List credit transfer batches"
							r.operationID = ""
							r.pathPattern = "/payments/v2beta/credit-transfer-batches"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "PaymentsV2betaCreditTransferBatchesPost"
							r.summary = "Create credit transfer batch"
							r.operationID = ""
							r.pathPattern = "/payments/v2beta/credit-transfer-batches"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "PaymentsV2betaCreditTransferBatchesIDGet"
								r.summary = "Get credit transfer batch"
								r.operationID = ""
								r.pathPattern = "/payments/v2beta/credit-transfer-batches/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/results"
							origElem := elem
							if l := len("/results"); len(elem) >= l && elem[0:l] == "/results" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "PaymentsV2betaCreditTransferBatchesIDResultsGet"
									r.summary = "List credit transfer batch results"
									r.operationID = ""
									r.pathPattern = "/payments/v2beta/credit-transfer-batches/{id}/results"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
